{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EPMware Agent Installation Guide","text":""},{"location":"#epmware-agent-installation-guide","title":"EPMware Agent Installation Guide","text":"<p>Welcome to the EPMware Agent Installation Guide. This comprehensive documentation provides detailed instructions for installing, configuring, and managing the EPMware On-Premise Agent.</p>"},{"location":"#about-the-epmware-agent","title":"About the EPMware Agent","text":"<p>The EPMware On-Premise Agent enables secure integration between EPMware Cloud applications and your on-premise target applications. It acts as a bridge, allowing EPMware to deploy metadata to your Hyperion Financial Management (HFM), Essbase, Planning, and Oracle Cloud EPM applications without direct network exposure.</p>"},{"location":"#whats-in-this-guide","title":"What's in This Guide","text":"<ul> <li> <p> Installation   Step-by-step instructions for installing the agent on Windows and Linux servers</p> </li> <li> <p> Configuration   Detailed configuration settings for agent properties, REST tokens, and service setup</p> </li> <li> <p> Application Integration   Specific setup instructions for HFM, Planning, PCMCS, and other EPM applications</p> </li> <li> <p> Troubleshooting   Solutions to common issues and debugging techniques</p> </li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Secure Communication - REST API-based authentication with encrypted tokens</li> <li>Multi-Platform Support - Compatible with Windows and Linux operating systems</li> <li>Application Support - Integrates with Hyperion HFM, Planning, Essbase, and Oracle Cloud EPM</li> <li>Automated Deployment - Scheduled metadata deployments with configurable polling intervals</li> <li>Comprehensive Logging - Detailed logs for monitoring and troubleshooting</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Before installing the EPMware Agent, ensure you have:</p> <ul> <li>[ ] Java 1.8 or higher installed</li> <li>[ ] Administrative access to the target server</li> <li>[ ] Network connectivity to EPMware application (port 443 for cloud, configurable for on-premise)</li> <li>[ ] Cygwin installed (for Windows servers)</li> <li>[ ] Valid EPMware user account with REST API token</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Download the EPMware Agent package</li> <li>Install Prerequisites (Cygwin for Windows, Java)</li> <li>Configure the agent properties</li> <li>Test the connection to EPMware</li> <li>Schedule the agent as a service</li> </ol>"},{"location":"#support","title":"Support","text":"<p>For additional assistance, please contact:</p> <ul> <li>Email: support@epmware.com</li> <li>Phone: 408-614-0442</li> <li>Website: www.epmware.com</li> </ul>"},{"location":"#document-information","title":"Document Information","text":"<ul> <li>Version: 1.7</li> <li>Updated: November 2023</li> <li>Copyright: \u00a9 2023 EPMware, Inc. All rights reserved.</li> </ul> <p>License Agreement</p> <p>This document and the software described herein are proprietary to EPMware, Inc. and are protected by copyright and other intellectual property laws. Use is subject to the license agreement between you and EPMware, Inc.</p>"},{"location":"appendices/","title":"Appendices","text":""},{"location":"appendices/#appendices","title":"Appendices","text":"<p>This section contains reference materials, quick guides, and supplementary information for the EPMware Agent.</p>"},{"location":"appendices/#reference-materials","title":"Reference Materials","text":"<ul> <li> <p> Appendix A - Port Requirements   Network ports and firewall configuration reference</p> </li> <li> <p> Appendix B - Security Checklist   Comprehensive security configuration checklist</p> </li> <li> <p> Appendix C - Agent Commands   Complete command reference for agent operations</p> </li> <li> <p> Appendix D - Error Codes   Error code reference and resolution guide</p> </li> </ul>"},{"location":"appendices/#quick-reference-guides","title":"Quick Reference Guides","text":""},{"location":"appendices/#file-locations","title":"File Locations","text":"<p>Common file paths for reference:</p>"},{"location":"appendices/#windows-paths","title":"Windows Paths","text":"<pre><code>Installation: C:\\cygwin64\\home\\[username]\\\nConfiguration: C:\\cygwin64\\home\\[username]\\agent.properties\nLogs: C:\\cygwin64\\home\\[username]\\logs\\\nService Script: C:\\cygwin64\\home\\[username]\\ew_target_service.sh\n</code></pre>"},{"location":"appendices/#linux-paths","title":"Linux Paths","text":"<pre><code>Installation: /home/[username]/\nConfiguration: /home/[username]/agent.properties\nLogs: /home/[username]/logs/\nService Script: /home/[username]/ew_target_service.sh\nSystemd Service: /etc/systemd/system/epmware-agent.service\n</code></pre>"},{"location":"appendices/#configuration-parameters","title":"Configuration Parameters","text":"<p>Essential configuration parameters:</p> Parameter Description Example <code>ew.portal.server</code> EPMware server name <code>epmware1.company.com</code> <code>ew.portal.url</code> EPMware URL <code>https://epmware.company.com</code> <code>ew.portal.token</code> REST API token <code>UUID-format-token</code> <code>agent.interval.millisecond</code> Polling interval <code>30000</code> <code>agent.root.dir</code> Agent directory <code>/home/epmadmin</code>"},{"location":"appendices/#common-commands","title":"Common Commands","text":"<p>Frequently used commands:</p>"},{"location":"appendices/#startstop-operations","title":"Start/Stop Operations","text":"<pre><code># Start agent\n./ew_target_service.sh\n\n# Stop agent\npkill -f epmware-agent\n\n# Check status\nps aux | grep epmware-agent\n\n# View logs\ntail -f logs/agent.log\n</code></pre>"},{"location":"appendices/#testing-and-validation","title":"Testing and Validation","text":"<pre><code># Test connection\njava -jar epmware-agent.jar --test\n\n# Validate configuration\njava -jar epmware-agent.jar --validate-config\n\n# Check version\njava -jar epmware-agent.jar --version\n</code></pre>"},{"location":"appendices/#network-requirements","title":"Network Requirements","text":"<p>Standard port requirements:</p> Direction Port Protocol Purpose Outbound 443 HTTPS EPMware Cloud Outbound 8080 HTTP EPMware On-Premise Outbound 19000 TCP HFM Outbound 19000 TCP Planning Outbound 1423 TCP Essbase"},{"location":"appendices/#system-requirements-summary","title":"System Requirements Summary","text":"<p>Minimum requirements checklist:</p> <ul> <li>[ ] CPU: 2+ cores x64</li> <li>[ ] Memory: 16 GB RAM</li> <li>[ ] Storage: 60 GB available</li> <li>[ ] Java: Version 1.8+</li> <li>[ ] Network: 10 Mbps+</li> <li>[ ] OS: Supported version</li> </ul>"},{"location":"appendices/#security-requirements","title":"Security Requirements","text":"<p>Security configuration checklist:</p> <ul> <li>[ ] Dedicated service account</li> <li>[ ] Restricted file permissions</li> <li>[ ] Encrypted password files</li> <li>[ ] Regular token rotation</li> <li>[ ] Firewall rules configured</li> <li>[ ] Audit logging enabled</li> </ul>"},{"location":"appendices/#environment-variables","title":"Environment Variables","text":"<p>Commonly used environment variables:</p> <pre><code># Java Configuration\nJAVA_HOME=/usr/java/latest\nPATH=$JAVA_HOME/bin:$PATH\n\n# Agent Configuration\nEPMWARE_HOME=/home/epmadmin\nEPMWARE_TOKEN=your-token-here\nEPMWARE_ENV=production\n\n# Proxy Configuration (if needed)\nHTTP_PROXY=http://proxy:8080\nHTTPS_PROXY=http://proxy:8080\nNO_PROXY=localhost,127.0.0.1\n</code></pre>"},{"location":"appendices/#log-file-reference","title":"Log File Reference","text":"<p>Understanding log entries:</p>"},{"location":"appendices/#log-levels","title":"Log Levels","text":"Level Description Example <code>TRACE</code> Detailed debug info Method entry/exit <code>DEBUG</code> Debug information Variable values <code>INFO</code> Normal operations Deployment started <code>WARN</code> Warning conditions Retry attempt <code>ERROR</code> Error conditions Connection failed <code>FATAL</code> Fatal errors Agent crash"},{"location":"appendices/#log-file-rotation","title":"Log File Rotation","text":"<pre><code># Default rotation settings\nlog.file.max-size=10MB\nlog.file.max-history=30\nlog.file.total-size-cap=1GB\n</code></pre>"},{"location":"appendices/#troubleshooting-quick-reference","title":"Troubleshooting Quick Reference","text":""},{"location":"appendices/#problem-diagnosis-flow","title":"Problem Diagnosis Flow","text":"<pre><code>graph TD\n    A[Problem Detected] --&gt; B{Agent Running?}\n    B --&gt;|No| C[Check Prerequisites]\n    B --&gt;|Yes| D{Connecting?}\n    C --&gt; E[Java/Config/Permissions]\n    D --&gt;|No| F[Network/Token/URL]\n    D --&gt;|Yes| G{Deploying?}\n    F --&gt; H[Fix Configuration]\n    G --&gt;|No| I[Application Access]\n    G --&gt;|Yes| J[Check Logs]\n</code></pre>"},{"location":"appendices/#critical-files-to-check","title":"Critical Files to Check","text":"<ol> <li><code>agent.properties</code> - Configuration</li> <li><code>agent.log</code> - Main activity log</li> <li><code>agent-poll.log</code> - Polling activity</li> <li><code>ew_target_service.sh</code> - Service script</li> </ol>"},{"location":"appendices/#performance-tuning-reference","title":"Performance Tuning Reference","text":""},{"location":"appendices/#jvm-settings","title":"JVM Settings","text":"<pre><code># Memory Settings\n-Xms1024m          # Initial heap\n-Xmx2048m          # Maximum heap\n-XX:MaxMetaspaceSize=256m\n\n# Garbage Collection\n-XX:+UseG1GC\n-XX:MaxGCPauseMillis=200\n-XX:G1HeapRegionSize=8m\n\n# Debugging\n-XX:+HeapDumpOnOutOfMemoryError\n-XX:HeapDumpPath=/var/log/epmware\n</code></pre>"},{"location":"appendices/#system-tuning","title":"System Tuning","text":"<pre><code># File Descriptors\nulimit -n 65536\n\n# Process Limits\nulimit -u 32768\n\n# Network Tuning\nsysctl -w net.core.rmem_max=134217728\nsysctl -w net.core.wmem_max=134217728\n</code></pre>"},{"location":"appendices/#maintenance-schedule-template","title":"Maintenance Schedule Template","text":"<p>Suggested maintenance activities:</p>"},{"location":"appendices/#daily","title":"Daily","text":"<ul> <li>[ ] Check agent status</li> <li>[ ] Review error logs</li> <li>[ ] Monitor deployments</li> <li>[ ] Verify polling activity</li> </ul>"},{"location":"appendices/#weekly","title":"Weekly","text":"<ul> <li>[ ] Archive old logs</li> <li>[ ] Clean temp files</li> <li>[ ] Review performance metrics</li> <li>[ ] Test connectivity</li> </ul>"},{"location":"appendices/#monthly","title":"Monthly","text":"<ul> <li>[ ] Rotate credentials</li> <li>[ ] Update documentation</li> <li>[ ] Review security settings</li> <li>[ ] Capacity planning</li> </ul>"},{"location":"appendices/#quarterly","title":"Quarterly","text":"<ul> <li>[ ] Agent updates</li> <li>[ ] Security audit</li> <li>[ ] Performance review</li> <li>[ ] DR testing</li> </ul>"},{"location":"appendices/#support-information","title":"Support Information","text":""},{"location":"appendices/#collecting-diagnostic-information","title":"Collecting Diagnostic Information","text":"<p>When contacting support, gather:</p> <pre><code># System information\nuname -a &gt; diagnostics.txt\njava -version &gt;&gt; diagnostics.txt\ndf -h &gt;&gt; diagnostics.txt\nfree -h &gt;&gt; diagnostics.txt\n\n# Agent information\ncat agent.properties | grep -v token &gt;&gt; diagnostics.txt\ntail -1000 logs/agent.log &gt;&gt; diagnostics.txt\nps aux | grep epmware &gt;&gt; diagnostics.txt\n\n# Network information\nnetstat -an | grep ESTABLISHED &gt;&gt; diagnostics.txt\n</code></pre>"},{"location":"appendices/#support-contact-information","title":"Support Contact Information","text":"<p>EPMware Support - Email: support@epmware.com - Phone: 408-614-0442 - Portal: support.epmware.com - Hours: Monday-Friday, 8 AM - 6 PM PST</p>"},{"location":"appendices/#version-information","title":"Version Information","text":"<p>Track version details:</p> <pre><code># Agent version\njava -jar epmware-agent.jar --version\n\n# Java version\njava -version\n\n# OS version\ncat /etc/os-release  # Linux\nver  # Windows\n</code></pre>"},{"location":"appendices/#glossary","title":"Glossary","text":"<p>Common terms and acronyms:</p> Term Definition Agent EPMware on-premise component EPM Enterprise Performance Management HFM Hyperion Financial Management PCMCS Profitability and Cost Management Cloud Service REST Representational State Transfer Token Authentication credential UUID Universally Unique Identifier"},{"location":"appendices/#useful-scripts","title":"Useful Scripts","text":""},{"location":"appendices/#backup-script","title":"Backup Script","text":"<pre><code>#!/bin/bash\n# backup_agent.sh\nBACKUP_DIR=\"/backup/epmware/$(date +%Y%m%d)\"\nmkdir -p $BACKUP_DIR\ncp agent.properties $BACKUP_DIR/\ncp ew_target_service.sh $BACKUP_DIR/\ntar -czf $BACKUP_DIR.tar.gz $BACKUP_DIR\n</code></pre>"},{"location":"appendices/#health-check-script","title":"Health Check Script","text":"<pre><code>#!/bin/bash\n# health_check.sh\nif pgrep -f epmware-agent &gt; /dev/null; then\n    echo \"\u2713 Agent running\"\nelse\n    echo \"\u2717 Agent not running\"\nfi\n</code></pre>"},{"location":"appendices/#log-cleanup-script","title":"Log Cleanup Script","text":"<pre><code>#!/bin/bash\n# cleanup_logs.sh\nfind logs/ -name \"*.log\" -mtime +30 -delete\nfind logs/ -name \"*.gz\" -mtime +90 -delete\nfind temp/ -type f -mtime +7 -delete\n</code></pre>"},{"location":"appendices/#change-log-template","title":"Change Log Template","text":"<p>Document configuration changes:</p> <pre><code>## Change Log\n\n### 2023-11-15\n- **Change**: Updated polling interval to 30 seconds\n- **Reason**: Improve deployment responsiveness\n- **By**: Admin Name\n- **Tested**: Yes, in development\n\n### 2023-11-01\n- **Change**: Generated new REST token\n- **Reason**: Quarterly rotation\n- **By**: Admin Name\n- **Tested**: Yes, connection verified\n</code></pre>"},{"location":"appendices/#compliance-and-audit","title":"Compliance and Audit","text":""},{"location":"appendices/#audit-requirements","title":"Audit Requirements","text":"<p>Track for compliance:</p> <ol> <li>Access Logs - Who accessed the agent</li> <li>Configuration Changes - What was changed</li> <li>Deployment History - What was deployed</li> <li>Error Logs - What failed</li> <li>Token Usage - Authentication events</li> </ol>"},{"location":"appendices/#compliance-checklist","title":"Compliance Checklist","text":"<ul> <li>[ ] Passwords encrypted</li> <li>[ ] Tokens rotated regularly</li> <li>[ ] Audit logs retained</li> <li>[ ] Access controls implemented</li> <li>[ ] Security patches applied</li> <li>[ ] Documentation current</li> </ul> <p>Living Document</p> <p>These appendices are living documents that should be updated as your environment changes. Regular reviews ensure accuracy and usefulness.</p> <p>Quick Access</p> <p>Bookmark these appendices for quick reference during operations and troubleshooting.</p>"},{"location":"appendices/#next-steps","title":"Next Steps","text":"<p>Explore specific appendices:</p> <ol> <li>Port Requirements - Network configuration</li> <li>Security Checklist - Security hardening</li> <li>Agent Commands - Command reference</li> <li>Error Codes - Error resolution</li> </ol>"},{"location":"appendices/commands/","title":"Appendix C - Agent Commands","text":""},{"location":"appendices/commands/#appendix-c-agent-commands","title":"Appendix C - Agent Commands","text":"<p>Complete command reference for EPMware Agent operations, including installation, configuration, management, and troubleshooting commands.</p>"},{"location":"appendices/commands/#command-categories","title":"Command Categories","text":"<ul> <li> <p> Installation Commands   Commands for setting up the agent</p> </li> <li> <p> Configuration Commands   Commands for configuring the agent</p> </li> <li> <p> Operation Commands   Start, stop, and manage the agent</p> </li> <li> <p> Diagnostic Commands   Troubleshooting and testing commands</p> </li> <li> <p> Monitoring Commands   Performance and health monitoring</p> </li> </ul>"},{"location":"appendices/commands/#quick-command-reference","title":"Quick Command Reference","text":""},{"location":"appendices/commands/#essential-commands","title":"Essential Commands","text":"Command Purpose Platform <code>java -jar epmware-agent.jar --test</code> Test connection All <code>./ew_target_service.sh</code> Start agent Linux/Cygwin <code>ps aux \\| grep epmware</code> Check if running Linux <code>tail -f logs/agent.log</code> View logs All <code>pkill -f epmware-agent</code> Stop agent Linux"},{"location":"appendices/commands/#installation-commands","title":"Installation Commands","text":""},{"location":"appendices/commands/#system-preparation","title":"System Preparation","text":""},{"location":"appendices/commands/#linux","title":"Linux","text":"<pre><code># Update system\nsudo yum update -y                    # RHEL/CentOS\nsudo apt-get update &amp;&amp; sudo apt-get upgrade -y  # Ubuntu\n\n# Install Java\nsudo yum install java-1.8.0-openjdk   # RHEL/CentOS\nsudo apt-get install openjdk-8-jdk    # Ubuntu\n\n# Create user\nsudo useradd -m -s /bin/bash epmware_agent\nsudo passwd epmware_agent\n\n# Set up directory\nsudo mkdir -p /opt/epmware/agent\nsudo chown epmware_agent:epmware_agent /opt/epmware/agent\n</code></pre>"},{"location":"appendices/commands/#windows","title":"Windows","text":"<pre><code># Check Java installation\njava -version\n\n# Install Cygwin (download and run setup-x86_64.exe)\n# Then in Cygwin:\ncd ~\npwd  # Should show /home/username\n</code></pre>"},{"location":"appendices/commands/#agent-installation","title":"Agent Installation","text":"<pre><code># Extract agent files\ncd ~\nunzip ew_agent_files.zip\n\n# Set permissions (Linux)\nchmod 755 ew_target_service.sh\nchmod 600 agent.properties\nchmod 644 epmware-agent.jar\n\n# Set permissions (Cygwin)\nchmod +x ew_target_service.sh\n</code></pre>"},{"location":"appendices/commands/#configuration-commands","title":"Configuration Commands","text":""},{"location":"appendices/commands/#property-file-management","title":"Property File Management","text":"<pre><code># Edit configuration\nvi agent.properties           # Linux\nnano agent.properties         # Linux alternative\nnotepad agent.properties      # Windows\n\n# Backup configuration\ncp agent.properties agent.properties.backup.$(date +%Y%m%d)\n\n# Validate configuration syntax\ngrep -E \"^[^#].*=\" agent.properties\n\n# Check for required properties\nfor prop in ew.portal.server ew.portal.url ew.portal.token; do\n    grep \"^$prop=\" agent.properties || echo \"Missing: $prop\"\ndone\n</code></pre>"},{"location":"appendices/commands/#token-management","title":"Token Management","text":"<pre><code># Check current token\ngrep ew.portal.token agent.properties\n\n# Update token (Linux)\nsed -i 's/ew.portal.token=.*/ew.portal.token=NEW-TOKEN-HERE/' agent.properties\n\n# Update token (backup first)\ncp agent.properties agent.properties.bak\nsed -i 's/ew.portal.token=.*/ew.portal.token=NEW-TOKEN-HERE/' agent.properties\n\n# Secure token file\nchmod 600 agent.properties\n</code></pre>"},{"location":"appendices/commands/#service-script-configuration","title":"Service Script Configuration","text":"<pre><code># Update HOME directory in service script\nsed -i 's|HOME=.*|HOME=/home/epmware_agent|' ew_target_service.sh\n\n# Add Java options\ncat &gt;&gt; ew_target_service.sh &lt;&lt; 'EOF'\nJAVA_OPTS=\"-Xms1024m -Xmx2048m\"\njava $JAVA_OPTS -jar epmware-agent.jar --spring.config.name=agent\nEOF\n</code></pre>"},{"location":"appendices/commands/#operation-commands","title":"Operation Commands","text":""},{"location":"appendices/commands/#starting-the-agent","title":"Starting the Agent","text":""},{"location":"appendices/commands/#linux_1","title":"Linux","text":"<pre><code># Start in foreground (testing)\n./ew_target_service.sh\n\n# Start in background\nnohup ./ew_target_service.sh &gt; agent.out 2&gt;&amp;1 &amp;\n\n# Start with specific Java options\njava -Xmx2048m -jar epmware-agent.jar --spring.config.name=agent\n\n# Start as systemd service\nsudo systemctl start epmware-agent\n\n# Start with debug\njava -Dlogging.level.root=DEBUG -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"appendices/commands/#windows_1","title":"Windows","text":"<pre><code># Start via Task Scheduler\nStart-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n# Start via Cygwin\nC:\\cygwin64\\bin\\bash.exe -l -c \"cd ~ &amp;&amp; ./ew_target_service.sh\"\n\n# Start manually\ncd C:\\cygwin64\\home\\Administrator\njava -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"appendices/commands/#stopping-the-agent","title":"Stopping the Agent","text":""},{"location":"appendices/commands/#linux_2","title":"Linux","text":"<pre><code># Find and kill process\nps aux | grep epmware-agent\nkill -15 &lt;PID&gt;  # Graceful shutdown\nkill -9 &lt;PID&gt;   # Force kill\n\n# Kill by name\npkill -f epmware-agent\n\n# Stop systemd service\nsudo systemctl stop epmware-agent\n\n# Kill all Java processes (careful!)\nkillall java\n</code></pre>"},{"location":"appendices/commands/#windows_2","title":"Windows","text":"<pre><code># Stop scheduled task\nStop-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n# Find and stop process\nGet-Process | Where {$_.ProcessName -eq \"java\"} | Stop-Process\n\n# Force stop\nGet-Process java | Where {$_.CommandLine -like \"*epmware*\"} | Stop-Process -Force\n</code></pre>"},{"location":"appendices/commands/#restarting-the-agent","title":"Restarting the Agent","text":"<pre><code># Simple restart\npkill -f epmware-agent &amp;&amp; sleep 5 &amp;&amp; ./ew_target_service.sh &amp;\n\n# systemd restart\nsudo systemctl restart epmware-agent\n\n# Windows restart\nStop-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\nStart-Sleep -Seconds 5\nStart-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n</code></pre>"},{"location":"appendices/commands/#diagnostic-commands","title":"Diagnostic Commands","text":""},{"location":"appendices/commands/#testing-connectivity","title":"Testing Connectivity","text":"<pre><code># Test agent connection\njava -jar epmware-agent.jar --test\n\n# Test with specific config\njava -jar epmware-agent.jar --spring.config.location=./test.properties --test\n\n# Test network connectivity\nping epmware-server.com\ntelnet epmware-server.com 443\nnc -zv epmware-server.com 443\n\n# Test with curl\ncurl -I https://epmware-server.com\ncurl -H \"Authorization: Bearer TOKEN\" https://epmware-server.com/api/health\n</code></pre>"},{"location":"appendices/commands/#process-verification","title":"Process Verification","text":"<pre><code># Check if agent is running\nps aux | grep epmware-agent\npgrep -f epmware-agent\n\n# Get process details\nps -ef | grep java | grep epmware\nlsof -p $(pgrep -f epmware-agent)\n\n# Check Windows process\ntasklist | findstr java\nGet-Process java | Where {$_.CommandLine -like \"*epmware*\"}\n</code></pre>"},{"location":"appendices/commands/#log-analysis","title":"Log Analysis","text":"<pre><code># View recent logs\ntail -50 logs/agent.log\ntail -f logs/agent.log  # Follow log\n\n# Search for errors\ngrep ERROR logs/agent.log\ngrep -i error logs/agent.log | tail -20\n\n# Count errors\ngrep -c ERROR logs/agent.log\n\n# View logs by date\ngrep \"2023-11-15\" logs/agent.log\n\n# Find specific operations\ngrep -i deploy logs/agent.log\ngrep -i \"connection\" logs/agent.log\n</code></pre>"},{"location":"appendices/commands/#version-information","title":"Version Information","text":"<pre><code># Check agent version\njava -jar epmware-agent.jar --version\n\n# Check Java version\njava -version\n$JAVA_HOME/bin/java -version\n\n# Check OS version\nuname -a           # Linux\nsysteminfo         # Windows\ncat /etc/os-release  # Linux distro info\n</code></pre>"},{"location":"appendices/commands/#monitoring-commands","title":"Monitoring Commands","text":""},{"location":"appendices/commands/#resource-monitoring","title":"Resource Monitoring","text":"<pre><code># Memory usage\nfree -h                    # Linux system memory\nps aux | grep epmware | awk '{print $6}'  # Agent memory (KB)\n\n# CPU usage\ntop -p $(pgrep -f epmware)  # Interactive\nps aux | grep epmware | awk '{print $3}'  # CPU percentage\n\n# Disk usage\ndf -h /home/epmware_agent\ndu -sh logs/\ndu -sh temp/\n\n# Network connections\nnetstat -an | grep ESTABLISHED | grep -E \"443|8080\"\nss -tunap | grep epmware\n</code></pre>"},{"location":"appendices/commands/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Java heap usage\njps -v | grep epmware\njmap -heap $(pgrep -f epmware)\n\n# Thread dump\njstack $(pgrep -f epmware) &gt; thread_dump.txt\n\n# Heap dump\njmap -dump:format=b,file=heap.bin $(pgrep -f epmware)\n\n# GC statistics\njstat -gc $(pgrep -f epmware) 1000 10  # Every 1 second, 10 times\n</code></pre>"},{"location":"appendices/commands/#health-check-commands","title":"Health Check Commands","text":"<pre><code>#!/bin/bash\n# health_check.sh\n\n# Check if running\nif pgrep -f epmware-agent &gt; /dev/null; then\n    echo \"\u2713 Agent is running\"\nelse\n    echo \"\u2717 Agent is NOT running\"\n    exit 1\nfi\n\n# Check last poll\nLAST_POLL=$(tail -1 logs/agent-poll.log | awk '{print $1\" \"$2}')\necho \"Last poll: $LAST_POLL\"\n\n# Check for recent errors\nERRORS=$(tail -100 logs/agent.log | grep -c ERROR)\necho \"Recent errors: $ERRORS\"\n</code></pre>"},{"location":"appendices/commands/#maintenance-commands","title":"Maintenance Commands","text":""},{"location":"appendices/commands/#log-management","title":"Log Management","text":"<pre><code># Rotate logs manually\nmv logs/agent.log logs/agent.log.$(date +%Y%m%d)\ntouch logs/agent.log\n\n# Compress old logs\ngzip logs/*.log.2023*\n\n# Delete old logs\nfind logs/ -name \"*.log\" -mtime +30 -delete\nfind logs/ -name \"*.gz\" -mtime +90 -delete\n\n# Archive logs\ntar -czf logs_backup_$(date +%Y%m%d).tar.gz logs/\n</code></pre>"},{"location":"appendices/commands/#cleanup-commands","title":"Cleanup Commands","text":"<pre><code># Clean temporary files\nrm -rf temp/*\nfind temp/ -type f -mtime +7 -delete\n\n# Clean old backups\nfind . -name \"*.backup.*\" -mtime +30 -delete\n\n# Remove PID files\nrm -f *.pid\nrm -f *.lock\n</code></pre>"},{"location":"appendices/commands/#backup-commands","title":"Backup Commands","text":"<pre><code># Backup configuration\ncp agent.properties backups/agent.properties.$(date +%Y%m%d_%H%M%S)\n\n# Full backup\ntar -czf epmware_backup_$(date +%Y%m%d).tar.gz \\\n    agent.properties ew_target_service.sh logs/\n\n# Backup with encryption\ntar -czf - agent.properties | \\\n    openssl enc -e -aes256 -out backup.tar.gz.enc\n</code></pre>"},{"location":"appendices/commands/#security-commands","title":"Security Commands","text":""},{"location":"appendices/commands/#permission-management","title":"Permission Management","text":"<pre><code># Set secure permissions (Linux)\nchmod 600 agent.properties\nchmod 700 ew_target_service.sh\nchmod 755 logs/\nchown -R epmware_agent:epmware_agent /home/epmware_agent\n\n# Check permissions\nls -la agent.properties\nfind . -type f -perm 777  # Find world-writable files\n</code></pre>"},{"location":"appendices/commands/#security-scanning","title":"Security Scanning","text":"<pre><code># Check for passwords in files\ngrep -r \"password\\|pwd\" . --exclude-dir=logs\n\n# Check open ports\nnetstat -tulpn | grep LISTEN\nlsof -i -P -n | grep LISTEN\n\n# Check running processes\nps aux | grep epmware\n\n# Audit file access\nauditctl -w /home/epmware_agent/agent.properties -p rwa\n</code></pre>"},{"location":"appendices/commands/#application-specific-commands","title":"Application-Specific Commands","text":""},{"location":"appendices/commands/#hfm-commands","title":"HFM Commands","text":"<pre><code># Test HFM connection\n$HFM_HOME/bin/LoadMetadata.bat -test -app:APPNAME -user:USER\n\n# Copy registry properties\ncp $MIDDLEWARE/user_projects/config/foundation/11.1.2.0/reg.properties \\\n   $MIDDLEWARE/user_projects/epmsystem1/config/foundation/11.1.2.0/\n</code></pre>"},{"location":"appendices/commands/#planning-commands","title":"Planning Commands","text":"<pre><code># Generate encrypted password\ncd $PLANNING_HOME\n./PasswordEncryption.sh password_file.txt\n\n# Test Planning connection\n./OutlineLoad.sh -test /A:APPNAME /U:USER\n</code></pre>"},{"location":"appendices/commands/#cloud-epm-commands","title":"Cloud EPM Commands","text":"<pre><code># EPM Automate login\nepmautomate login username password URL\n\n# List files\nepmautomate listfiles\n\n# Test deployment\nepmautomate uploadfile test.zip\nepmautomate importmetadata test.zip\n\n# Logout\nepmautomate logout\n</code></pre>"},{"location":"appendices/commands/#troubleshooting-commands","title":"Troubleshooting Commands","text":""},{"location":"appendices/commands/#network-diagnostics","title":"Network Diagnostics","text":"<pre><code># DNS resolution\nnslookup epmware-server.com\ndig epmware-server.com\n\n# Route tracing\ntraceroute epmware-server.com  # Linux\ntracert epmware-server.com      # Windows\n\n# Port testing\ntelnet server.com 443\nnc -zv server.com 443\n\n# Firewall check\niptables -L -n -v              # Linux\nnetsh advfirewall show all     # Windows\n</code></pre>"},{"location":"appendices/commands/#java-troubleshooting","title":"Java Troubleshooting","text":"<pre><code># Check Java installation\nwhich java\nwhereis java\njava -version\n\n# Check JAVA_HOME\necho $JAVA_HOME\nls -la $JAVA_HOME/bin/java\n\n# Test Java execution\njava -cp . -version\n\n# Check Java process limits\nulimit -a  # All limits\nulimit -n  # File descriptors\n</code></pre>"},{"location":"appendices/commands/#scripting-examples","title":"Scripting Examples","text":""},{"location":"appendices/commands/#complete-management-script","title":"Complete Management Script","text":"<pre><code>#!/bin/bash\n# agent_manager.sh - Complete agent management\n\ncase \"$1\" in\n    start)\n        echo \"Starting EPMware Agent...\"\n        nohup ./ew_target_service.sh &gt; logs/startup.log 2&gt;&amp;1 &amp;\n        echo $! &gt; agent.pid\n        echo \"Started with PID: $(cat agent.pid)\"\n        ;;\n\n    stop)\n        echo \"Stopping EPMware Agent...\"\n        if [ -f agent.pid ]; then\n            kill $(cat agent.pid)\n            rm agent.pid\n            echo \"Agent stopped\"\n        else\n            echo \"No PID file found\"\n        fi\n        ;;\n\n    restart)\n        $0 stop\n        sleep 5\n        $0 start\n        ;;\n\n    status)\n        if [ -f agent.pid ] &amp;&amp; ps -p $(cat agent.pid) &gt; /dev/null; then\n            echo \"Agent is running (PID: $(cat agent.pid))\"\n        else\n            echo \"Agent is not running\"\n        fi\n        ;;\n\n    logs)\n        tail -f logs/agent.log\n        ;;\n\n    test)\n        java -jar epmware-agent.jar --test\n        ;;\n\n    *)\n        echo \"Usage: $0 {start|stop|restart|status|logs|test}\"\n        exit 1\n        ;;\nesac\n</code></pre>"},{"location":"appendices/commands/#monitoring-script","title":"Monitoring Script","text":"<pre><code>#!/bin/bash\n# monitor.sh - Monitor agent health\n\nwhile true; do\n    # Check process\n    if ! pgrep -f epmware-agent &gt; /dev/null; then\n        echo \"[$(date)] Agent not running - restarting...\"\n        ./ew_target_service.sh &amp;\n    fi\n\n    # Check logs for errors\n    if tail -100 logs/agent.log | grep -q \"FATAL\"; then\n        echo \"[$(date)] Fatal error detected!\"\n        # Send alert\n    fi\n\n    sleep 60\ndone\n</code></pre>"},{"location":"appendices/commands/#command-aliases","title":"Command Aliases","text":""},{"location":"appendices/commands/#useful-bash-aliases","title":"Useful Bash Aliases","text":"<pre><code># Add to ~/.bashrc or ~/.bash_profile\n\n# Agent commands\nalias agstart='cd /home/epmware_agent &amp;&amp; ./ew_target_service.sh &amp;'\nalias agstop='pkill -f epmware-agent'\nalias agstatus='ps aux | grep epmware-agent'\nalias aglogs='tail -f /home/epmware_agent/logs/agent.log'\nalias agtest='java -jar /home/epmware_agent/epmware-agent.jar --test'\n\n# Quick navigation\nalias aghome='cd /home/epmware_agent'\nalias aglogs='cd /home/epmware_agent/logs'\n\n# Monitoring\nalias agmon='watch -n 5 \"ps aux | grep epmware\"'\nalias agerrors='grep ERROR /home/epmware_agent/logs/agent.log | tail -20'\n</code></pre> <p>Command Documentation</p> <p>Always document custom commands and scripts in your operational runbooks. Include examples and expected outputs for training purposes.</p> <p>Destructive Commands</p> <p>Be extremely careful with commands like <code>rm -rf</code>, <code>kill -9</code>, and <code>chmod 777</code>. Always verify the target before executing destructive commands.</p>"},{"location":"appendices/commands/#next-steps","title":"Next Steps","text":"<ul> <li>Port Requirements - Network port reference</li> <li>Security Checklist - Security configuration</li> <li>Error Codes - Error resolution</li> <li>Return to Appendices - Main appendices page</li> </ul>"},{"location":"appendices/error-codes/","title":"Appendix D - Error Codes","text":""},{"location":"appendices/error-codes/#appendix-d-error-codes-reference","title":"Appendix D - Error Codes Reference","text":"<p>Comprehensive reference for EPMware Agent error codes, their meanings, and resolution steps.</p>"},{"location":"appendices/error-codes/#error-code-format","title":"Error Code Format","text":"<p>EPMware Agent errors follow this format: </p><pre><code>[TIMESTAMP] [LEVEL] [MODULE] Error Code: [CODE] - [Description]\nExample: 2023-11-15 10:30:45 ERROR CONNECTION Error Code: CONN-001 - Connection refused\n</code></pre><p></p>"},{"location":"appendices/error-codes/#error-categories","title":"Error Categories","text":"Code Range Category Description CONN-xxx Connection Network and connectivity errors AUTH-xxx Authentication Authentication and authorization CONF-xxx Configuration Configuration file errors DEPLOY-xxx Deployment Deployment operation errors APP-xxx Application Target application errors SYS-xxx System System and resource errors IO-xxx Input/Output File and I/O operations SEC-xxx Security Security-related errors"},{"location":"appendices/error-codes/#connection-errors-conn-xxx","title":"Connection Errors (CONN-xxx)","text":""},{"location":"appendices/error-codes/#conn-001-connection-refused","title":"CONN-001: Connection Refused","text":"<p>Error Message: </p><pre><code>Error Code: CONN-001 - Connection refused: connect\njava.net.ConnectException: Connection refused\n</code></pre><p></p> <p>Cause: Server is not reachable or not listening on the specified port.</p> <p>Resolution: </p><pre><code># Check server is running\nping epmware-server.com\n\n# Test port connectivity\ntelnet epmware-server.com 443\n\n# Verify URL in configuration\ngrep ew.portal.url agent.properties\n</code></pre><p></p>"},{"location":"appendices/error-codes/#conn-002-connection-timeout","title":"CONN-002: Connection Timeout","text":"<p>Error Message: </p><pre><code>Error Code: CONN-002 - Connection timed out after 30000ms\njava.net.SocketTimeoutException: Read timed out\n</code></pre><p></p> <p>Cause: Network latency or firewall blocking connection.</p> <p>Resolution: </p><pre><code># Increase timeout\necho \"agent.connection.timeout=60000\" &gt;&gt; agent.properties\n\n# Check firewall\nsudo iptables -L -n | grep 443\n\n# Test with curl\ncurl --connect-timeout 60 https://epmware-server.com\n</code></pre><p></p>"},{"location":"appendices/error-codes/#conn-003-unknown-host","title":"CONN-003: Unknown Host","text":"<p>Error Message: </p><pre><code>Error Code: CONN-003 - Unknown host: epmware-server.com\njava.net.UnknownHostException: epmware-server.com\n</code></pre><p></p> <p>Cause: DNS resolution failure.</p> <p>Resolution: </p><pre><code># Check DNS\nnslookup epmware-server.com\n\n# Add to hosts file temporarily\necho \"192.168.1.100 epmware-server.com\" &gt;&gt; /etc/hosts\n\n# Use IP instead of hostname\nsed -i 's/epmware-server.com/192.168.1.100/' agent.properties\n</code></pre><p></p>"},{"location":"appendices/error-codes/#conn-004-ssl-handshake-failed","title":"CONN-004: SSL Handshake Failed","text":"<p>Error Message: </p><pre><code>Error Code: CONN-004 - SSL handshake failed\njavax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException\n</code></pre><p></p> <p>Cause: Certificate validation failure.</p> <p>Resolution: </p><pre><code># Import certificate\nkeytool -import -trustcacerts -keystore $JAVA_HOME/lib/security/cacerts \\\n        -alias epmware -file epmware.crt -storepass changeit\n\n# Or disable validation (testing only)\njava -Dcom.sun.net.ssl.checkRevocation=false -jar epmware-agent.jar\n</code></pre><p></p>"},{"location":"appendices/error-codes/#conn-005-proxy-authentication-required","title":"CONN-005: Proxy Authentication Required","text":"<p>Error Message: </p><pre><code>Error Code: CONN-005 - Proxy authentication required\nHTTP/1.1 407 Proxy Authentication Required\n</code></pre><p></p> <p>Cause: Proxy requires authentication.</p> <p>Resolution: </p><pre><code># Add to agent.properties\nhttp.proxyHost=proxy.company.com\nhttp.proxyPort=8080\nhttp.proxyUser=username\nhttp.proxyPassword=password\n</code></pre><p></p>"},{"location":"appendices/error-codes/#authentication-errors-auth-xxx","title":"Authentication Errors (AUTH-xxx)","text":""},{"location":"appendices/error-codes/#auth-001-invalid-token","title":"AUTH-001: Invalid Token","text":"<p>Error Message: </p><pre><code>Error Code: AUTH-001 - Invalid authentication token\nHTTP 401 Unauthorized\n</code></pre><p></p> <p>Cause: Token is invalid, expired, or malformed.</p> <p>Resolution: 1. Generate new token in EPMware 2. Update agent.properties: </p><pre><code>sed -i 's/ew.portal.token=.*/ew.portal.token=NEW-TOKEN/' agent.properties\n</code></pre> 3. Restart agent<p></p>"},{"location":"appendices/error-codes/#auth-002-token-expired","title":"AUTH-002: Token Expired","text":"<p>Error Message: </p><pre><code>Error Code: AUTH-002 - Authentication token has expired\n</code></pre><p></p> <p>Cause: Token has exceeded its validity period.</p> <p>Resolution: 1. Log into EPMware 2. Navigate to Users \u2192 Generate Token 3. Update configuration with new token 4. Implement token rotation schedule</p>"},{"location":"appendices/error-codes/#auth-003-insufficient-permissions","title":"AUTH-003: Insufficient Permissions","text":"<p>Error Message: </p><pre><code>Error Code: AUTH-003 - User does not have required permissions\nHTTP 403 Forbidden\n</code></pre><p></p> <p>Cause: User lacks necessary permissions for operation.</p> <p>Resolution: </p><pre><code># Verify user permissions in EPMware\n# Grant required roles:\n# - Deployment Execute\n# - API Access\n# - Application Access\n</code></pre><p></p>"},{"location":"appendices/error-codes/#auth-004-account-locked","title":"AUTH-004: Account Locked","text":"<p>Error Message: </p><pre><code>Error Code: AUTH-004 - User account is locked\n</code></pre><p></p> <p>Cause: Account locked due to failed attempts or security policy.</p> <p>Resolution: 1. Unlock account in EPMware admin 2. Reset password if required 3. Generate new token</p>"},{"location":"appendices/error-codes/#configuration-errors-conf-xxx","title":"Configuration Errors (CONF-xxx)","text":""},{"location":"appendices/error-codes/#conf-001-missing-configuration-file","title":"CONF-001: Missing Configuration File","text":"<p>Error Message: </p><pre><code>Error Code: CONF-001 - Configuration file not found: agent.properties\njava.io.FileNotFoundException: agent.properties\n</code></pre><p></p> <p>Cause: agent.properties file is missing.</p> <p>Resolution: </p><pre><code># Create from template\ncp agent.properties.template agent.properties\n\n# Or create new\ncat &gt; agent.properties &lt;&lt; EOF\new.portal.server=servername\new.portal.url=https://url\new.portal.token=token\nagent.interval.millisecond=30000\nagent.root.dir=/home/user\nEOF\n</code></pre><p></p>"},{"location":"appendices/error-codes/#conf-002-invalid-property-format","title":"CONF-002: Invalid Property Format","text":"<p>Error Message: </p><pre><code>Error Code: CONF-002 - Invalid property format in configuration\n</code></pre><p></p> <p>Cause: Syntax error in properties file.</p> <p>Resolution: </p><pre><code># Check syntax\ngrep -E \"^[^#].*=\" agent.properties\n\n# Look for common issues:\n# - Missing equals sign\n# - Spaces in property names\n# - Unclosed quotes\n</code></pre><p></p>"},{"location":"appendices/error-codes/#conf-003-missing-required-property","title":"CONF-003: Missing Required Property","text":"<p>Error Message: </p><pre><code>Error Code: CONF-003 - Required property missing: ew.portal.url\n</code></pre><p></p> <p>Cause: Essential configuration property not set.</p> <p>Resolution: </p><pre><code># Check all required properties\nfor prop in ew.portal.server ew.portal.url ew.portal.token; do\n    grep \"^$prop=\" agent.properties || echo \"Add: $prop=value\"\ndone\n</code></pre><p></p>"},{"location":"appendices/error-codes/#conf-004-invalid-path-format","title":"CONF-004: Invalid Path Format","text":"<p>Error Message: </p><pre><code>Error Code: CONF-004 - Invalid path format: C:cygwin64homeuser\n</code></pre><p></p> <p>Cause: Incorrect path separator or format.</p> <p>Resolution: </p><pre><code># Windows - use double backslashes\nagent.root.dir=C:\\\\\\\\cygwin64\\\\\\\\home\\\\\\\\user\n\n# Or forward slashes\nagent.root.dir=C:/cygwin64/home/user\n\n# Linux\nagent.root.dir=/home/user\n</code></pre><p></p>"},{"location":"appendices/error-codes/#deployment-errors-deploy-xxx","title":"Deployment Errors (DEPLOY-xxx)","text":""},{"location":"appendices/error-codes/#deploy-001-deployment-failed","title":"DEPLOY-001: Deployment Failed","text":"<p>Error Message: </p><pre><code>Error Code: DEPLOY-001 - Deployment failed for application HFM_PROD\n</code></pre><p></p> <p>Cause: General deployment failure.</p> <p>Resolution: </p><pre><code># Check application status\n# Verify credentials\n# Review deployment logs\ntail -100 logs/agent.log | grep -i deploy\n\n# Test connection to application\njava -jar epmware-agent.jar --test-app HFM_PROD\n</code></pre><p></p>"},{"location":"appendices/error-codes/#deploy-002-target-application-unavailable","title":"DEPLOY-002: Target Application Unavailable","text":"<p>Error Message: </p><pre><code>Error Code: DEPLOY-002 - Target application HFM_PROD is not available\n</code></pre><p></p> <p>Cause: Application is down or not accessible.</p> <p>Resolution: </p><pre><code># Check application status\nsystemctl status hfm  # Linux service\n\n# Test application connection\ntelnet hfm-server 19000\n\n# Verify application URL/credentials\n</code></pre><p></p>"},{"location":"appendices/error-codes/#deploy-003-invalid-metadata-format","title":"DEPLOY-003: Invalid Metadata Format","text":"<p>Error Message: </p><pre><code>Error Code: DEPLOY-003 - Invalid metadata format in deployment package\n</code></pre><p></p> <p>Cause: Metadata file is corrupted or wrong format.</p> <p>Resolution: 1. Validate metadata file format 2. Check for XML/CSV errors 3. Verify character encoding (UTF-8) 4. Regenerate metadata package</p>"},{"location":"appendices/error-codes/#deploy-004-deployment-timeout","title":"DEPLOY-004: Deployment Timeout","text":"<p>Error Message: </p><pre><code>Error Code: DEPLOY-004 - Deployment operation timed out after 3600 seconds\n</code></pre><p></p> <p>Cause: Deployment taking longer than timeout limit.</p> <p>Resolution: </p><pre><code># Increase timeout in agent.properties\ndeployment.timeout=7200000  # 2 hours\n\n# Or for specific application\nhfm.deployment.timeout=7200000\n</code></pre><p></p>"},{"location":"appendices/error-codes/#application-errors-app-xxx","title":"Application Errors (APP-xxx)","text":""},{"location":"appendices/error-codes/#app-001-hfm-registry-not-found","title":"APP-001: HFM Registry Not Found","text":"<p>Error Message: </p><pre><code>Error Code: APP-001 - HFM registry properties file not found\n</code></pre><p></p> <p>Cause: reg.properties not in correct location.</p> <p>Resolution: </p><pre><code># Copy registry file\ncp $MIDDLEWARE/user_projects/config/foundation/11.1.2.0/reg.properties \\\n   $MIDDLEWARE/user_projects/epmsystem1/config/foundation/11.1.2.0/\n</code></pre><p></p>"},{"location":"appendices/error-codes/#app-002-planning-password-file-error","title":"APP-002: Planning Password File Error","text":"<p>Error Message: </p><pre><code>Error Code: APP-002 - Cannot read Planning password file\n</code></pre><p></p> <p>Cause: Password file missing or corrupted.</p> <p>Resolution: </p><pre><code># Generate new password file\ncd $PLANNING_HOME\n./PasswordEncryption.sh password_file.txt\n\n# Update EPMware configuration with file path\n</code></pre><p></p>"},{"location":"appendices/error-codes/#app-003-epm-automate-not-found","title":"APP-003: EPM Automate Not Found","text":"<p>Error Message: </p><pre><code>Error Code: APP-003 - EPM Automate utility not found\n</code></pre><p></p> <p>Cause: EPM Automate not installed for cloud operations.</p> <p>Resolution: </p><pre><code># Install EPM Automate\ntar xf EPMAutomate.tar\nexport PATH=$PATH:~/epmautomate/bin\n\n# Test\nepmautomate --version\n</code></pre><p></p>"},{"location":"appendices/error-codes/#app-004-application-login-failed","title":"APP-004: Application Login Failed","text":"<p>Error Message: </p><pre><code>Error Code: APP-004 - Login failed for application user\n</code></pre><p></p> <p>Cause: Invalid application credentials.</p> <p>Resolution: 1. Verify username and password 2. Check account isn't locked 3. Verify user has required application roles 4. Test login manually</p>"},{"location":"appendices/error-codes/#system-errors-sys-xxx","title":"System Errors (SYS-xxx)","text":""},{"location":"appendices/error-codes/#sys-001-out-of-memory","title":"SYS-001: Out of Memory","text":"<p>Error Message: </p><pre><code>Error Code: SYS-001 - Out of memory error\njava.lang.OutOfMemoryError: Java heap space\n</code></pre><p></p> <p>Cause: Insufficient heap memory allocated.</p> <p>Resolution: </p><pre><code># Increase heap size in ew_target_service.sh\nJAVA_OPTS=\"-Xms1024m -Xmx2048m\"\n\n# Or set in environment\nexport _JAVA_OPTIONS=\"-Xmx2g\"\n</code></pre><p></p>"},{"location":"appendices/error-codes/#sys-002-disk-space-exhausted","title":"SYS-002: Disk Space Exhausted","text":"<p>Error Message: </p><pre><code>Error Code: SYS-002 - No space left on device\njava.io.IOException: No space left on device\n</code></pre><p></p> <p>Cause: Disk is full.</p> <p>Resolution: </p><pre><code># Check disk usage\ndf -h\n\n# Clean up logs\nfind logs/ -name \"*.log\" -mtime +30 -delete\nfind temp/ -type f -delete\n\n# Archive and compress old files\ngzip logs/*.log.old\n</code></pre><p></p>"},{"location":"appendices/error-codes/#sys-003-too-many-open-files","title":"SYS-003: Too Many Open Files","text":"<p>Error Message: </p><pre><code>Error Code: SYS-003 - Too many open files\njava.io.IOException: Too many open files\n</code></pre><p></p> <p>Cause: File descriptor limit reached.</p> <p>Resolution: </p><pre><code># Increase limit (Linux)\nulimit -n 65536\n\n# Permanent change\necho \"* soft nofile 65536\" &gt;&gt; /etc/security/limits.conf\necho \"* hard nofile 65536\" &gt;&gt; /etc/security/limits.conf\n</code></pre><p></p>"},{"location":"appendices/error-codes/#sys-004-process-already-running","title":"SYS-004: Process Already Running","text":"<p>Error Message: </p><pre><code>Error Code: SYS-004 - Agent process already running with PID: 12345\n</code></pre><p></p> <p>Cause: Another agent instance is running.</p> <p>Resolution: </p><pre><code># Check running processes\nps aux | grep epmware-agent\n\n# Kill existing process\nkill -15 &lt;PID&gt;\n\n# Remove PID file\nrm agent.pid\n</code></pre><p></p>"},{"location":"appendices/error-codes/#io-errors-io-xxx","title":"I/O Errors (IO-xxx)","text":""},{"location":"appendices/error-codes/#io-001-file-not-found","title":"IO-001: File Not Found","text":"<p>Error Message: </p><pre><code>Error Code: IO-001 - File not found: /path/to/file\njava.io.FileNotFoundException\n</code></pre><p></p> <p>Cause: Required file is missing.</p> <p>Resolution: </p><pre><code># Check file exists\nls -la /path/to/file\n\n# Check permissions\n# Create if missing\ntouch /path/to/file\n</code></pre><p></p>"},{"location":"appendices/error-codes/#io-002-permission-denied","title":"IO-002: Permission Denied","text":"<p>Error Message: </p><pre><code>Error Code: IO-002 - Permission denied: /path/to/file\njava.io.IOException: Permission denied\n</code></pre><p></p> <p>Cause: Insufficient file permissions.</p> <p>Resolution: </p><pre><code># Fix permissions\nchmod 644 /path/to/file\nchown epmware_agent:epmware_agent /path/to/file\n\n# Check directory permissions\nchmod 755 /path/to/\n</code></pre><p></p>"},{"location":"appendices/error-codes/#io-003-file-lock-error","title":"IO-003: File Lock Error","text":"<p>Error Message: </p><pre><code>Error Code: IO-003 - File is locked by another process\n</code></pre><p></p> <p>Cause: File is being used by another process.</p> <p>Resolution: </p><pre><code># Find process using file\nlsof /path/to/file\n\n# Remove lock file if stale\nrm /path/to/file.lock\n</code></pre><p></p>"},{"location":"appendices/error-codes/#security-errors-sec-xxx","title":"Security Errors (SEC-xxx)","text":""},{"location":"appendices/error-codes/#sec-001-certificate-expired","title":"SEC-001: Certificate Expired","text":"<p>Error Message: </p><pre><code>Error Code: SEC-001 - SSL certificate has expired\n</code></pre><p></p> <p>Cause: Server certificate is expired.</p> <p>Resolution: 1. Request certificate renewal 2. Import new certificate: </p><pre><code>keytool -import -alias epmware -file new-cert.crt \\\n        -keystore $JAVA_HOME/lib/security/cacerts\n</code></pre><p></p>"},{"location":"appendices/error-codes/#sec-002-cipher-suite-mismatch","title":"SEC-002: Cipher Suite Mismatch","text":"<p>Error Message: </p><pre><code>Error Code: SEC-002 - No cipher suites in common\n</code></pre><p></p> <p>Cause: TLS cipher suite incompatibility.</p> <p>Resolution: </p><pre><code># Enable additional ciphers\nhttps.cipherSuites=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n</code></pre><p></p>"},{"location":"appendices/error-codes/#sec-003-tls-version-mismatch","title":"SEC-003: TLS Version Mismatch","text":"<p>Error Message: </p><pre><code>Error Code: SEC-003 - TLS version not supported\n</code></pre><p></p> <p>Cause: TLS version incompatibility.</p> <p>Resolution: </p><pre><code># Enable TLS 1.2 and 1.3\nJAVA_OPTS=\"-Dhttps.protocols=TLSv1.2,TLSv1.3\"\n</code></pre><p></p>"},{"location":"appendices/error-codes/#error-resolution-scripts","title":"Error Resolution Scripts","text":""},{"location":"appendices/error-codes/#comprehensive-error-checker","title":"Comprehensive Error Checker","text":"<pre><code>#!/bin/bash\n# error_checker.sh - Diagnose common errors\n\necho \"=== EPMware Agent Error Diagnosis ===\"\n\n# Check configuration\nif [ ! -f agent.properties ]; then\n    echo \"ERROR: CONF-001 - agent.properties not found\"\nfi\n\n# Check Java\nif ! command -v java &amp;&gt; /dev/null; then\n    echo \"ERROR: SYS-005 - Java not found\"\nfi\n\n# Check connectivity\nif ! ping -c 1 epmware-server.com &amp;&gt; /dev/null; then\n    echo \"ERROR: CONN-001 - Cannot reach server\"\nfi\n\n# Check disk space\nDISK_USAGE=$(df . | tail -1 | awk '{print $5}' | sed 's/%//')\nif [ $DISK_USAGE -gt 90 ]; then\n    echo \"WARNING: SYS-002 - Disk usage at ${DISK_USAGE}%\"\nfi\n\n# Check for errors in logs\nif [ -f logs/agent.log ]; then\n    echo \"=== Recent Errors ===\"\n    grep \"Error Code:\" logs/agent.log | tail -10\nfi\n</code></pre>"},{"location":"appendices/error-codes/#error-recovery-script","title":"Error Recovery Script","text":"<pre><code>#!/bin/bash\n# recover_from_error.sh - Automated error recovery\n\nERROR_CODE=$1\n\ncase $ERROR_CODE in\n    CONN-001)\n        echo \"Attempting to recover from connection error...\"\n        # Restart network\n        sudo systemctl restart network\n        ;;\n\n    AUTH-001)\n        echo \"Token error - please regenerate token\"\n        echo \"Update agent.properties with new token\"\n        ;;\n\n    SYS-001)\n        echo \"Memory error - restarting with more heap\"\n        pkill -f epmware-agent\n        java -Xmx4096m -jar epmware-agent.jar &amp;\n        ;;\n\n    SYS-002)\n        echo \"Disk space error - cleaning up...\"\n        find logs/ -name \"*.log\" -mtime +7 -delete\n        find temp/ -type f -delete\n        ;;\n\n    *)\n        echo \"Unknown error code: $ERROR_CODE\"\n        echo \"Check documentation for resolution\"\n        ;;\nesac\n</code></pre>"},{"location":"appendices/error-codes/#error-monitoring","title":"Error Monitoring","text":""},{"location":"appendices/error-codes/#error-alert-configuration","title":"Error Alert Configuration","text":"<pre><code>#!/bin/bash\n# error_monitor.sh - Monitor and alert on errors\n\nLOG_FILE=\"logs/agent.log\"\nERROR_THRESHOLD=5\nALERT_EMAIL=\"admin@company.com\"\n\n# Count recent errors (last hour)\nERROR_COUNT=$(find $LOG_FILE -mmin -60 -exec grep -c \"Error Code:\" {} \\;)\n\nif [ $ERROR_COUNT -gt $ERROR_THRESHOLD ]; then\n    # Send alert\n    echo \"High error rate detected: $ERROR_COUNT errors in last hour\" | \\\n        mail -s \"EPMware Agent Error Alert\" $ALERT_EMAIL\n\n    # Extract error details\n    grep \"Error Code:\" $LOG_FILE | tail -20 | \\\n        mail -s \"EPMware Agent Error Details\" $ALERT_EMAIL\nfi\n</code></pre>"},{"location":"appendices/error-codes/#error-prevention-best-practices","title":"Error Prevention Best Practices","text":""},{"location":"appendices/error-codes/#proactive-error-prevention","title":"Proactive Error Prevention","text":"<ol> <li>Regular Health Checks</li> <li>Monitor logs continuously</li> <li>Check resource usage</li> <li> <p>Verify connectivity regularly</p> </li> <li> <p>Configuration Validation</p> </li> <li>Test changes before production</li> <li>Validate properties syntax</li> <li> <p>Backup configurations</p> </li> <li> <p>Resource Management</p> </li> <li>Monitor disk space</li> <li>Set appropriate heap size</li> <li> <p>Implement log rotation</p> </li> <li> <p>Security Maintenance</p> </li> <li>Keep certificates updated</li> <li>Rotate tokens regularly</li> <li>Apply security patches</li> </ol>"},{"location":"appendices/error-codes/#error-documentation-template","title":"Error Documentation Template","text":"<pre><code>## Error Report\n\n**Error Code:** CONN-001\n**Date/Time:** 2023-11-15 10:30:45\n**Severity:** HIGH\n**Environment:** Production\n\n**Error Message:**\nConnection refused: connect\n\n**Root Cause:**\nFirewall rule changed blocking port 443\n\n**Resolution:**\n1. Identified firewall change\n2. Updated firewall rule\n3. Tested connectivity\n4. Restarted agent\n\n**Prevention:**\n- Add firewall rules to change control\n- Implement connection monitoring\n- Document network requirements\n\n**Time to Resolution:** 45 minutes\n</code></pre> <p>Error Pattern Recognition</p> <p>Keep a log of recurring errors and their solutions. This helps identify systemic issues and speeds up resolution time.</p> <p>Critical Errors</p> <p>Errors marked as FATAL or CRITICAL should trigger immediate alerts and may require emergency response procedures.</p>"},{"location":"appendices/error-codes/#next-steps","title":"Next Steps","text":"<ul> <li>Port Requirements - Network configuration</li> <li>Security Checklist - Security setup</li> <li>Agent Commands - Command reference</li> <li>Return to Appendices - Main appendices page</li> </ul>"},{"location":"appendices/ports/","title":"Appendix A - Port Requirements","text":""},{"location":"appendices/ports/#appendix-a-port-requirements","title":"Appendix A - Port Requirements","text":"<p>This appendix provides a comprehensive reference for all network ports used by the EPMware Agent and integrated applications.</p>"},{"location":"appendices/ports/#port-overview-diagram","title":"Port Overview Diagram","text":"<pre><code>graph LR\n    subgraph \"EPMware Agent Server\"\n        A[EPMware Agent&lt;br/&gt;Java Process]\n    end\n\n    subgraph \"EPMware Server\"\n        B[EPMware Cloud&lt;br/&gt;Port 443]\n        C[EPMware On-Premise&lt;br/&gt;Port 8080]\n    end\n\n    subgraph \"Target Applications\"\n        D[HFM&lt;br/&gt;Port 19000]\n        E[Planning&lt;br/&gt;Port 19000]\n        F[Essbase&lt;br/&gt;Port 1423]\n        G[Cloud EPM&lt;br/&gt;Port 443]\n    end\n\n    A --&gt;|HTTPS| B\n    A --&gt;|HTTP| C\n    A --&gt;|TCP| D\n    A --&gt;|TCP| E\n    A --&gt;|TCP| F\n    A --&gt;|HTTPS| G\n</code></pre>"},{"location":"appendices/ports/#standard-port-requirements","title":"Standard Port Requirements","text":""},{"location":"appendices/ports/#epmware-communication-ports","title":"EPMware Communication Ports","text":"Port Protocol Direction Service Description Required 443 HTTPS/TCP Outbound EPMware Cloud Secure communication to cloud instance Yes (Cloud) 8080 HTTP/TCP Outbound EPMware On-Premise Default on-premise port Yes (On-Premise) 8443 HTTPS/TCP Outbound EPMware On-Premise SSL Secure on-premise alternative Optional"},{"location":"appendices/ports/#application-specific-ports","title":"Application-Specific Ports","text":""},{"location":"appendices/ports/#hyperion-hfm","title":"Hyperion HFM","text":"Port Protocol Direction Description Notes 19000 TCP Outbound HFM Application Server Default HFM port 80 HTTP Outbound HFM Web Server Web interface 443 HTTPS Outbound HFM Web Server SSL Secure web interface 1433 TCP Outbound SQL Server HFM database (if SQL Server) 1521 TCP Outbound Oracle DB HFM database (if Oracle)"},{"location":"appendices/ports/#hyperion-planning","title":"Hyperion Planning","text":"Port Protocol Direction Description Notes 19000 TCP Outbound Planning RMI Registry Default Planning port 8300 HTTP Outbound Planning Web Server Web application 8343 HTTPS Outbound Planning Web Server SSL Secure web application 1423 TCP Outbound Essbase Server For Planning/Essbase integration"},{"location":"appendices/ports/#essbase","title":"Essbase","text":"Port Protocol Direction Description Notes 1423 TCP Outbound Essbase Agent Primary Essbase port 32768-33768 TCP Outbound Essbase Apps Application port range 6711 TCP Outbound Essbase Provider Services APS communication 9443 HTTPS Outbound Essbase Web Web interface"},{"location":"appendices/ports/#oracle-cloud-epm","title":"Oracle Cloud EPM","text":"Port Protocol Direction Description Notes 443 HTTPS Outbound Cloud Services All cloud communication 22 SSH Outbound SFTP File transfer (optional)"},{"location":"appendices/ports/#infrastructure-ports","title":"Infrastructure Ports","text":"Port Protocol Direction Service Description 53 UDP/TCP Outbound DNS Domain name resolution 123 UDP Outbound NTP Time synchronization 389 TCP Outbound LDAP Directory services 636 TCP Outbound LDAPS Secure LDAP 3128 TCP Outbound Proxy Corporate proxy (common) 8080 TCP Outbound Proxy Alternative proxy port"},{"location":"appendices/ports/#port-configuration-by-environment","title":"Port Configuration by Environment","text":""},{"location":"appendices/ports/#development-environment","title":"Development Environment","text":"<pre><code># Minimal port requirements for development\nOutbound Ports Required:\n  - 443  (EPMware Cloud)\n  - 8080 (EPMware On-Premise)\n  - Target application ports as needed\n</code></pre>"},{"location":"appendices/ports/#production-environment","title":"Production Environment","text":"<pre><code># Full port requirements for production\nOutbound Ports Required:\n  - 443  (HTTPS - EPMware and Cloud EPM)\n  - 19000 (HFM/Planning)\n  - 1423 (Essbase)\n  - 53   (DNS)\n  - 123  (NTP)\n\nOptional Ports:\n  - 389/636 (LDAP/LDAPS)\n  - 3128/8080 (Proxy)\n  - Database ports as required\n</code></pre>"},{"location":"appendices/ports/#firewall-configuration-examples","title":"Firewall Configuration Examples","text":""},{"location":"appendices/ports/#linux-iptables","title":"Linux iptables","text":"<pre><code>#!/bin/bash\n# iptables configuration for EPMware Agent\n\n# EPMware Cloud\niptables -A OUTPUT -p tcp --dport 443 -d epmware-cloud.com -j ACCEPT\n\n# HFM\niptables -A OUTPUT -p tcp --dport 19000 -d hfm-server.local -j ACCEPT\n\n# Planning\niptables -A OUTPUT -p tcp --dport 19000 -d planning-server.local -j ACCEPT\n\n# Essbase\niptables -A OUTPUT -p tcp --dport 1423 -d essbase-server.local -j ACCEPT\n\n# DNS\niptables -A OUTPUT -p udp --dport 53 -j ACCEPT\niptables -A OUTPUT -p tcp --dport 53 -j ACCEPT\n\n# Save configuration\niptables-save &gt; /etc/iptables/rules.v4\n</code></pre>"},{"location":"appendices/ports/#linux-firewalld","title":"Linux firewalld","text":"<pre><code># firewalld configuration\nfirewall-cmd --permanent --zone=public --add-port=443/tcp\nfirewall-cmd --permanent --zone=public --add-port=19000/tcp\nfirewall-cmd --permanent --zone=public --add-port=1423/tcp\nfirewall-cmd --permanent --zone=public --add-port=53/udp\nfirewall-cmd --permanent --zone=public --add-port=53/tcp\nfirewall-cmd --reload\n</code></pre>"},{"location":"appendices/ports/#windows-firewall","title":"Windows Firewall","text":"<pre><code># PowerShell firewall rules\n\n# EPMware Cloud\nNew-NetFirewallRule -DisplayName \"EPMware Cloud HTTPS\" `\n    -Direction Outbound -Protocol TCP -RemotePort 443 `\n    -RemoteAddress \"epmware-cloud.com\" -Action Allow\n\n# HFM\nNew-NetFirewallRule -DisplayName \"HFM Application\" `\n    -Direction Outbound -Protocol TCP -RemotePort 19000 `\n    -RemoteAddress \"192.168.1.0/24\" -Action Allow\n\n# Planning\nNew-NetFirewallRule -DisplayName \"Planning Application\" `\n    -Direction Outbound -Protocol TCP -RemotePort 19000 `\n    -RemoteAddress \"192.168.1.0/24\" -Action Allow\n\n# Essbase\nNew-NetFirewallRule -DisplayName \"Essbase\" `\n    -Direction Outbound -Protocol TCP -RemotePort 1423 `\n    -RemoteAddress \"192.168.1.0/24\" -Action Allow\n</code></pre>"},{"location":"appendices/ports/#port-testing-commands","title":"Port Testing Commands","text":""},{"location":"appendices/ports/#basic-connectivity-tests","title":"Basic Connectivity Tests","text":"<pre><code># Test specific port\ntelnet server.com 443\nnc -zv server.com 443\n\n# Test multiple ports\nfor port in 443 8080 19000 1423; do\n    echo \"Testing port $port...\"\n    nc -zv server.com $port\ndone\n\n# PowerShell test\nTest-NetConnection -ComputerName server.com -Port 443\n</code></pre>"},{"location":"appendices/ports/#comprehensive-port-scanner","title":"Comprehensive Port Scanner","text":"<pre><code>#!/bin/bash\n# port_scanner.sh - Test all required ports\n\ndeclare -A PORTS=(\n    [\"EPMware Cloud\"]=443\n    [\"EPMware On-Premise\"]=8080\n    [\"HFM\"]=19000\n    [\"Planning\"]=19000\n    [\"Essbase\"]=1423\n    [\"DNS\"]=53\n)\n\nfor service in \"${!PORTS[@]}\"; do\n    port=${PORTS[$service]}\n    echo -n \"Testing $service (port $port)... \"\n\n    if timeout 2 bash -c \"cat &lt; /dev/null &gt; /dev/tcp/localhost/$port\" 2&gt;/dev/null; then\n        echo \"\u2713 OPEN\"\n    else\n        echo \"\u2717 CLOSED or FILTERED\"\n    fi\ndone\n</code></pre>"},{"location":"appendices/ports/#network-segmentation","title":"Network Segmentation","text":""},{"location":"appendices/ports/#dmz-configuration","title":"DMZ Configuration","text":"<pre><code>Internet &lt;--&gt; [Firewall] &lt;--&gt; DMZ &lt;--&gt; [Firewall] &lt;--&gt; Internal Network\n                                |                            |\n                          EPMware Agent              Target Applications\n\nAllowed: DMZ -&gt; Internet (443)\nAllowed: DMZ -&gt; Internal (19000, 1423)\nBlocked: Internet -&gt; DMZ (all inbound)\n</code></pre>"},{"location":"appendices/ports/#vlan-segmentation","title":"VLAN Segmentation","text":"<pre><code>VLAN 100 - Management:\n  - EPMware Agent Servers\n  - Allowed Ports: All required outbound\n\nVLAN 200 - Application:\n  - HFM, Planning, Essbase Servers\n  - Allowed Ports: Application specific\n\nVLAN 300 - Database:\n  - Oracle, SQL Server\n  - Allowed Ports: Database specific\n</code></pre>"},{"location":"appendices/ports/#proxy-configuration","title":"Proxy Configuration","text":""},{"location":"appendices/ports/#proxy-ports","title":"Proxy Ports","text":"Port Protocol Common Use Configuration 3128 HTTP/HTTPS Squid default Most common proxy port 8080 HTTP/HTTPS Alternative Common alternative 8888 HTTP/HTTPS Debugging Often used for debugging proxies 1080 SOCKS SOCKS proxy For SOCKS protocol"},{"location":"appendices/ports/#proxy-bypass-configuration","title":"Proxy Bypass Configuration","text":"<pre><code># agent.properties\nhttp.proxyHost=proxy.company.com\nhttp.proxyPort=3128\nhttps.proxyHost=proxy.company.com\nhttps.proxyPort=3128\n\n# Bypass internal servers\nhttp.nonProxyHosts=localhost|127.0.0.1|*.internal.com|192.168.*\n</code></pre>"},{"location":"appendices/ports/#port-security-best-practices","title":"Port Security Best Practices","text":""},{"location":"appendices/ports/#minimize-attack-surface","title":"Minimize Attack Surface","text":"<ol> <li>Only open required ports - Don't open ranges unnecessarily</li> <li>Use specific destinations - Restrict by IP when possible</li> <li>Implement egress filtering - Control outbound traffic</li> <li>Regular port audits - Review and close unused ports</li> </ol>"},{"location":"appendices/ports/#port-security-checklist","title":"Port Security Checklist","text":"<ul> <li>[ ] Document all open ports</li> <li>[ ] Justify each port requirement</li> <li>[ ] Restrict by source/destination IP</li> <li>[ ] Use encrypted protocols (HTTPS over HTTP)</li> <li>[ ] Monitor port usage</li> <li>[ ] Regular security scans</li> <li>[ ] Close unused ports immediately</li> </ul>"},{"location":"appendices/ports/#security-scanning","title":"Security Scanning","text":"<pre><code># Scan for open ports (requires nmap)\nnmap -p 1-65535 localhost\n\n# Check listening ports\nnetstat -tulpn | grep LISTEN  # Linux\nnetstat -an | findstr LISTEN   # Windows\n\n# Check established connections\nnetstat -an | grep ESTABLISHED\n</code></pre>"},{"location":"appendices/ports/#troubleshooting-port-issues","title":"Troubleshooting Port Issues","text":""},{"location":"appendices/ports/#common-port-problems","title":"Common Port Problems","text":"Problem Symptom Solution Port blocked by firewall Connection timeout Open port in firewall Port already in use Bind error Find and stop conflicting process Wrong port configured Connection refused Verify configuration Port filtered by network No response Contact network team"},{"location":"appendices/ports/#diagnostic-commands","title":"Diagnostic Commands","text":"<pre><code># Find what's using a port\nlsof -i :443              # Linux\nnetstat -ano | findstr 443  # Windows\n\n# Check if port is open\nnc -l 1234 &amp;              # Start listener\nnc localhost 1234         # Test connection\n\n# Packet capture\ntcpdump -i any port 443  # Linux\n</code></pre>"},{"location":"appendices/ports/#port-requirements-by-deployment-model","title":"Port Requirements by Deployment Model","text":""},{"location":"appendices/ports/#cloud-only-deployment","title":"Cloud-Only Deployment","text":"<pre><code>Minimum Ports:\n  - 443 (HTTPS to EPMware Cloud)\n  - 443 (HTTPS to Oracle Cloud EPM)\n  - 53  (DNS)\n\nTotal: 2 unique ports\n</code></pre>"},{"location":"appendices/ports/#on-premise-only-deployment","title":"On-Premise Only Deployment","text":"<pre><code>Minimum Ports:\n  - 8080 (EPMware On-Premise)\n  - 19000 (HFM/Planning)\n  - 1423 (Essbase)\n  - Database ports\n\nTotal: 4-5 unique ports\n</code></pre>"},{"location":"appendices/ports/#hybrid-deployment","title":"Hybrid Deployment","text":"<pre><code>All Ports:\n  - 443 (Cloud services)\n  - 8080 (On-premise EPMware)\n  - 19000 (HFM/Planning)\n  - 1423 (Essbase)\n  - Database ports\n  - Infrastructure ports\n\nTotal: 6-10 unique ports\n</code></pre>"},{"location":"appendices/ports/#high-availability-considerations","title":"High Availability Considerations","text":""},{"location":"appendices/ports/#load-balancer-ports","title":"Load Balancer Ports","text":"Port Protocol Purpose 80 HTTP Load balancer frontend 443 HTTPS Secure load balancer frontend 8080 HTTP Backend health checks 9000 TCP Load balancer administration"},{"location":"appendices/ports/#cluster-communication","title":"Cluster Communication","text":"<pre><code>Cluster Ports (if applicable):\n  - 7000-7001: Cluster communication\n  - 9160: Cluster gossip\n  - 5701: Hazelcast clustering\n</code></pre>"},{"location":"appendices/ports/#compliance-and-audit","title":"Compliance and Audit","text":""},{"location":"appendices/ports/#port-documentation-template","title":"Port Documentation Template","text":"<pre><code>| Port | Protocol | Direction | Purpose | Approved By | Date | Review Date |\n|------|----------|-----------|---------|-------------|------|-------------|\n| 443  | HTTPS    | Outbound  | EPMware | Security Team | 2023-11-01 | 2024-11-01 |\n</code></pre>"},{"location":"appendices/ports/#audit-commands","title":"Audit Commands","text":"<pre><code>#!/bin/bash\n# port_audit.sh - Generate port audit report\n\necho \"=== Port Audit Report ===\"\necho \"Date: $(date)\"\necho \"Server: $(hostname)\"\necho \"\"\necho \"=== Open Ports ===\"\nnetstat -tulpn | grep LISTEN\necho \"\"\necho \"=== Established Connections ===\"\nnetstat -an | grep ESTABLISHED | head -20\necho \"\"\necho \"=== Firewall Rules ===\"\niptables -L -n -v\n</code></pre> <p>Security Note</p> <p>Never open ports that aren't absolutely necessary. Each open port increases your attack surface and should be justified, documented, and regularly reviewed.</p> <p>Port Testing</p> <p>Always test port connectivity after firewall changes using multiple methods (telnet, nc, nmap) to ensure rules are working as expected.</p>"},{"location":"appendices/ports/#next-steps","title":"Next Steps","text":"<ul> <li>Security Checklist - Security configuration</li> <li>Agent Commands - Command reference</li> <li>Error Codes - Error resolution</li> <li>Return to Appendices - Main appendices page</li> </ul>"},{"location":"appendices/security/","title":"Appendix B - Security Checklist","text":""},{"location":"appendices/security/#appendix-b-security-checklist","title":"Appendix B - Security Checklist","text":"<p>This comprehensive security checklist ensures your EPMware Agent deployment follows security best practices and meets compliance requirements.</p>"},{"location":"appendices/security/#security-assessment-matrix","title":"Security Assessment Matrix","text":"Category Priority Status Notes Access Control Critical \u2b1c User permissions and authentication Network Security Critical \u2b1c Firewall and communication security Data Protection Critical \u2b1c Encryption and data handling Credential Management Critical \u2b1c Password and token security System Hardening High \u2b1c OS and application hardening Monitoring &amp; Audit High \u2b1c Logging and detection Compliance Medium \u2b1c Regulatory requirements Disaster Recovery Medium \u2b1c Backup and recovery"},{"location":"appendices/security/#pre-installation-security","title":"Pre-Installation Security","text":""},{"location":"appendices/security/#system-preparation","title":"System Preparation","text":"<ul> <li> <p>[ ] Operating System Updates </p><pre><code># Linux\nsudo yum update -y  # RHEL/CentOS\nsudo apt update &amp;&amp; sudo apt upgrade -y  # Ubuntu\n\n# Windows\nInstall-WindowsUpdate -AcceptAll -AutoReboot\n</code></pre><p></p> </li> <li> <p>[ ] Security Patches Applied</p> </li> <li>OS security patches current</li> <li>Java security updates installed</li> <li> <p>Third-party software patched</p> </li> <li> <p>[ ] Antivirus/Anti-malware</p> </li> <li>Antivirus software installed</li> <li>Real-time scanning enabled</li> <li> <p>Exclusions configured for agent directories</p> </li> <li> <p>[ ] System Hardening</p> </li> <li>Unnecessary services disabled</li> <li>Default accounts disabled/renamed</li> <li>Security baseline applied</li> </ul>"},{"location":"appendices/security/#network-security-preparation","title":"Network Security Preparation","text":"<ul> <li>[ ] Network Segmentation</li> <li>Agent in appropriate network zone</li> <li>VLANs properly configured</li> <li> <p>Network isolation implemented</p> </li> <li> <p>[ ] Firewall Configuration</p> </li> <li>Default deny rule in place</li> <li>Only required ports open</li> <li>Source IP restrictions configured</li> </ul>"},{"location":"appendices/security/#access-control-security","title":"Access Control Security","text":""},{"location":"appendices/security/#user-account-management","title":"User Account Management","text":"<ul> <li> <p>[ ] Dedicated Service Account </p><pre><code># Linux\nsudo useradd -r -s /bin/false -m epmware_agent\n\n# Windows\nNew-LocalUser -Name \"svc_epmware\" -NoPassword\n</code></pre><p></p> </li> <li> <p>[ ] Account Permissions</p> </li> <li>[ ] Minimum required privileges</li> <li>[ ] No administrator/root access unless necessary</li> <li>[ ] No interactive login capability</li> <li> <p>[ ] Account locked to specific host</p> </li> <li> <p>[ ] Password Policy</p> </li> <li>[ ] Strong password (15+ characters)</li> <li>[ ] Password complexity enforced</li> <li>[ ] Password expiration policy</li> <li>[ ] Password history enforced</li> </ul>"},{"location":"appendices/security/#file-system-permissions","title":"File System Permissions","text":""},{"location":"appendices/security/#linux-permissions","title":"Linux Permissions","text":"<pre><code># Set restrictive permissions\nchmod 700 /home/epmware_agent\nchmod 600 /home/epmware_agent/agent.properties\nchmod 700 /home/epmware_agent/ew_target_service.sh\nchmod 600 /home/epmware_agent/logs/*\n\n# Set ownership\nchown -R epmware_agent:epmware_agent /home/epmware_agent\n</code></pre>"},{"location":"appendices/security/#windows-permissions","title":"Windows Permissions","text":"<pre><code># Remove inherited permissions\nicacls \"C:\\epmware\" /inheritance:r\n\n# Grant specific permissions\nicacls \"C:\\epmware\" /grant \"svc_epmware:(OI)(CI)F\"\nicacls \"C:\\epmware\\agent.properties\" /grant \"svc_epmware:R\"\nicacls \"C:\\epmware\" /grant \"Administrators:(OI)(CI)F\"\n\n# Remove Everyone group\nicacls \"C:\\epmware\" /remove \"Everyone\"\n</code></pre>"},{"location":"appendices/security/#authentication-security","title":"Authentication Security","text":"<ul> <li>[ ] REST Token Management</li> <li>[ ] Tokens stored securely</li> <li>[ ] Tokens rotated every 90 days</li> <li>[ ] Old tokens revoked immediately</li> <li> <p>[ ] Token usage monitored</p> </li> <li> <p>[ ] Multi-Factor Authentication</p> </li> <li>[ ] MFA enabled for EPMware access</li> <li>[ ] MFA for administrative accounts</li> <li>[ ] MFA bypass documented and limited</li> </ul>"},{"location":"appendices/security/#data-protection","title":"Data Protection","text":""},{"location":"appendices/security/#encryption-at-rest","title":"Encryption at Rest","text":"<ul> <li> <p>[ ] Configuration File Encryption </p><pre><code># Encrypt sensitive files\nopenssl enc -aes-256-cbc -salt -in agent.properties \\\n  -out agent.properties.enc -k password\n\n# Decrypt when needed\nopenssl enc -aes-256-cbc -d -in agent.properties.enc \\\n  -out agent.properties -k password\n</code></pre><p></p> </li> <li> <p>[ ] Password File Encryption</p> </li> <li>[ ] Passwords never in plain text</li> <li>[ ] Using encrypted password files</li> <li> <p>[ ] Encryption keys protected</p> </li> <li> <p>[ ] Log File Protection</p> </li> <li>[ ] Sensitive data masked in logs</li> <li>[ ] Log files permissions restricted</li> <li>[ ] Log encryption if required</li> </ul>"},{"location":"appendices/security/#encryption-in-transit","title":"Encryption in Transit","text":"<ul> <li> <p>[ ] TLS/SSL Configuration </p><pre><code># Enforce TLS 1.2+\nhttps.protocols=TLSv1.2,TLSv1.3\nhttps.cipherSuites=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n</code></pre><p></p> </li> <li> <p>[ ] Certificate Management</p> </li> <li>[ ] Valid SSL certificates</li> <li>[ ] Certificates not expired</li> <li>[ ] Certificate chain complete</li> <li>[ ] Private keys protected</li> </ul>"},{"location":"appendices/security/#credential-management","title":"Credential Management","text":""},{"location":"appendices/security/#password-security-checklist","title":"Password Security Checklist","text":"<ul> <li> <p>[ ] No Hard-coded Passwords </p><pre><code># Check for passwords in files\ngrep -r \"password\" /home/epmware_agent/ --exclude-dir=logs\ngrep -r \"pwd\" /home/epmware_agent/ --exclude-dir=logs\n</code></pre><p></p> </li> <li> <p>[ ] Secure Password Storage</p> </li> <li>[ ] Use credential vaults when possible</li> <li>[ ] Encrypted password files</li> <li>[ ] Restricted file permissions</li> <li>[ ] No passwords in version control</li> </ul>"},{"location":"appendices/security/#token-security","title":"Token Security","text":"<ul> <li> <p>[ ] Token Protection </p><pre><code># Secure token file\necho \"export EPMWARE_TOKEN=your-token\" &gt; ~/.epmware_token\nchmod 600 ~/.epmware_token\nsource ~/.epmware_token\n</code></pre><p></p> </li> <li> <p>[ ] Token Rotation Schedule</p> </li> <li>[ ] Quarterly rotation minimum</li> <li>[ ] Immediate rotation on compromise</li> <li>[ ] Rotation documented</li> <li>[ ] Old tokens revoked</li> </ul>"},{"location":"appendices/security/#network-security","title":"Network Security","text":""},{"location":"appendices/security/#firewall-rules","title":"Firewall Rules","text":"<ul> <li>[ ] Inbound Rules</li> <li>[ ] All inbound ports closed (agent only needs outbound)</li> <li>[ ] Management access restricted by source IP</li> <li> <p>[ ] Default deny rule in place</p> </li> <li> <p>[ ] Outbound Rules</p> </li> <li>[ ] Only required ports open</li> <li>[ ] Destination IPs restricted when possible</li> <li>[ ] Egress filtering implemented</li> </ul>"},{"location":"appendices/security/#network-communication","title":"Network Communication","text":"<ul> <li>[ ] Secure Protocols</li> <li>[ ] HTTPS preferred over HTTP</li> <li>[ ] SSH for file transfers</li> <li>[ ] No telnet or FTP</li> <li> <p>[ ] No unencrypted protocols</p> </li> <li> <p>[ ] Proxy Security</p> </li> <li>[ ] Proxy authentication required</li> <li>[ ] Proxy logs monitored</li> <li>[ ] Proxy bypass limited</li> </ul>"},{"location":"appendices/security/#system-hardening","title":"System Hardening","text":""},{"location":"appendices/security/#operating-system-hardening","title":"Operating System Hardening","text":""},{"location":"appendices/security/#linux-hardening","title":"Linux Hardening","text":"<pre><code># Kernel parameters\ncat &gt;&gt; /etc/sysctl.d/99-epmware-security.conf &lt;&lt; EOF\n# IP Spoofing protection\nnet.ipv4.conf.all.rp_filter = 1\n\n# Ignore ICMP redirects\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv6.conf.all.accept_redirects = 0\n\n# Ignore send redirects\nnet.ipv4.conf.all.send_redirects = 0\n\n# Disable source packet routing\nnet.ipv4.conf.all.accept_source_route = 0\n\n# Log Martians\nnet.ipv4.conf.all.log_martians = 1\n\n# Ignore ICMP ping requests\nnet.ipv4.icmp_echo_ignore_all = 1\nEOF\n\nsysctl -p /etc/sysctl.d/99-epmware-security.conf\n</code></pre>"},{"location":"appendices/security/#windows-hardening","title":"Windows Hardening","text":"<pre><code># Disable unnecessary services\nStop-Service -Name \"RemoteRegistry\" -Force\nSet-Service -Name \"RemoteRegistry\" -StartupType Disabled\n\n# Enable Windows Defender\nSet-MpPreference -DisableRealtimeMonitoring $false\n\n# Configure audit policy\nauditpol /set /category:\"Logon/Logoff\" /success:enable /failure:enable\n</code></pre>"},{"location":"appendices/security/#application-hardening","title":"Application Hardening","text":"<ul> <li> <p>[ ] Java Security </p><pre><code># Update Java security properties\necho \"jdk.tls.disabledAlgorithms=SSLv3, RC4, DES, MD5withRSA, DH keySize &lt; 2048\" \\\n  &gt;&gt; $JAVA_HOME/lib/security/java.security\n</code></pre><p></p> </li> <li> <p>[ ] Agent Configuration Security</p> </li> <li>[ ] Debug mode disabled in production</li> <li>[ ] Verbose logging disabled</li> <li>[ ] Test endpoints disabled</li> <li>[ ] Development features removed</li> </ul>"},{"location":"appendices/security/#monitoring-and-audit","title":"Monitoring and Audit","text":""},{"location":"appendices/security/#logging-configuration","title":"Logging Configuration","text":"<ul> <li> <p>[ ] Comprehensive Logging </p><pre><code># Enable security logging\nlogging.level.security=INFO\nlogging.audit.enabled=true\nlogging.audit.include-headers=true\nlogging.audit.include-payload=false\n</code></pre><p></p> </li> <li> <p>[ ] Log Management</p> </li> <li>[ ] Centralized log collection</li> <li>[ ] Log retention policy defined</li> <li>[ ] Log rotation configured</li> <li>[ ] Logs backed up regularly</li> </ul>"},{"location":"appendices/security/#security-monitoring","title":"Security Monitoring","text":"<ul> <li>[ ] Real-time Monitoring</li> <li>[ ] Failed authentication alerts</li> <li>[ ] Unusual activity detection</li> <li>[ ] Resource usage monitoring</li> <li> <p>[ ] Network anomaly detection</p> </li> <li> <p>[ ] Security Alerts </p><pre><code>#!/bin/bash\n# security_monitor.sh\n\n# Check for failed authentications\nif grep -q \"401 Unauthorized\" /var/log/epmware/agent.log; then\n    echo \"Authentication failure detected\" | \\\n      mail -s \"Security Alert\" security@company.com\nfi\n\n# Check for suspicious commands\nif grep -E \"rm -rf|chmod 777|sudo\" /var/log/secure; then\n    echo \"Suspicious command detected\" | \\\n      mail -s \"Security Alert\" security@company.com\nfi\n</code></pre><p></p> </li> </ul>"},{"location":"appendices/security/#audit-trail","title":"Audit Trail","text":"<ul> <li>[ ] Audit Requirements</li> <li>[ ] All configuration changes logged</li> <li>[ ] User access logged</li> <li>[ ] Deployment activities logged</li> <li> <p>[ ] Security events logged</p> </li> <li> <p>[ ] Audit Log Protection</p> </li> <li>[ ] Audit logs write-only</li> <li>[ ] Audit logs on separate storage</li> <li>[ ] Audit logs encrypted</li> <li>[ ] Tamper detection enabled</li> </ul>"},{"location":"appendices/security/#compliance-requirements","title":"Compliance Requirements","text":""},{"location":"appendices/security/#regulatory-compliance","title":"Regulatory Compliance","text":"<ul> <li>[ ] SOX Compliance</li> <li>[ ] Change control process</li> <li>[ ] Separation of duties</li> <li>[ ] Access reviews quarterly</li> <li> <p>[ ] Audit trail maintained</p> </li> <li> <p>[ ] PCI DSS (if applicable)</p> </li> <li>[ ] Cardholder data protected</li> <li>[ ] Strong access controls</li> <li>[ ] Regular security testing</li> <li> <p>[ ] Security policies maintained</p> </li> <li> <p>[ ] GDPR (if applicable)</p> </li> <li>[ ] Data privacy controls</li> <li>[ ] Data retention policies</li> <li>[ ] Right to erasure capability</li> <li>[ ] Data breach procedures</li> </ul>"},{"location":"appendices/security/#security-policies","title":"Security Policies","text":"<ul> <li> <p>[ ] Password Policy </p><pre><code>Minimum Length: 15 characters\nComplexity: Upper + Lower + Number + Special\nHistory: 12 passwords\nMax Age: 90 days\nLockout: 5 attempts / 30 minutes\n</code></pre><p></p> </li> <li> <p>[ ] Access Control Policy</p> </li> <li>[ ] Least privilege principle</li> <li>[ ] Regular access reviews</li> <li>[ ] Timely deprovisioning</li> <li>[ ] Documented approvals</li> </ul>"},{"location":"appendices/security/#incident-response","title":"Incident Response","text":""},{"location":"appendices/security/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>[ ] Response Procedures</li> <li>[ ] Incident detection process</li> <li>[ ] Escalation procedures defined</li> <li>[ ] Communication plan ready</li> <li> <p>[ ] Recovery procedures documented</p> </li> <li> <p>[ ] Security Incident Checklist</p> </li> <li>Detect and analyze incident</li> <li>Contain the incident</li> <li>Eradicate the threat</li> <li>Recover systems</li> <li>Document lessons learned</li> </ul>"},{"location":"appendices/security/#backup-and-recovery","title":"Backup and Recovery","text":"<ul> <li> <p>[ ] Backup Strategy </p><pre><code>#!/bin/bash\n# backup_security.sh\n\nBACKUP_DIR=\"/secure/backup/$(date +%Y%m%d)\"\nmkdir -p $BACKUP_DIR\n\n# Backup configurations\ntar -czf $BACKUP_DIR/config.tar.gz /home/epmware_agent/*.properties\n\n# Backup logs\ntar -czf $BACKUP_DIR/logs.tar.gz /home/epmware_agent/logs/\n\n# Encrypt backups\nopenssl enc -aes-256-cbc -salt -in $BACKUP_DIR/config.tar.gz \\\n  -out $BACKUP_DIR/config.tar.gz.enc -k $BACKUP_PASSWORD\n</code></pre><p></p> </li> <li> <p>[ ] Recovery Testing</p> </li> <li>[ ] Recovery procedures documented</li> <li>[ ] Recovery time objectives defined</li> <li>[ ] Regular recovery drills</li> <li>[ ] Backup integrity verified</li> </ul>"},{"location":"appendices/security/#security-testing","title":"Security Testing","text":""},{"location":"appendices/security/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<ul> <li> <p>[ ] Regular Security Scans </p><pre><code># Network vulnerability scan\nnmap -sV -O -A server.com\n\n# Web vulnerability scan\nnikto -h https://epmware-server.com\n\n# SSL/TLS scan\ntestssl.sh https://epmware-server.com\n</code></pre><p></p> </li> <li> <p>[ ] Penetration Testing</p> </li> <li>[ ] Annual penetration tests</li> <li>[ ] Remediation tracking</li> <li>[ ] Retest after fixes</li> <li>[ ] Report to management</li> </ul>"},{"location":"appendices/security/#security-review-schedule","title":"Security Review Schedule","text":"Review Type Frequency Last Completed Next Due Access Review Quarterly Security Patches Monthly Password Rotation Quarterly Certificate Review Monthly Firewall Rules Quarterly Security Scan Monthly Penetration Test Annually"},{"location":"appendices/security/#security-hardening-scripts","title":"Security Hardening Scripts","text":""},{"location":"appendices/security/#comprehensive-security-check","title":"Comprehensive Security Check","text":"<pre><code>#!/bin/bash\n# security_audit.sh\n\necho \"=== EPMware Agent Security Audit ===\"\necho \"Date: $(date)\"\necho \"Server: $(hostname)\"\necho \"\"\n\n# Check file permissions\necho \"=== File Permissions ===\"\nls -la /home/epmware_agent/ | grep -E \"properties|\\.sh\"\n\n# Check for plain text passwords\necho \"=== Password Check ===\"\ngrep -l \"password\\|pwd\" /home/epmware_agent/*.properties\n\n# Check open ports\necho \"=== Open Ports ===\"\nnetstat -tulpn | grep LISTEN\n\n# Check failed logins\necho \"=== Failed Logins (last 24h) ===\"\ngrep \"Failed\" /var/log/secure | tail -20\n\n# Check sudo usage\necho \"=== Recent Sudo Commands ===\"\ngrep sudo /var/log/secure | tail -10\n\n# Check for security updates\necho \"=== Available Security Updates ===\"\nyum list-security  # RHEL/CentOS\n# apt list --upgradable  # Ubuntu\n\necho \"=== Audit Complete ===\"\n</code></pre>"},{"location":"appendices/security/#security-documentation","title":"Security Documentation","text":""},{"location":"appendices/security/#required-documentation","title":"Required Documentation","text":"<ul> <li>[ ] Security Architecture Diagram</li> <li>[ ] Data Flow Diagram</li> <li>[ ] Network Topology</li> <li>[ ] Access Control Matrix</li> <li>[ ] Incident Response Plan</li> <li>[ ] Disaster Recovery Plan</li> <li>[ ] Security Policies and Procedures</li> </ul>"},{"location":"appendices/security/#security-contact-information","title":"Security Contact Information","text":"<pre><code>Security Team:\n  Email: security@company.com\n  Phone: +1-555-SEC-TEAM\n  On-Call: +1-555-911-SEC\n\nIncident Response:\n  Email: incident-response@company.com\n  Hotline: +1-555-INCIDENT\n\nManagement:\n  CISO: ciso@company.com\n  Security Manager: sec-manager@company.com\n</code></pre> <p>Critical Security Note</p> <p>Never compromise security for convenience. If a security control seems burdensome, work to find a secure alternative rather than bypassing the control.</p> <p>Regular Reviews</p> <p>Security is not a one-time activity. Schedule regular reviews and updates of all security controls to maintain effectiveness against evolving threats.</p>"},{"location":"appendices/security/#next-steps","title":"Next Steps","text":"<ul> <li>Port Requirements - Network port reference</li> <li>Agent Commands - Command reference</li> <li>Error Codes - Error resolution</li> <li>Return to Appendices - Main appendices page</li> </ul>"},{"location":"configuration/","title":"Configuration Overview","text":""},{"location":"configuration/#configuration-overview","title":"Configuration Overview","text":"<p>The configuration phase is critical for establishing secure and reliable communication between the EPMware Agent and your EPMware instance. This section guides you through all aspects of agent configuration.</p>"},{"location":"configuration/#configuration-components","title":"Configuration Components","text":"<ul> <li> <p> Agent Properties   Core configuration file containing connection settings, tokens, and paths</p> </li> <li> <p> Service Configuration   Service script setup for starting and managing the agent</p> </li> <li> <p> REST API Token   Authentication token generation and management</p> </li> <li> <p> Testing Connection   Verify agent connectivity and troubleshoot issues</p> </li> </ul>"},{"location":"configuration/#configuration-workflow","title":"Configuration Workflow","text":"<p>The typical configuration process follows these steps:</p> <pre><code>graph TD\n    A[Agent Installed] --&gt; B[Configure Properties]\n    B --&gt; C[Modify Service Script]\n    C --&gt; D[Generate REST Token]\n    D --&gt; E[Update Properties with Token]\n    E --&gt; F[Test Connection]\n    F --&gt; G{Test Successful?}\n    G --&gt;|Yes| H[Configuration Complete]\n    G --&gt;|No| I[Troubleshoot]\n    I --&gt; B\n</code></pre>"},{"location":"configuration/#quick-configuration-guide","title":"Quick Configuration Guide","text":""},{"location":"configuration/#step-1-basic-properties-setup","title":"Step 1: Basic Properties Setup","text":"<p>Edit <code>agent.properties</code> with essential settings:</p> <pre><code># Minimal configuration\new.portal.server=your-server-name\new.portal.url=https://your-instance.epmwarecloud.com\new.portal.token=your-rest-token-here\nagent.interval.millisecond=30000\nagent.root.dir=/home/your-user\n</code></pre>"},{"location":"configuration/#step-2-service-script-adjustment","title":"Step 2: Service Script Adjustment","text":"<p>Update <code>ew_target_service.sh</code> with correct path:</p> <pre><code>#!/bin/bash\nHOME=/home/your-user  # Update this line\ncd $HOME\njava -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"configuration/#step-3-token-configuration","title":"Step 3: Token Configuration","text":"<ol> <li>Generate token in EPMware UI</li> <li>Copy token value</li> <li>Update <code>agent.properties</code></li> <li>Secure the configuration file</li> </ol>"},{"location":"configuration/#step-4-connection-test","title":"Step 4: Connection Test","text":"<pre><code># Quick test\n./ew_target_service.sh\n\n# Verify polling\ntail -f logs/agent-poll.log\n</code></pre>"},{"location":"configuration/#configuration-files-reference","title":"Configuration Files Reference","text":""},{"location":"configuration/#primary-configuration-files","title":"Primary Configuration Files","text":"File Purpose Location <code>agent.properties</code> Main configuration Agent home directory <code>ew_target_service.sh</code> Service startup script Agent home directory <code>application.yml</code> Spring Boot config (optional) <code>config/</code> directory <code>logback.xml</code> Logging config (optional) <code>config/</code> directory"},{"location":"configuration/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<p>Configuration values are loaded in this order (later overrides earlier):</p> <ol> <li>Default values in JAR</li> <li><code>agent.properties</code> file</li> <li>Environment variables</li> <li>Command line arguments</li> </ol>"},{"location":"configuration/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"configuration/#development-environment","title":"Development Environment","text":"<p>Optimized for debugging and testing:</p> <pre><code># Development settings\new.portal.url=https://dev.epmwarecloud.com\nagent.interval.millisecond=60000  # Less frequent polling\nagent.log.level=DEBUG\nagent.test.mode=true\n</code></pre>"},{"location":"configuration/#production-environment","title":"Production Environment","text":"<p>Optimized for reliability and performance:</p> <pre><code># Production settings\new.portal.url=https://prod.epmwarecloud.com\nagent.interval.millisecond=30000\nagent.log.level=INFO\nagent.retry.count=3\nagent.timeout.seconds=3600\n</code></pre>"},{"location":"configuration/#security-configuration","title":"Security Configuration","text":""},{"location":"configuration/#protecting-sensitive-data","title":"Protecting Sensitive Data","text":"<ol> <li> <p>File Permissions </p><pre><code>chmod 600 agent.properties  # Owner read/write only\nchmod 750 ew_target_service.sh  # Owner all, group read/execute\n</code></pre><p></p> </li> <li> <p>Token Security</p> </li> <li>Never commit tokens to version control</li> <li>Use environment variables for tokens</li> <li> <p>Rotate tokens regularly</p> </li> <li> <p>Encrypted Properties </p><pre><code># Use encrypted values\new.portal.token={encrypted}AES256:...\n</code></pre><p></p> </li> </ol>"},{"location":"configuration/#network-security","title":"Network Security","text":"<p>Configure secure communication:</p> <pre><code># TLS/SSL settings\nagent.ssl.enabled=true\nagent.ssl.verify-hostname=true\nagent.ssl.trust-all=false\nagent.ssl.protocol=TLSv1.2\n</code></pre>"},{"location":"configuration/#advanced-configuration-topics","title":"Advanced Configuration Topics","text":""},{"location":"configuration/#high-availability-setup","title":"High Availability Setup","text":"<p>Configure for redundancy:</p> <pre><code># HA configuration\nagent.ha.enabled=true\nagent.ha.heartbeat.interval=5000\nagent.ha.failover.timeout=30000\n</code></pre>"},{"location":"configuration/#performance-tuning","title":"Performance Tuning","text":"<p>Optimize for your environment:</p> <pre><code># Performance settings\nagent.thread.pool.size=10\nagent.connection.pool.size=5\nagent.batch.size=100\nagent.compression.enabled=true\n</code></pre>"},{"location":"configuration/#monitoring-configuration","title":"Monitoring Configuration","text":"<p>Enable monitoring endpoints:</p> <pre><code># Monitoring\nmanagement.endpoints.enabled=true\nmanagement.endpoint.health.enabled=true\nmanagement.endpoint.metrics.enabled=true\nmanagement.server.port=8081\n</code></pre>"},{"location":"configuration/#configuration-validation","title":"Configuration Validation","text":""},{"location":"configuration/#pre-flight-checklist","title":"Pre-Flight Checklist","text":"<p>Before starting the agent:</p> <ul> <li>[ ] Server name matches EPMware configuration</li> <li>[ ] URL is correct and accessible</li> <li>[ ] Token is valid and properly formatted</li> <li>[ ] Paths use correct format for OS</li> <li>[ ] Service script has correct HOME directory</li> <li>[ ] Java is accessible and correct version</li> <li>[ ] Network connectivity is established</li> <li>[ ] File permissions are properly set</li> </ul>"},{"location":"configuration/#configuration-testing","title":"Configuration Testing","text":"<p>Test each component:</p> <ol> <li> <p>Properties Validation </p><pre><code># Check syntax\ngrep -E \"^[^#].*=\" agent.properties\n</code></pre><p></p> </li> <li> <p>Token Validation </p><pre><code># Test token\ncurl -H \"Authorization: Bearer YOUR-TOKEN\" \\\n     https://your-server.com/api/v1/auth/verify\n</code></pre><p></p> </li> <li> <p>Service Script Test </p><pre><code># Test script\nbash -n ew_target_service.sh  # Syntax check\n./ew_target_service.sh  # Execution test\n</code></pre><p></p> </li> </ol>"},{"location":"configuration/#common-configuration-patterns","title":"Common Configuration Patterns","text":""},{"location":"configuration/#multi-application-setup","title":"Multi-Application Setup","text":"<p>Supporting multiple applications:</p> <pre><code># Application-specific settings\nhfm.enabled=true\nhfm.server=hfm-server.com\nplanning.enabled=true\nplanning.server=planning-server.com\n</code></pre>"},{"location":"configuration/#proxy-configuration","title":"Proxy Configuration","text":"<p>For environments with proxy servers:</p> <pre><code># Proxy settings\nhttp.proxyHost=proxy.company.com\nhttp.proxyPort=8080\nhttps.proxyHost=proxy.company.com\nhttps.proxyPort=8080\nhttp.nonProxyHosts=localhost|127.0.0.1\n</code></pre>"},{"location":"configuration/#custom-scripts-integration","title":"Custom Scripts Integration","text":"<p>Integrating with existing scripts:</p> <pre><code># Custom script hooks\nagent.script.pre-deploy=/opt/scripts/pre-deploy.sh\nagent.script.post-deploy=/opt/scripts/post-deploy.sh\nagent.script.on-error=/opt/scripts/error-handler.sh\n</code></pre>"},{"location":"configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"configuration/#common-issues","title":"Common Issues","text":"Issue Likely Cause Solution Agent won't start Invalid configuration Check syntax and required fields Connection failed Wrong URL or token Verify server URL and regenerate token Permission denied File permissions Fix ownership and permissions Path not found Incorrect directory Update paths in configuration"},{"location":"configuration/#debug-mode","title":"Debug Mode","text":"<p>Enable comprehensive debugging:</p> <pre><code># Debug configuration\nagent.debug=true\nagent.log.level=TRACE\nagent.log.verbose=true\nagent.log.include-stacktrace=true\n</code></pre>"},{"location":"configuration/#configuration-backup","title":"Configuration Backup","text":"<p>Always backup before changes:</p> <pre><code># Backup configuration\ncp agent.properties agent.properties.backup.$(date +%Y%m%d)\ncp ew_target_service.sh ew_target_service.sh.backup.$(date +%Y%m%d)\n\n# Restore if needed\ncp agent.properties.backup.20231115 agent.properties\n</code></pre>"},{"location":"configuration/#best-practices","title":"Best Practices","text":""},{"location":"configuration/#configuration-management","title":"Configuration Management","text":"<ol> <li>Version Control - Track configuration changes</li> <li>Documentation - Document all customizations</li> <li>Validation - Test changes before production</li> <li>Standardization - Use consistent naming conventions</li> </ol>"},{"location":"configuration/#security-guidelines","title":"Security Guidelines","text":"<ol> <li>Least Privilege - Grant minimum required permissions</li> <li>Encryption - Encrypt sensitive values</li> <li>Rotation - Regular token and password rotation</li> <li>Auditing - Log configuration changes</li> </ol>"},{"location":"configuration/#maintenance-tips","title":"Maintenance Tips","text":"<ol> <li>Regular Reviews - Audit configurations quarterly</li> <li>Update Tracking - Document version updates</li> <li>Performance Monitoring - Track configuration impact</li> <li>Disaster Recovery - Maintain configuration backups</li> </ol>"},{"location":"configuration/#getting-help","title":"Getting Help","text":"<p>If you encounter configuration issues:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Review agent logs for specific errors</li> <li>Verify all prerequisites are met</li> <li>Contact EPMware Support with:</li> <li>Configuration files (sanitized)</li> <li>Error messages</li> <li>Log excerpts</li> </ol> <p>Configuration Templates</p> <p>EPMware provides configuration templates for common scenarios. Contact support for templates matching your environment.</p> <p>Production Changes</p> <p>Always test configuration changes in a non-production environment first. Have a rollback plan ready before making production changes.</p>"},{"location":"configuration/#next-steps","title":"Next Steps","text":"<p>After completing configuration:</p> <ol> <li>Test the Connection - Verify everything works</li> <li>Schedule the Agent - Set up automatic startup</li> <li>Configure Applications - Set up target integrations</li> <li>Monitor Operations - Implement monitoring</li> </ol>"},{"location":"configuration/agent-properties/","title":"Agent Properties","text":""},{"location":"configuration/agent-properties/#agent-properties-configuration","title":"Agent Properties Configuration","text":""},{"location":"configuration/agent-properties/#overview","title":"Overview","text":"<p>The <code>agent.properties</code> file contains all configuration settings for the EPMware Agent. This file must be properly configured before starting the agent service.</p>"},{"location":"configuration/agent-properties/#location","title":"Location","text":"<p>The <code>agent.properties</code> file is located in the agent installation directory:</p> <ul> <li>Windows: <code>C:\\cygwin64\\home\\[username]\\agent.properties</code></li> <li>Linux: <code>/home/[username]/agent.properties</code></li> </ul> <p> Location of agent.properties file in the installation directory</p>"},{"location":"configuration/agent-properties/#configuration-parameters","title":"Configuration Parameters","text":""},{"location":"configuration/agent-properties/#core-settings","title":"Core Settings","text":"Property Description Example <code>ew.portal.server</code> Server name configured in EPMware <code>epmware1.epmware.com</code> <code>ew.portal.url</code> EPMware application URL <code>https://client.epmwarecloud.com</code> <code>ew.portal.token</code> REST API authentication token <code>2e6d4103-5145-4c30-9837-ac6d14797523</code> <code>agent.interval.millisecond</code> Polling interval in milliseconds <code>30000</code> <code>agent.root.dir</code> Agent installation directory <code>C:\\\\\\\\cygwin64\\\\\\\\home\\\\\\\\Administrator</code>"},{"location":"configuration/agent-properties/#optional-parameters","title":"Optional Parameters","text":"Property Description Example <code>agent.params.quote</code> Quote character for parameters <code>\"</code> (for Linux) <code>agent.log.level</code> Logging verbosity <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code> <code>agent.timeout.seconds</code> Command execution timeout <code>3600</code> <code>agent.retry.count</code> Number of retry attempts <code>3</code>"},{"location":"configuration/agent-properties/#configuration-examples","title":"Configuration Examples","text":""},{"location":"configuration/agent-properties/#cloud-epmware-configuration","title":"Cloud EPMware Configuration","text":"<pre><code># EPMware Cloud Configuration\new.portal.server=epmware1.epmware.com\new.portal.url=https://client.epmwarecloud.com\new.portal.token=2e6d4103-5145-4c30-9837-ac6d14797523\nagent.interval.millisecond=30000\nagent.root.dir=C:\\\\\\\\cygwin64\\\\\\\\home\\\\\\\\Administrator\n</code></pre>"},{"location":"configuration/agent-properties/#on-premise-epmware-configuration","title":"On-Premise EPMware Configuration","text":"<pre><code># EPMware On-Premise Configuration\new.portal.server=epmware1.epmware.com\new.portal.url=http://epmware-server.com:8080/epmware\new.portal.token=2e6d4103-5145-4c30-9837-ac6d14797523\nagent.interval.millisecond=30000\nagent.root.dir=C:\\\\\\\\cygwin64\\\\\\\\home\\\\\\\\Administrator\n</code></pre>"},{"location":"configuration/agent-properties/#linux-server-configuration","title":"Linux Server Configuration","text":"<pre><code># Linux Server Configuration\new.portal.server=epmware1.epmware.com\new.portal.url=https://client.epmwarecloud.com\new.portal.token=2e6d4103-5145-4c30-9837-ac6d14797523\nagent.interval.millisecond=30000\nagent.root.dir=/home/epmadmin\nagent.params.quote=\"\n</code></pre>"},{"location":"configuration/agent-properties/#obtaining-configuration-values","title":"Obtaining Configuration Values","text":""},{"location":"configuration/agent-properties/#server-name","title":"Server Name","text":"<p>The server name must match the name configured in EPMware:</p> <ol> <li>Log into EPMware application</li> <li>Navigate to Infrastructure \u2192 Servers</li> <li>Note the exact server name</li> </ol> <p> Server name configuration in EPMware</p>"},{"location":"configuration/agent-properties/#portal-url","title":"Portal URL","text":"<ul> <li>Cloud: Use the provided EPMware cloud URL (e.g., <code>https://client.epmwarecloud.com</code>)</li> <li>On-Premise: Use your internal EPMware server URL with port</li> </ul>"},{"location":"configuration/agent-properties/#rest-api-token","title":"REST API Token","text":"<p>See REST API Token Configuration for detailed instructions on generating tokens.</p>"},{"location":"configuration/agent-properties/#parameter-details","title":"Parameter Details","text":""},{"location":"configuration/agent-properties/#polling-interval","title":"Polling Interval","text":"<p>The <code>agent.interval.millisecond</code> parameter controls how frequently the agent checks for tasks:</p> Setting Milliseconds Use Case Frequent 10000 (10 sec) High-priority production environments Standard 30000 (30 sec) Recommended for most environments Infrequent 60000 (60 sec) Low-volume or development environments Minimal 300000 (5 min) Testing or maintenance windows <p>Performance Optimization</p> <p>Lower polling intervals increase server load but reduce deployment latency. Adjust based on your deployment frequency and performance requirements.</p>"},{"location":"configuration/agent-properties/#directory-paths","title":"Directory Paths","text":""},{"location":"configuration/agent-properties/#windows-path-format","title":"Windows Path Format","text":"<p>Windows paths require double backslashes:</p> <pre><code>agent.root.dir=C:\\\\\\\\cygwin64\\\\\\\\home\\\\\\\\Administrator\n</code></pre>"},{"location":"configuration/agent-properties/#linux-path-format","title":"Linux Path Format","text":"<p>Linux paths use forward slashes:</p> <pre><code>agent.root.dir=/home/epmadmin\n</code></pre>"},{"location":"configuration/agent-properties/#quote-character-configuration","title":"Quote Character Configuration","text":"<p>The <code>agent.params.quote</code> parameter is used for enclosing parameter values:</p> <ul> <li>Windows: Not required (default handling)</li> <li>Linux: Set to <code>\"</code> (double quote)</li> </ul> <p>This ensures proper handling of parameters with spaces or special characters.</p>"},{"location":"configuration/agent-properties/#validation","title":"Validation","text":""},{"location":"configuration/agent-properties/#check-configuration","title":"Check Configuration","text":"<p>After editing <code>agent.properties</code>, validate your configuration:</p> <ol> <li>Verify all required parameters are set</li> <li>Ensure URLs are accessible</li> <li>Confirm token is valid</li> <li>Check directory paths exist</li> </ol>"},{"location":"configuration/agent-properties/#test-connection","title":"Test Connection","text":"<p>Test the configuration before starting the agent service:</p> <pre><code># From Cygwin terminal (Windows) or shell (Linux)\ncd $HOME\njava -jar epmware-agent.jar --spring.config.name=agent --test\n</code></pre>"},{"location":"configuration/agent-properties/#security-considerations","title":"Security Considerations","text":""},{"location":"configuration/agent-properties/#protecting-the-configuration-file","title":"Protecting the Configuration File","text":"<p>The <code>agent.properties</code> file contains sensitive information:</p> <ul> <li>Set appropriate file permissions (read/write for agent user only)</li> <li>Never commit to version control</li> <li>Use encrypted storage for backups</li> <li>Rotate tokens periodically</li> </ul>"},{"location":"configuration/agent-properties/#linux-permissions","title":"Linux Permissions","text":"<pre><code>chmod 600 agent.properties\nchown epmadmin:epmadmin agent.properties\n</code></pre>"},{"location":"configuration/agent-properties/#windows-permissions","title":"Windows Permissions","text":"<p>Right-click the file \u2192 Properties \u2192 Security \u2192 Edit: - Remove unnecessary users - Grant full control only to the agent service account</p>"},{"location":"configuration/agent-properties/#token-management","title":"Token Management","text":"<ul> <li>Generate unique tokens per environment</li> <li>Implement token rotation schedule</li> <li>Monitor token usage in audit logs</li> <li>Revoke compromised tokens immediately</li> </ul>"},{"location":"configuration/agent-properties/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"configuration/agent-properties/#development-environment","title":"Development Environment","text":"<pre><code># Development settings - verbose logging, longer intervals\new.portal.url=https://dev.epmwarecloud.com\nagent.interval.millisecond=60000\nagent.log.level=DEBUG\nagent.timeout.seconds=7200\n</code></pre>"},{"location":"configuration/agent-properties/#production-environment","title":"Production Environment","text":"<pre><code># Production settings - standard logging, frequent polling\new.portal.url=https://prod.epmwarecloud.com\nagent.interval.millisecond=30000\nagent.log.level=INFO\nagent.timeout.seconds=3600\nagent.retry.count=3\n</code></pre>"},{"location":"configuration/agent-properties/#troubleshooting-configuration-issues","title":"Troubleshooting Configuration Issues","text":""},{"location":"configuration/agent-properties/#common-problems","title":"Common Problems","text":"Issue Possible Cause Solution Connection refused Invalid URL Verify <code>ew.portal.url</code> is correct Authentication failed Invalid token Generate new token in EPMware Path not found Incorrect directory Verify <code>agent.root.dir</code> exists Polling not working Invalid interval Ensure interval is in milliseconds"},{"location":"configuration/agent-properties/#configuration-validation-checklist","title":"Configuration Validation Checklist","text":"<ul> <li>[ ] Server name matches EPMware configuration exactly</li> <li>[ ] URL protocol is correct (http:// or https://)</li> <li>[ ] Token is 36 characters long</li> <li>[ ] Paths use correct format for OS</li> <li>[ ] No trailing spaces in values</li> <li>[ ] File encoding is UTF-8</li> <li>[ ] No special characters in unquoted values</li> </ul> <p>Path Separators</p> <p>Always use four backslashes (<code>\\\\\\\\</code>) for Windows paths in the properties file. This accounts for Java escaping requirements.</p> <p>Property Changes</p> <p>Changes to <code>agent.properties</code> require restarting the agent service to take effect.</p>"},{"location":"configuration/agent-properties/#next-steps","title":"Next Steps","text":"<p>After configuring agent properties:</p> <ol> <li>Configure the Service</li> <li>Generate REST API Token</li> <li>Test the Connection</li> <li>Schedule the Agent</li> </ol>"},{"location":"configuration/java-config/","title":"Java Configuration","text":""},{"location":"configuration/java-config/#java-configuration","title":"Java Configuration","text":""},{"location":"configuration/java-config/#overview","title":"Overview","text":"<p>The EPMware Agent requires Java Runtime Environment (JRE) or Java Development Kit (JDK) version 1.8 or higher. This guide covers Java installation, configuration, and verification for both Windows and Linux systems.</p>"},{"location":"configuration/java-config/#java-requirements","title":"Java Requirements","text":""},{"location":"configuration/java-config/#minimum-requirements","title":"Minimum Requirements","text":"Component Requirement Version Java 1.8 (Java 8) or higher Type JRE or JDK Architecture 64-bit recommended Memory -Xmx2048m minimum heap size"},{"location":"configuration/java-config/#compatibility-matrix","title":"Compatibility Matrix","text":"EPMware Agent Version Minimum Java Recommended Java 1.7.x Java 1.8 Java 11 LTS 1.6.x Java 1.8 Java 8 1.5.x Java 1.7 Java 8"},{"location":"configuration/java-config/#checking-existing-java-installation","title":"Checking Existing Java Installation","text":""},{"location":"configuration/java-config/#windows-check","title":"Windows Check","text":"<pre><code># Command Prompt\njava -version\n\n# PowerShell\njava -version\nGet-Command java\n</code></pre>"},{"location":"configuration/java-config/#linux-check","title":"Linux Check","text":"<pre><code># Check Java version\njava -version\n\n# Find Java installation\nwhich java\nwhereis java\n\n# Check JAVA_HOME\necho $JAVA_HOME\n</code></pre>"},{"location":"configuration/java-config/#cygwin-check-windows","title":"Cygwin Check (Windows)","text":"<pre><code># Open Cygwin Terminal\njava -version\n\n# Check path\nwhich java\n</code></pre> <p>Expected output example: </p><pre><code>java version \"1.8.0_291\"\nJava(TM) SE Runtime Environment (build 1.8.0_291-b10)\nJava HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)\n</code></pre><p></p> <p> Checking Java version in terminal</p>"},{"location":"configuration/java-config/#installing-java","title":"Installing Java","text":""},{"location":"configuration/java-config/#windows-installation","title":"Windows Installation","text":""},{"location":"configuration/java-config/#step-1-download-java","title":"Step 1: Download Java","text":"<ol> <li>Visit Oracle Java Downloads</li> <li>Or use OpenJDK for open-source alternative</li> <li>Select Java 8 or Java 11 LTS</li> <li>Choose Windows x64 installer</li> </ol>"},{"location":"configuration/java-config/#step-2-run-installer","title":"Step 2: Run Installer","text":"<ol> <li>Right-click the downloaded file</li> <li>Select Run as administrator</li> <li>Follow installation wizard:</li> <li>Accept license agreement</li> <li>Choose installation directory (default: <code>C:\\Program Files\\Java\\</code>)</li> <li>Complete installation</li> </ol> <p> Java installation wizard on Windows</p>"},{"location":"configuration/java-config/#step-3-set-java_home","title":"Step 3: Set JAVA_HOME","text":"<ol> <li>Open System Properties:</li> <li>Right-click This PC \u2192 Properties</li> <li>Click Advanced system settings</li> <li> <p>Click Environment Variables</p> </li> <li> <p>Create JAVA_HOME variable:</p> </li> <li>Click New under System variables</li> <li>Variable name: <code>JAVA_HOME</code></li> <li>Variable value: <code>C:\\Program Files\\Java\\jdk1.8.0_291</code></li> </ol> <p> Configuring JAVA_HOME environment variable</p>"},{"location":"configuration/java-config/#step-4-update-path","title":"Step 4: Update PATH","text":"<ol> <li>Edit the Path system variable</li> <li>Add new entry: <code>%JAVA_HOME%\\bin</code></li> <li>Click OK to save</li> </ol>"},{"location":"configuration/java-config/#linux-installation","title":"Linux Installation","text":""},{"location":"configuration/java-config/#option-1-package-manager","title":"Option 1: Package Manager","text":"<p>Red Hat/CentOS/Oracle Linux: </p><pre><code># Install OpenJDK 8\nsudo yum install java-1.8.0-openjdk\n\n# Install OpenJDK 11\nsudo yum install java-11-openjdk\n\n# Set default Java version\nsudo alternatives --config java\n</code></pre><p></p> <p>Ubuntu/Debian: </p><pre><code># Update package index\nsudo apt update\n\n# Install OpenJDK 8\nsudo apt install openjdk-8-jdk\n\n# Install OpenJDK 11\nsudo apt install openjdk-11-jdk\n\n# Set default Java version\nsudo update-alternatives --config java\n</code></pre><p></p>"},{"location":"configuration/java-config/#option-2-manual-installation","title":"Option 2: Manual Installation","text":"<pre><code># Download Java tar.gz from Oracle\nwget https://download.oracle.com/java/8/latest/jdk-8u291-linux-x64.tar.gz\n\n# Extract to /opt\nsudo tar -xzf jdk-8u291-linux-x64.tar.gz -C /opt/\n\n# Create symbolic link\nsudo ln -s /opt/jdk1.8.0_291 /opt/java\n</code></pre>"},{"location":"configuration/java-config/#set-environment-variables-linux","title":"Set Environment Variables (Linux)","text":"<p>Edit <code>/etc/profile</code> or <code>~/.bashrc</code>:</p> <pre><code># Add to profile\nexport JAVA_HOME=/opt/java\nexport PATH=$JAVA_HOME/bin:$PATH\n\n# Reload profile\nsource /etc/profile\n</code></pre>"},{"location":"configuration/java-config/#configuring-java-for-epmware-agent","title":"Configuring Java for EPMware Agent","text":""},{"location":"configuration/java-config/#memory-settings","title":"Memory Settings","text":"<p>Create or edit <code>java.properties</code> in agent directory:</p> <pre><code># Java memory configuration\njava.xms=512m\njava.xmx=2048m\njava.maxpermsize=256m\njava.gc.type=G1GC\n</code></pre>"},{"location":"configuration/java-config/#security-configuration","title":"Security Configuration","text":"<p>For secure environments, configure Java security:</p> <pre><code># Edit java.security file\n$JAVA_HOME/lib/security/java.security\n\n# Add EPMware certificates to truststore\nkeytool -importcert -file epmware.crt -keystore $JAVA_HOME/lib/security/cacerts\n</code></pre>"},{"location":"configuration/java-config/#verification-steps","title":"Verification Steps","text":""},{"location":"configuration/java-config/#step-1-verify-java-installation","title":"Step 1: Verify Java Installation","text":"<pre><code># Check version\njava -version\n\n# Check compiler (if JDK)\njavac -version\n\n# Check Java home\necho $JAVA_HOME\n</code></pre>"},{"location":"configuration/java-config/#step-2-test-java-from-cygwin-windows","title":"Step 2: Test Java from Cygwin (Windows)","text":"<pre><code># Open Cygwin Terminal\n$ java -version\n$ echo $JAVA_HOME\n$ which java\n</code></pre> <p> Testing Java accessibility from Cygwin</p>"},{"location":"configuration/java-config/#step-3-verify-classpath","title":"Step 3: Verify Classpath","text":"<pre><code># Check classpath\necho $CLASSPATH\n\n# If empty, that's OK for EPMware Agent\n</code></pre>"},{"location":"configuration/java-config/#step-4-test-java-execution","title":"Step 4: Test Java Execution","text":"<p>Create a simple test:</p> <pre><code># Create test file\necho 'public class Test { public static void main(String[] args) { System.out.println(\"Java is working!\"); } }' &gt; Test.java\n\n# Compile (if JDK)\njavac Test.java\n\n# Run\njava Test\n</code></pre> <p>Expected output: </p><pre><code>Java is working!\n</code></pre><p></p>"},{"location":"configuration/java-config/#java-configuration-for-specific-applications","title":"Java Configuration for Specific Applications","text":""},{"location":"configuration/java-config/#hfm-integration","title":"HFM Integration","text":"<p>HFM may require specific Java versions:</p> <pre><code># HFM-specific Java settings\nhfm.java.home=/opt/java/jdk1.8.0_202\nhfm.java.opts=-Xmx4096m -XX:MaxPermSize=512m\n</code></pre>"},{"location":"configuration/java-config/#cloud-epm-integration","title":"Cloud EPM Integration","text":"<p>For EPM Automate compatibility:</p> <pre><code># EPM Automate Java requirements\nepmautomate.java.version=1.8\nepmautomate.java.tls.version=TLSv1.2\n</code></pre>"},{"location":"configuration/java-config/#troubleshooting-java-issues","title":"Troubleshooting Java Issues","text":""},{"location":"configuration/java-config/#common-problems","title":"Common Problems","text":"Issue Cause Solution \"java: command not found\" Java not in PATH Add Java bin directory to PATH \"JAVA_HOME is not set\" Missing environment variable Set JAVA_HOME to Java installation directory \"Unsupported major.minor version\" Wrong Java version Install required Java version \"Could not create JVM\" Insufficient memory Reduce -Xmx value or increase system memory"},{"location":"configuration/java-config/#windows-specific-issues","title":"Windows-Specific Issues","text":""},{"location":"configuration/java-config/#issue-java-not-found-in-cygwin","title":"Issue: Java Not Found in Cygwin","text":"<p>Solution: </p><pre><code># Add to ~/.bashrc in Cygwin\nexport JAVA_HOME=\"/cygdrive/c/Program Files/Java/jdk1.8.0_291\"\nexport PATH=$JAVA_HOME/bin:$PATH\n\n# Reload\nsource ~/.bashrc\n</code></pre><p></p>"},{"location":"configuration/java-config/#issue-space-in-path","title":"Issue: Space in Path","text":"<p>Solution: </p><pre><code># Use quotes or escape spaces\nexport JAVA_HOME=\"/cygdrive/c/Program Files/Java/jdk1.8.0_291\"\n# Or\nexport JAVA_HOME=/cygdrive/c/Program\\ Files/Java/jdk1.8.0_291\n</code></pre><p></p>"},{"location":"configuration/java-config/#linux-specific-issues","title":"Linux-Specific Issues","text":""},{"location":"configuration/java-config/#issue-multiple-java-versions","title":"Issue: Multiple Java Versions","text":"<p>Solution: </p><pre><code># List all Java installations\nupdate-alternatives --list java\n\n# Set default\nsudo update-alternatives --config java\n\n# Verify\njava -version\n</code></pre><p></p>"},{"location":"configuration/java-config/#issue-permission-denied","title":"Issue: Permission Denied","text":"<p>Solution: </p><pre><code># Check permissions\nls -la $(which java)\n\n# Fix if needed\nsudo chmod 755 /usr/bin/java\n</code></pre><p></p>"},{"location":"configuration/java-config/#performance-optimization","title":"Performance Optimization","text":""},{"location":"configuration/java-config/#jvm-tuning","title":"JVM Tuning","text":"<p>For optimal agent performance:</p> <pre><code># Recommended JVM settings\n-Xms1024m\n-Xmx2048m\n-XX:+UseG1GC\n-XX:MaxGCPauseMillis=200\n-XX:ParallelGCThreads=4\n-XX:ConcGCThreads=2\n-XX:InitiatingHeapOccupancyPercent=70\n</code></pre>"},{"location":"configuration/java-config/#monitoring-java-memory","title":"Monitoring Java Memory","text":"<pre><code># Check Java process memory\njps -v\n\n# Monitor heap usage\njstat -gc &lt;pid&gt; 1000\n\n# Generate heap dump if needed\njmap -dump:format=b,file=heap.bin &lt;pid&gt;\n</code></pre>"},{"location":"configuration/java-config/#security-considerations","title":"Security Considerations","text":""},{"location":"configuration/java-config/#tlsssl-configuration","title":"TLS/SSL Configuration","text":"<p>For secure communications:</p> <pre><code># Enable TLS 1.2 and 1.3\n-Dhttps.protocols=TLSv1.2,TLSv1.3\n-Djdk.tls.client.protocols=TLSv1.2,TLSv1.3\n\n# Disable weak ciphers\n-Djdk.tls.disabledAlgorithms=SSLv3,RC4,DES,MD5withRSA\n</code></pre>"},{"location":"configuration/java-config/#certificate-management","title":"Certificate Management","text":"<pre><code># List certificates in truststore\nkeytool -list -keystore $JAVA_HOME/lib/security/cacerts\n\n# Import certificate\nkeytool -importcert -alias epmware -file epmware.crt \\\n  -keystore $JAVA_HOME/lib/security/cacerts \\\n  -storepass changeit\n</code></pre>"},{"location":"configuration/java-config/#best-practices","title":"Best Practices","text":""},{"location":"configuration/java-config/#installation-guidelines","title":"Installation Guidelines","text":"<ol> <li>Use LTS Versions - Prefer Java 8 or 11 LTS for stability</li> <li>64-bit Architecture - Always use 64-bit Java for better performance</li> <li>Consistent Versions - Use same Java version across all agents</li> <li>Regular Updates - Keep Java updated for security patches</li> </ol>"},{"location":"configuration/java-config/#environment-management","title":"Environment Management","text":"<ol> <li>Document Configuration - Record Java version and settings</li> <li>Test Changes - Verify Java changes in non-production first</li> <li>Monitor Performance - Track JVM metrics regularly</li> <li>Plan Upgrades - Schedule Java updates during maintenance windows</li> </ol>"},{"location":"configuration/java-config/#validation-checklist","title":"Validation Checklist","text":"<p>Before proceeding with agent installation:</p> <ul> <li>[ ] Java 1.8+ is installed</li> <li>[ ] <code>java -version</code> returns expected version</li> <li>[ ] JAVA_HOME is set correctly</li> <li>[ ] Java is in system PATH</li> <li>[ ] Java works from Cygwin (Windows)</li> <li>[ ] Sufficient memory for JVM heap</li> <li>[ ] TLS 1.2 is supported</li> <li>[ ] Required certificates are installed</li> </ul> <p>Java Configuration Complete</p> <p>Once Java is properly configured, proceed to Agent Installation to deploy the EPMware Agent files.</p>"},{"location":"configuration/java-config/#next-steps","title":"Next Steps","text":"<ol> <li>Download Agent Files - Obtain the agent package</li> <li>Extract and Deploy - Set up agent structure</li> <li>Configure Properties - Configure agent settings</li> </ol>"},{"location":"configuration/rest-token/","title":"REST API Token","text":""},{"location":"configuration/rest-token/#rest-api-token-configuration","title":"REST API Token Configuration","text":""},{"location":"configuration/rest-token/#overview","title":"Overview","text":"<p>EPMware Agents use REST API tokens for secure authentication with the EPMware application. This token-based approach eliminates the need to store passwords and provides a secure method for agent-to-application communication.</p>"},{"location":"configuration/rest-token/#understanding-rest-tokens","title":"Understanding REST Tokens","text":""},{"location":"configuration/rest-token/#what-is-a-rest-api-token","title":"What is a REST API Token?","text":"<p>A REST API token is a 36-character alphanumeric string that serves as a unique identifier for authentication. The agent uses this token to:</p> <ul> <li>Authenticate with the EPMware application</li> <li>Poll for pending deployment tasks</li> <li>Report deployment status and results</li> <li>Maintain secure communication</li> </ul>"},{"location":"configuration/rest-token/#token-format","title":"Token Format","text":"<p>EPMware tokens follow the UUID format: </p><pre><code>2e6d4103-5145-4c30-9837-ac6d14797523\n</code></pre><p></p>"},{"location":"configuration/rest-token/#security-benefits","title":"Security Benefits","text":"<ul> <li>No Password Storage - Tokens eliminate password storage in configuration files</li> <li>Revocable Access - Tokens can be revoked without changing passwords</li> <li>Audit Trail - All token usage is logged for security auditing</li> <li>Limited Scope - Tokens have specific permissions unlike full user credentials</li> </ul>"},{"location":"configuration/rest-token/#generating-a-rest-token","title":"Generating a REST Token","text":""},{"location":"configuration/rest-token/#prerequisites","title":"Prerequisites","text":"<p>Before generating a token: - [ ] Have administrator access to EPMware - [ ] Created a dedicated user account for the agent - [ ] Assigned appropriate permissions to the user</p>"},{"location":"configuration/rest-token/#step-by-step-token-generation","title":"Step-by-Step Token Generation","text":""},{"location":"configuration/rest-token/#step-1-navigate-to-user-management","title":"Step 1: Navigate to User Management","text":"<ol> <li>Log into the EPMware application</li> <li>Navigate to Administration \u2192 Security \u2192 Users</li> </ol> <p> User Management screen in EPMware</p>"},{"location":"configuration/rest-token/#step-2-select-the-agent-user","title":"Step 2: Select the Agent User","text":"<ol> <li>Locate the user account designated for agent operations</li> <li>Common naming conventions:</li> <li><code>svc_epmware_agent</code></li> <li><code>agent_[servername]</code></li> <li><code>epmware_service</code></li> </ol> <p>Dedicated Service Account</p> <p>Always use a dedicated service account for the agent rather than personal user accounts. This ensures continuity and proper audit trails.</p>"},{"location":"configuration/rest-token/#step-3-generate-token","title":"Step 3: Generate Token","text":"<ol> <li>Right-click on the user record</li> <li>Select Generate Token from the context menu</li> </ol> <p> Right-click menu showing Generate Token option</p>"},{"location":"configuration/rest-token/#step-4-copy-and-save-token","title":"Step 4: Copy and Save Token","text":"<ol> <li>The token will be displayed in a dialog box</li> <li>Important: Copy the token immediately - it won't be shown again</li> <li>Store the token securely</li> </ol> <p> Token generation dialog - copy this token immediately</p>"},{"location":"configuration/rest-token/#user-account-setup","title":"User Account Setup","text":""},{"location":"configuration/rest-token/#creating-an-agent-user","title":"Creating an Agent User","text":"<p>If you haven't created a dedicated user for the agent:</p> <ol> <li>Click Add User in the User Management screen</li> <li>Configure the user with these recommended settings:</li> </ol> Field Recommended Value Username <code>svc_epmware_agent</code> Full Name EPMware Agent Service Email <code>epmware-agent@company.com</code> User Type Service Account Password Never Expires \u2713 Checked Account Enabled \u2713 Checked"},{"location":"configuration/rest-token/#required-permissions","title":"Required Permissions","text":"<p>The agent user needs specific permissions:</p>"},{"location":"configuration/rest-token/#minimum-permissions","title":"Minimum Permissions","text":"<ul> <li>Application Access - Read access to target applications</li> <li>Deployment Rights - Execute deployment tasks</li> <li>API Access - REST API usage permission</li> </ul>"},{"location":"configuration/rest-token/#recommended-permissions","title":"Recommended Permissions","text":"Permission Purpose Import Metadata Import hierarchies from target applications Deploy Metadata Deploy approved changes to targets View Requests Access deployment queue View Logs Read deployment logs Execute Scripts Run deployment scripts"},{"location":"configuration/rest-token/#security-class-assignment","title":"Security Class Assignment","text":"<p>Assign the agent user to appropriate security classes:</p> <pre><code>-- Example security configuration\nGRANT epmware_agent_role TO svc_epmware_agent;\nGRANT deployment_executor TO svc_epmware_agent;\nGRANT api_access TO svc_epmware_agent;\n</code></pre>"},{"location":"configuration/rest-token/#token-management","title":"Token Management","text":""},{"location":"configuration/rest-token/#token-storage","title":"Token Storage","text":"<p>Store tokens securely:</p>"},{"location":"configuration/rest-token/#dos","title":"Do's","text":"<ul> <li>\u2713 Store in encrypted configuration management systems</li> <li>\u2713 Use environment variables for sensitive data</li> <li>\u2713 Implement file system permissions</li> <li>\u2713 Keep backup in secure password manager</li> </ul>"},{"location":"configuration/rest-token/#donts","title":"Don'ts","text":"<ul> <li>\u2717 Never commit tokens to version control</li> <li>\u2717 Avoid storing in plain text files</li> <li>\u2717 Don't share tokens between environments</li> <li>\u2717 Never expose tokens in logs or error messages</li> </ul>"},{"location":"configuration/rest-token/#token-rotation","title":"Token Rotation","text":"<p>Implement regular token rotation for security:</p>"},{"location":"configuration/rest-token/#rotation-schedule","title":"Rotation Schedule","text":"Environment Rotation Frequency Production Every 90 days UAT/Test Every 180 days Development As needed"},{"location":"configuration/rest-token/#rotation-process","title":"Rotation Process","text":"<ol> <li>Generate New Token</li> <li>Create new token in EPMware</li> <li> <p>Note generation timestamp</p> </li> <li> <p>Update Configuration </p><pre><code># Update agent.properties\new.portal.token=new-token-value-here\n</code></pre><p></p> </li> <li> <p>Restart Agent</p> </li> <li>Stop the agent service</li> <li>Update configuration file</li> <li> <p>Start the agent service</p> </li> <li> <p>Verify Operation</p> </li> <li>Check agent logs for successful authentication</li> <li> <p>Monitor first deployment after rotation</p> </li> <li> <p>Revoke Old Token</p> </li> <li>Wait 24 hours to ensure stability</li> <li>Revoke previous token in EPMware</li> </ol>"},{"location":"configuration/rest-token/#token-revocation","title":"Token Revocation","text":"<p>To revoke a compromised or expired token:</p> <ol> <li>Navigate to Administration \u2192 Security \u2192 Users</li> <li>Right-click on the user</li> <li>Select Revoke Token</li> <li>Confirm revocation</li> </ol> <p> Revoking an existing token</p> <p>Immediate Effect</p> <p>Token revocation takes effect immediately. Ensure you have a replacement token ready before revoking the active one.</p>"},{"location":"configuration/rest-token/#using-the-token","title":"Using the Token","text":""},{"location":"configuration/rest-token/#configuration-file","title":"Configuration File","text":"<p>Add the token to your <code>agent.properties</code> file:</p> <pre><code># REST API Token Configuration\new.portal.token=2e6d4103-5145-4c30-9837-ac6d14797523\n</code></pre>"},{"location":"configuration/rest-token/#environment-variables","title":"Environment Variables","text":"<p>For enhanced security, use environment variables:</p> <pre><code># Set environment variable\nexport EPMWARE_TOKEN=2e6d4103-5145-4c30-9837-ac6d14797523\n\n# Reference in agent.properties\new.portal.token=${EPMWARE_TOKEN}\n</code></pre>"},{"location":"configuration/rest-token/#testing-token-authentication","title":"Testing Token Authentication","text":"<p>Verify token validity before starting the agent:</p> <pre><code># Test authentication\ncurl -H \"Authorization: Bearer YOUR-TOKEN-HERE\" \\\n     https://epmware-server.com/api/v1/auth/verify\n\n# Expected response\n{\"status\": \"authenticated\", \"user\": \"svc_epmware_agent\"}\n</code></pre>"},{"location":"configuration/rest-token/#troubleshooting-token-issues","title":"Troubleshooting Token Issues","text":""},{"location":"configuration/rest-token/#common-problems","title":"Common Problems","text":"Issue Cause Solution Authentication Failed Invalid or expired token Generate new token Permission Denied Insufficient user permissions Review user security settings Token Not Accepted Wrong environment Verify server URL matches token Intermittent Failures Token rate limited Implement retry logic"},{"location":"configuration/rest-token/#validation-checklist","title":"Validation Checklist","text":"<ul> <li>[ ] Token is exactly 36 characters</li> <li>[ ] No extra spaces or characters</li> <li>[ ] Token matches the server environment</li> <li>[ ] User account is active</li> <li>[ ] User has required permissions</li> <li>[ ] Token hasn't been revoked</li> </ul>"},{"location":"configuration/rest-token/#debug-authentication","title":"Debug Authentication","text":"<p>Enable debug logging to troubleshoot:</p> <pre><code># Add to agent.properties\nagent.log.level=DEBUG\nagent.log.auth=true\n</code></pre> <p>Check logs for authentication details: </p><pre><code>tail -f logs/agent.log | grep AUTH\n</code></pre><p></p>"},{"location":"configuration/rest-token/#security-best-practices","title":"Security Best Practices","text":""},{"location":"configuration/rest-token/#token-security-guidelines","title":"Token Security Guidelines","text":"<ol> <li>Principle of Least Privilege</li> <li>Grant only necessary permissions</li> <li>Use separate tokens per environment</li> <li> <p>Implement role-based access control</p> </li> <li> <p>Token Lifecycle Management</p> </li> <li>Document token creation/rotation dates</li> <li>Maintain token inventory</li> <li> <p>Implement automated rotation reminders</p> </li> <li> <p>Monitoring and Auditing</p> </li> <li>Monitor token usage patterns</li> <li>Alert on authentication failures</li> <li> <p>Review audit logs regularly</p> </li> <li> <p>Incident Response</p> </li> <li>Have revocation procedures ready</li> <li>Maintain emergency token replacement process</li> <li>Document security incident procedures</li> </ol>"},{"location":"configuration/rest-token/#compliance-considerations","title":"Compliance Considerations","text":"<p>Ensure token management meets compliance requirements:</p> <ul> <li>SOX: Implement separation of duties</li> <li>PCI-DSS: Encrypt tokens at rest and in transit</li> <li>GDPR: Include tokens in data protection policies</li> <li>HIPAA: Ensure tokens meet security rule requirements</li> </ul>"},{"location":"configuration/rest-token/#multi-environment-token-management","title":"Multi-Environment Token Management","text":""},{"location":"configuration/rest-token/#environment-separation","title":"Environment Separation","text":"<p>Use different tokens for each environment:</p> <pre><code># Development\new.portal.token.dev=dev-token-value\n\n# Test/UAT\new.portal.token.uat=uat-token-value\n\n# Production\new.portal.token.prod=prod-token-value\n</code></pre>"},{"location":"configuration/rest-token/#token-naming-convention","title":"Token Naming Convention","text":"<p>Implement consistent naming: - <code>[environment]-[application]-[purpose]-token</code> - Example: <code>prod-hfm-deploy-token</code></p>"},{"location":"configuration/rest-token/#api-token-vs-user-credentials","title":"API Token vs User Credentials","text":""},{"location":"configuration/rest-token/#comparison","title":"Comparison","text":"Aspect API Token User Credentials Security Higher (limited scope) Lower (full access) Management Easier to rotate Requires password changes Audit Clear service attribution Mixed with user activity Automation Designed for automation Not recommended Revocation Instant and specific Affects all user access"},{"location":"configuration/rest-token/#next-steps","title":"Next Steps","text":"<p>After configuring your REST token:</p> <ol> <li>Update Agent Properties with the token</li> <li>Test the Connection to verify authentication</li> <li>Configure Service startup settings</li> <li>Monitor Agent Logs for authentication status</li> </ol>"},{"location":"configuration/service-config/","title":"Service Configuration","text":""},{"location":"configuration/service-config/#service-configuration","title":"Service Configuration","text":""},{"location":"configuration/service-config/#overview","title":"Overview","text":"<p>The <code>ew_target_service.sh</code> script is the primary mechanism for starting and managing the EPMware Agent. This guide covers configuration options, customization, and platform-specific setup.</p>"},{"location":"configuration/service-config/#understanding-the-service-script","title":"Understanding the Service Script","text":""},{"location":"configuration/service-config/#default-script-content","title":"Default Script Content","text":"<p>The default <code>ew_target_service.sh</code> contains:</p> <pre><code>#!/bin/bash\n#mvn spring-boot:run\nHOME=/home/Administrator\ncd $HOME\n#java -jar epmware-agent.jar --spring.config.name=agent &gt; /dev/null 2&gt;&amp;1\njava -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"configuration/service-config/#script-components","title":"Script Components","text":"Component Purpose Customizable <code>#!/bin/bash</code> Shell interpreter No <code>HOME=/home/Administrator</code> Working directory Yes - Must match installation <code>cd $HOME</code> Change to agent directory No <code>java -jar</code> command Start the agent Yes - Add JVM options"},{"location":"configuration/service-config/#basic-configuration","title":"Basic Configuration","text":""},{"location":"configuration/service-config/#setting-the-home-directory","title":"Setting the HOME Directory","text":"<p>The HOME variable must match your installation directory:</p> <p>Windows (Cygwin): </p><pre><code>HOME=/home/Administrator  # Default\n# Or for custom user\nHOME=/home/hfmsvcaccount\n</code></pre><p></p> <p>Linux: </p><pre><code>HOME=/home/epmadmin\n# Or\nHOME=/opt/epmware/agent\n</code></pre><p></p>"},{"location":"configuration/service-config/#verification","title":"Verification","text":"<pre><code># Verify path exists\nls -la /home/Administrator\n\n# Test script modification\n./ew_target_service.sh\n</code></pre>"},{"location":"configuration/service-config/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"configuration/service-config/#jvm-memory-settings","title":"JVM Memory Settings","text":"<p>Configure memory allocation for the agent:</p> <pre><code>#!/bin/bash\nHOME=/home/Administrator\ncd $HOME\n\n# Memory configuration\nJAVA_OPTS=\"-Xms512m -Xmx2048m\"\nJAVA_OPTS=\"$JAVA_OPTS -XX:MaxMetaspaceSize=256m\"\n\njava $JAVA_OPTS -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"configuration/service-config/#memory-recommendations","title":"Memory Recommendations","text":"Environment Heap Min (-Xms) Heap Max (-Xmx) Metaspace Development 256m 512m 128m Test 512m 1024m 256m Production 1024m 2048m 512m Large Scale 2048m 4096m 1024m"},{"location":"configuration/service-config/#logging-configuration","title":"Logging Configuration","text":"<p>Control logging output and location:</p> <pre><code>#!/bin/bash\nHOME=/home/Administrator\ncd $HOME\n\n# Logging configuration\nLOG_DIR=\"$HOME/logs\"\nLOG_FILE=\"$LOG_DIR/agent.log\"\n\n# Ensure log directory exists\nmkdir -p $LOG_DIR\n\n# Start with logging options\njava -Dlogging.file.name=$LOG_FILE \\\n     -Dlogging.level.root=INFO \\\n     -Dlogging.level.com.epmware=DEBUG \\\n     -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"configuration/service-config/#environment-variables","title":"Environment Variables","text":"<p>Set environment-specific variables:</p> <pre><code>#!/bin/bash\nHOME=/home/Administrator\ncd $HOME\n\n# Environment variables\nexport EPMWARE_ENV=production\nexport AGENT_ID=agent01\nexport TZ=America/New_York\n\n# Java settings\nexport JAVA_HOME=/usr/java/jdk1.8.0_291\nexport PATH=$JAVA_HOME/bin:$PATH\n\n# Agent settings\nAGENT_OPTS=\"--spring.profiles.active=$EPMWARE_ENV\"\nAGENT_OPTS=\"$AGENT_OPTS --agent.id=$AGENT_ID\"\n\njava -jar epmware-agent.jar --spring.config.name=agent $AGENT_OPTS\n</code></pre>"},{"location":"configuration/service-config/#platform-specific-configuration","title":"Platform-Specific Configuration","text":""},{"location":"configuration/service-config/#windows-service-script","title":"Windows Service Script","text":"<p>Enhanced script for Windows (Cygwin):</p> <pre><code>#!/bin/bash\n# ew_target_service.sh - Windows version\n\n# Configuration\nHOME=/home/Administrator\nJAVA_CMD=\"/cygdrive/c/Program Files/Java/jdk1.8.0_291/bin/java\"\nAGENT_JAR=\"epmware-agent.jar\"\nPID_FILE=\"$HOME/agent.pid\"\n\n# Change to home directory\ncd $HOME\n\n# Check if already running\nif [ -f \"$PID_FILE\" ]; then\n    PID=$(cat $PID_FILE)\n    if ps -p $PID &gt; /dev/null 2&gt;&amp;1; then\n        echo \"Agent already running with PID: $PID\"\n        exit 1\n    fi\nfi\n\n# Start agent and save PID\n\"$JAVA_CMD\" -jar $AGENT_JAR --spring.config.name=agent &amp;\necho $! &gt; $PID_FILE\necho \"Agent started with PID: $(cat $PID_FILE)\"\n</code></pre>"},{"location":"configuration/service-config/#linux-service-script","title":"Linux Service Script","text":"<p>Enhanced script for Linux with systemd integration:</p> <pre><code>#!/bin/bash\n# ew_target_service.sh - Linux version\n\n# Configuration\nHOME=/home/epmadmin\nJAVA_CMD=$(which java)\nAGENT_JAR=\"epmware-agent.jar\"\nPID_FILE=\"/var/run/epmware-agent.pid\"\nLOG_FILE=\"/var/log/epmware/agent.log\"\n\n# Ensure directories exist\nmkdir -p $(dirname $LOG_FILE)\nmkdir -p $(dirname $PID_FILE)\n\n# Change to home directory\ncd $HOME\n\n# Function to start agent\nstart_agent() {\n    if [ -f \"$PID_FILE\" ]; then\n        PID=$(cat $PID_FILE)\n        if ps -p $PID &gt; /dev/null 2&gt;&amp;1; then\n            echo \"Agent already running with PID: $PID\"\n            return 1\n        fi\n    fi\n\n    nohup $JAVA_CMD -jar $AGENT_JAR --spring.config.name=agent \\\n          &gt; $LOG_FILE 2&gt;&amp;1 &amp;\n    echo $! &gt; $PID_FILE\n    echo \"Agent started with PID: $(cat $PID_FILE)\"\n}\n\n# Function to stop agent\nstop_agent() {\n    if [ -f \"$PID_FILE\" ]; then\n        PID=$(cat $PID_FILE)\n        kill $PID\n        rm -f $PID_FILE\n        echo \"Agent stopped\"\n    else\n        echo \"Agent not running\"\n    fi\n}\n\n# Main logic\ncase \"$1\" in\n    start)\n        start_agent\n        ;;\n    stop)\n        stop_agent\n        ;;\n    restart)\n        stop_agent\n        sleep 2\n        start_agent\n        ;;\n    *)\n        echo \"Usage: $0 {start|stop|restart}\"\n        exit 1\n        ;;\nesac\n</code></pre>"},{"location":"configuration/service-config/#output-management","title":"Output Management","text":""},{"location":"configuration/service-config/#redirecting-output","title":"Redirecting Output","text":"<p>Control where agent output goes:</p> <pre><code># Discard all output (silent mode)\njava -jar epmware-agent.jar --spring.config.name=agent &gt; /dev/null 2&gt;&amp;1\n\n# Log to file\njava -jar epmware-agent.jar --spring.config.name=agent &gt; agent.out 2&gt;&amp;1\n\n# Separate stdout and stderr\njava -jar epmware-agent.jar --spring.config.name=agent \\\n     &gt; stdout.log 2&gt; stderr.log\n\n# Append to existing log\njava -jar epmware-agent.jar --spring.config.name=agent &gt;&gt; agent.log 2&gt;&amp;1\n</code></pre>"},{"location":"configuration/service-config/#log-rotation","title":"Log Rotation","text":"<p>Implement log rotation:</p> <pre><code>#!/bin/bash\nHOME=/home/Administrator\ncd $HOME\n\n# Log rotation settings\nLOG_FILE=\"logs/agent-console.log\"\nMAX_SIZE=104857600  # 100MB\nBACKUP_COUNT=5\n\n# Check log size and rotate if needed\nif [ -f \"$LOG_FILE\" ]; then\n    SIZE=$(stat -c%s \"$LOG_FILE\")\n    if [ $SIZE -gt $MAX_SIZE ]; then\n        for i in $(seq $((BACKUP_COUNT-1)) -1 1); do\n            [ -f \"$LOG_FILE.$i\" ] &amp;&amp; mv \"$LOG_FILE.$i\" \"$LOG_FILE.$((i+1))\"\n        done\n        mv \"$LOG_FILE\" \"$LOG_FILE.1\"\n    fi\nfi\n\n# Start agent with logging\njava -jar epmware-agent.jar --spring.config.name=agent &gt;&gt; $LOG_FILE 2&gt;&amp;1\n</code></pre>"},{"location":"configuration/service-config/#error-handling","title":"Error Handling","text":""},{"location":"configuration/service-config/#basic-error-handling","title":"Basic Error Handling","text":"<p>Add error checking to the script:</p> <pre><code>#!/bin/bash\nset -e  # Exit on error\n\nHOME=/home/Administrator\ncd $HOME || exit 1\n\n# Check Java availability\nif ! command -v java &amp;&gt; /dev/null; then\n    echo \"ERROR: Java not found in PATH\"\n    exit 1\nfi\n\n# Check JAR file exists\nif [ ! -f \"epmware-agent.jar\" ]; then\n    echo \"ERROR: epmware-agent.jar not found\"\n    exit 1\nfi\n\n# Check properties file exists\nif [ ! -f \"agent.properties\" ]; then\n    echo \"ERROR: agent.properties not found\"\n    exit 1\nfi\n\n# Start agent\njava -jar epmware-agent.jar --spring.config.name=agent || {\n    echo \"ERROR: Failed to start agent\"\n    exit 1\n}\n</code></pre>"},{"location":"configuration/service-config/#retry-logic","title":"Retry Logic","text":"<p>Implement automatic retry on failure:</p> <pre><code>#!/bin/bash\nHOME=/home/Administrator\ncd $HOME\n\nMAX_RETRIES=3\nRETRY_DELAY=10\nRETRY_COUNT=0\n\nwhile [ $RETRY_COUNT -lt $MAX_RETRIES ]; do\n    echo \"Starting agent (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)...\"\n\n    java -jar epmware-agent.jar --spring.config.name=agent\n    EXIT_CODE=$?\n\n    if [ $EXIT_CODE -eq 0 ]; then\n        echo \"Agent terminated normally\"\n        break\n    else\n        echo \"Agent failed with exit code $EXIT_CODE\"\n        RETRY_COUNT=$((RETRY_COUNT + 1))\n\n        if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then\n            echo \"Retrying in $RETRY_DELAY seconds...\"\n            sleep $RETRY_DELAY\n        else\n            echo \"Maximum retries reached. Giving up.\"\n            exit 1\n        fi\n    fi\ndone\n</code></pre>"},{"location":"configuration/service-config/#performance-tuning","title":"Performance Tuning","text":""},{"location":"configuration/service-config/#jvm-options","title":"JVM Options","text":"<p>Optimize JVM performance:</p> <pre><code>#!/bin/bash\nHOME=/home/Administrator\ncd $HOME\n\n# Performance tuning options\nJVM_OPTS=\"-server\"                           # Server mode\nJVM_OPTS=\"$JVM_OPTS -Xms1024m\"              # Initial heap\nJVM_OPTS=\"$JVM_OPTS -Xmx2048m\"              # Maximum heap\nJVM_OPTS=\"$JVM_OPTS -XX:+UseG1GC\"           # G1 garbage collector\nJVM_OPTS=\"$JVM_OPTS -XX:MaxGCPauseMillis=200\"  # GC pause target\nJVM_OPTS=\"$JVM_OPTS -XX:+HeapDumpOnOutOfMemoryError\"  # Heap dump on OOM\nJVM_OPTS=\"$JVM_OPTS -XX:HeapDumpPath=$HOME/logs\"      # Heap dump location\n\njava $JVM_OPTS -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"configuration/service-config/#network-optimization","title":"Network Optimization","text":"<p>Configure network settings:</p> <pre><code># Network tuning\nNET_OPTS=\"-Djava.net.preferIPv4Stack=true\"\nNET_OPTS=\"$NET_OPTS -Dsun.net.client.defaultConnectTimeout=30000\"\nNET_OPTS=\"$NET_OPTS -Dsun.net.client.defaultReadTimeout=30000\"\n\njava $NET_OPTS -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"configuration/service-config/#security-configuration","title":"Security Configuration","text":""},{"location":"configuration/service-config/#running-with-limited-privileges","title":"Running with Limited Privileges","text":"<p>Use sudo for specific operations:</p> <pre><code>#!/bin/bash\nHOME=/home/epmadmin\ncd $HOME\n\n# Drop privileges after binding to ports\nRUNAS_USER=epmware\nRUNAS_GROUP=epmware\n\n# Start as root, then switch user\nsudo -u $RUNAS_USER -g $RUNAS_GROUP \\\n    java -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"configuration/service-config/#secure-environment-variables","title":"Secure Environment Variables","text":"<p>Protect sensitive information:</p> <pre><code>#!/bin/bash\nHOME=/home/Administrator\ncd $HOME\n\n# Load secure environment\nif [ -f \"$HOME/.env.secure\" ]; then\n    # Ensure file has restricted permissions\n    chmod 600 $HOME/.env.secure\n    source $HOME/.env.secure\nfi\n\n# Use environment variables for sensitive data\njava -Dew.portal.token=\"$EPMWARE_TOKEN\" \\\n     -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"configuration/service-config/#multi-instance-configuration","title":"Multi-Instance Configuration","text":""},{"location":"configuration/service-config/#running-multiple-agents","title":"Running Multiple Agents","text":"<p>Configure script for multiple instances:</p> <pre><code>#!/bin/bash\n# Multi-instance service script\n\nINSTANCE=$1\nif [ -z \"$INSTANCE\" ]; then\n    echo \"Usage: $0 &lt;instance_name&gt;\"\n    exit 1\nfi\n\n# Instance-specific configuration\nBASE_DIR=/opt/epmware\nINSTANCE_DIR=$BASE_DIR/$INSTANCE\nCONFIG_FILE=$INSTANCE_DIR/agent.properties\nPID_FILE=$INSTANCE_DIR/agent.pid\n\ncd $INSTANCE_DIR\n\njava -Dspring.config.location=$CONFIG_FILE \\\n     -Dagent.instance=$INSTANCE \\\n     -jar $BASE_DIR/epmware-agent.jar\n</code></pre>"},{"location":"configuration/service-config/#monitoring-integration","title":"Monitoring Integration","text":""},{"location":"configuration/service-config/#health-check-endpoint","title":"Health Check Endpoint","text":"<p>Add health monitoring:</p> <pre><code>#!/bin/bash\nHOME=/home/Administrator\ncd $HOME\n\n# Enable health endpoint\nHEALTH_OPTS=\"-Dmanagement.endpoint.health.enabled=true\"\nHEALTH_OPTS=\"$HEALTH_OPTS -Dmanagement.server.port=8081\"\n\njava $HEALTH_OPTS -jar epmware-agent.jar --spring.config.name=agent &amp;\n\n# Save PID for monitoring\necho $! &gt; agent.pid\n\n# Wait and check health\nsleep 10\ncurl -s http://localhost:8081/actuator/health\n</code></pre>"},{"location":"configuration/service-config/#troubleshooting-service-issues","title":"Troubleshooting Service Issues","text":""},{"location":"configuration/service-config/#common-problems","title":"Common Problems","text":"Issue Cause Solution Script not executable Missing execute permission <code>chmod +x ew_target_service.sh</code> Wrong HOME directory Path doesn't match installation Update HOME variable Java not found PATH not set correctly Add Java to PATH or use full path Permission denied Insufficient privileges Check file ownership and permissions"},{"location":"configuration/service-config/#debug-mode","title":"Debug Mode","text":"<p>Enable detailed debugging:</p> <pre><code>#!/bin/bash\nset -x  # Enable debug output\n\nHOME=/home/Administrator\ncd $HOME\n\n# Debug environment\necho \"Current user: $(whoami)\"\necho \"Current directory: $(pwd)\"\necho \"Java version: $(java -version 2&gt;&amp;1)\"\necho \"Files in directory: $(ls -la)\"\n\n# Start with debug logging\njava -Dagent.debug=true \\\n     -Dlogging.level.root=DEBUG \\\n     -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"configuration/service-config/#best-practices","title":"Best Practices","text":""},{"location":"configuration/service-config/#script-maintenance","title":"Script Maintenance","text":"<ol> <li>Version Control - Keep script in version control</li> <li>Documentation - Comment all customizations</li> <li>Backup - Keep original script backup</li> <li>Testing - Test changes in non-production first</li> </ol>"},{"location":"configuration/service-config/#security-recommendations","title":"Security Recommendations","text":"<ol> <li>Restrict Permissions - <code>chmod 750 ew_target_service.sh</code></li> <li>Validate Input - Check all variables</li> <li>Limit Privileges - Run with minimum required permissions</li> <li>Audit Changes - Log all script modifications</li> </ol>"},{"location":"configuration/service-config/#next-steps","title":"Next Steps","text":"<p>After configuring the service script:</p> <ol> <li>Test the Connection - Verify agent connectivity</li> <li>Schedule the Service - Set up automatic startup</li> <li>Monitor Agent Logs - Review logging output</li> <li>Configure Applications - Set up target integrations</li> </ol>"},{"location":"configuration/testing-config/","title":"Testing Agent Connection","text":""},{"location":"configuration/testing-config/#testing-agent-connection","title":"Testing Agent Connection","text":""},{"location":"configuration/testing-config/#overview","title":"Overview","text":"<p>After configuring the EPMware Agent, it's crucial to test the connection to ensure proper communication between the agent and EPMware application. This guide covers various testing methods and troubleshooting steps.</p>"},{"location":"configuration/testing-config/#prerequisites","title":"Prerequisites","text":"<p>Before testing, ensure:</p> <ul> <li>[ ] Agent files are properly extracted</li> <li>[ ] <code>agent.properties</code> is configured with correct values</li> <li>[ ] REST API token is generated and added to configuration</li> <li>[ ] Java is installed and accessible</li> <li>[ ] Network connectivity to EPMware server exists</li> </ul>"},{"location":"configuration/testing-config/#basic-connection-test","title":"Basic Connection Test","text":""},{"location":"configuration/testing-config/#method-1-command-line-test","title":"Method 1: Command Line Test","text":"<p>The simplest way to test the agent connection:</p> <pre><code># Navigate to agent directory\ncd /home/[username]\n\n# Run the agent in test mode\njava -jar epmware-agent.jar --test\n</code></pre> <p>Expected output: </p><pre><code>Testing connection to EPMware...\nServer: epmware1.epmware.com\nURL: https://client.epmwarecloud.com\nToken: [VALID]\nConnection: SUCCESS\nAgent version: 1.7.0\nServer version: 2023.4\n</code></pre><p></p>"},{"location":"configuration/testing-config/#method-2-service-script-test","title":"Method 2: Service Script Test","text":"<p>Test using the service script:</p> <pre><code># Make script executable\nchmod +x ew_target_service.sh\n\n# Run the service script\n./ew_target_service.sh\n</code></pre> <p>Expected output: </p><pre><code>Starting EPMware Agent...\nLoading configuration from agent.properties\nConnecting to https://client.epmwarecloud.com\nAuthentication successful\nStarting polling cycle (interval: 30000ms)\nPolling for tasks...\nNo pending tasks\n</code></pre><p></p> <p> Successful agent polling output</p>"},{"location":"configuration/testing-config/#method-3-epmware-ui-test","title":"Method 3: EPMware UI Test","text":"<p>Test from the EPMware application:</p> <ol> <li>Log into EPMware</li> <li>Navigate to Infrastructure \u2192 Servers</li> <li>Right-click on the configured server</li> <li>Select Test Connection</li> </ol> <p> Testing connection from EPMware UI</p> <p>Expected result: - Green checkmark indicating successful connection - Response time displayed - \"Connection successful\" message</p>"},{"location":"configuration/testing-config/#advanced-testing","title":"Advanced Testing","text":""},{"location":"configuration/testing-config/#verbose-mode-testing","title":"Verbose Mode Testing","text":"<p>Enable detailed output for troubleshooting:</p> <pre><code># Run with debug logging\njava -Dagent.log.level=DEBUG -jar epmware-agent.jar --test\n\n# Or modify agent.properties temporarily\necho \"agent.log.level=DEBUG\" &gt;&gt; agent.properties\n./ew_target_service.sh\n</code></pre>"},{"location":"configuration/testing-config/#network-connectivity-test","title":"Network Connectivity Test","text":"<p>Test basic network connectivity:</p> <pre><code># Test DNS resolution\nnslookup epmware1.epmware.com\nping epmware1.epmware.com\n\n# Test HTTPS connectivity\ncurl -I https://client.epmwarecloud.com\n\n# Test with token\ncurl -H \"Authorization: Bearer YOUR-TOKEN-HERE\" \\\n     https://client.epmwarecloud.com/api/v1/agent/health\n</code></pre>"},{"location":"configuration/testing-config/#port-connectivity-test","title":"Port Connectivity Test","text":"<p>Verify required ports are open:</p> <pre><code># Test HTTPS port (443)\ntelnet client.epmwarecloud.com 443\n\n# Or using nc (netcat)\nnc -zv client.epmwarecloud.com 443\n\n# Or using PowerShell (Windows)\nTest-NetConnection -ComputerName client.epmwarecloud.com -Port 443\n</code></pre>"},{"location":"configuration/testing-config/#testing-deployment-functionality","title":"Testing Deployment Functionality","text":""},{"location":"configuration/testing-config/#create-test-deployment","title":"Create Test Deployment","text":"<ol> <li>In EPMware, create a simple test request</li> <li>Approve the request through workflow</li> <li>Monitor agent logs for deployment activity</li> </ol> <pre><code># Watch agent logs\ntail -f logs/agent.log\n\n# In another terminal, check polling\ntail -f logs/agent-poll.log\n</code></pre>"},{"location":"configuration/testing-config/#deployment-test-output","title":"Deployment Test Output","text":"<p>Expected log entries: </p><pre><code>2023-11-15 14:30:00 INFO  Polling for tasks...\n2023-11-15 14:30:01 INFO  Retrieved 1 deployment task(s)\n2023-11-15 14:30:02 INFO  Starting deployment: DEP-001\n2023-11-15 14:30:03 INFO  Target: HFM_PROD\n2023-11-15 14:30:04 INFO  Loading metadata file...\n2023-11-15 14:30:10 INFO  Deployment completed successfully\n2023-11-15 14:30:11 INFO  Reporting status to EPMware\n</code></pre><p></p>"},{"location":"configuration/testing-config/#common-test-failures","title":"Common Test Failures","text":""},{"location":"configuration/testing-config/#authentication-failures","title":"Authentication Failures","text":"<p>Symptom: </p><pre><code>ERROR: Authentication failed - Invalid token\n</code></pre><p></p> <p>Solutions: 1. Verify token in agent.properties: </p><pre><code>grep ew.portal.token agent.properties\n</code></pre><p></p> <ol> <li>Regenerate token in EPMware:</li> <li>Navigate to Users</li> <li>Right-click \u2192 Generate Token</li> <li> <p>Update agent.properties</p> </li> <li> <p>Check token format: </p><pre><code># Token should be 36 characters with hyphens\necho \"2e6d4103-5145-4c30-9837-ac6d14797523\" | wc -c\n# Should output 37 (36 + newline)\n</code></pre><p></p> </li> </ol>"},{"location":"configuration/testing-config/#connection-timeouts","title":"Connection Timeouts","text":"<p>Symptom: </p><pre><code>ERROR: Connection timeout after 30000ms\n</code></pre><p></p> <p>Solutions: 1. Check network connectivity: </p><pre><code>ping -c 4 epmware-server.com\ntraceroute epmware-server.com\n</code></pre><p></p> <ol> <li> <p>Verify firewall rules: </p><pre><code># Linux\nsudo iptables -L -n | grep 443\n\n# Windows\nnetsh advfirewall firewall show rule name=all | find \"443\"\n</code></pre><p></p> </li> <li> <p>Test with increased timeout: </p><pre><code># In agent.properties\nagent.connection.timeout=60000\n</code></pre><p></p> </li> </ol>"},{"location":"configuration/testing-config/#certificate-issues","title":"Certificate Issues","text":"<p>Symptom: </p><pre><code>ERROR: SSL/TLS certificate validation failed\n</code></pre><p></p> <p>Solutions: 1. Import certificate to Java truststore: </p><pre><code># Export certificate\nopenssl s_client -connect epmware-server.com:443 &lt;/dev/null | \\\n  openssl x509 -outform PEM &gt; epmware.crt\n\n# Import to Java\nkeytool -import -alias epmware -keystore $JAVA_HOME/lib/security/cacerts \\\n  -file epmware.crt -storepass changeit\n</code></pre><p></p> <ol> <li>Temporarily disable validation (not for production): <pre><code>java -Dcom.sun.net.ssl.checkRevocation=false \\\n     -Dtrust.all.certificates=true \\\n     -jar epmware-agent.jar --test\n</code></pre></li> </ol>"},{"location":"configuration/testing-config/#performance-testing","title":"Performance Testing","text":""},{"location":"configuration/testing-config/#response-time-measurement","title":"Response Time Measurement","text":"<p>Test agent response times:</p> <pre><code># Simple response time test\ntime curl -H \"Authorization: Bearer TOKEN\" \\\n     https://epmware-server.com/api/v1/agent/health\n\n# Multiple iterations\nfor i in {1..10}; do\n  time curl -s -H \"Authorization: Bearer TOKEN\" \\\n    https://epmware-server.com/api/v1/agent/health &gt; /dev/null\ndone\n</code></pre>"},{"location":"configuration/testing-config/#load-testing","title":"Load Testing","text":"<p>Simulate multiple deployments:</p> <pre><code># Create test script\ncat &gt; test_load.sh &lt;&lt; 'EOF'\n#!/bin/bash\nfor i in {1..5}; do\n  echo \"Test deployment $i\"\n  # Trigger test deployment\n  sleep 2\ndone\nEOF\n\nchmod +x test_load.sh\n./test_load.sh\n</code></pre>"},{"location":"configuration/testing-config/#test-validation-checklist","title":"Test Validation Checklist","text":""},{"location":"configuration/testing-config/#initial-connection","title":"Initial Connection","text":"<ul> <li>[ ] Agent starts without errors</li> <li>[ ] Authentication successful</li> <li>[ ] Polling begins at configured interval</li> <li>[ ] No errors in agent.log</li> <li>[ ] Server shows as \"Connected\" in EPMware</li> </ul>"},{"location":"configuration/testing-config/#deployment-capability","title":"Deployment Capability","text":"<ul> <li>[ ] Agent receives deployment tasks</li> <li>[ ] Can access target application</li> <li>[ ] Successfully deploys metadata</li> <li>[ ] Reports status back to EPMware</li> <li>[ ] Logs show successful completion</li> </ul>"},{"location":"configuration/testing-config/#error-handling","title":"Error Handling","text":"<ul> <li>[ ] Agent recovers from network interruptions</li> <li>[ ] Handles invalid tasks gracefully</li> <li>[ ] Logs errors appropriately</li> <li>[ ] Continues polling after errors</li> </ul>"},{"location":"configuration/testing-config/#testing-different-configurations","title":"Testing Different Configurations","text":""},{"location":"configuration/testing-config/#test-with-proxy","title":"Test with Proxy","text":"<p>If using a proxy server:</p> <pre><code># Set proxy environment variables\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport NO_PROXY=localhost,127.0.0.1\n\n# Test connection\njava -Dhttp.proxyHost=proxy.company.com \\\n     -Dhttp.proxyPort=8080 \\\n     -Dhttps.proxyHost=proxy.company.com \\\n     -Dhttps.proxyPort=8080 \\\n     -jar epmware-agent.jar --test\n</code></pre>"},{"location":"configuration/testing-config/#test-with-different-polling-intervals","title":"Test with Different Polling Intervals","text":"<pre><code># Quick test with 10-second interval\nsed -i.bak 's/agent.interval.millisecond=30000/agent.interval.millisecond=10000/' agent.properties\n./ew_target_service.sh\n\n# Monitor rapid polling\ntail -f logs/agent-poll.log\n</code></pre> <p>Production Settings</p> <p>Remember to restore production polling interval after testing.</p>"},{"location":"configuration/testing-config/#monitoring-tools","title":"Monitoring Tools","text":""},{"location":"configuration/testing-config/#log-analysis","title":"Log Analysis","text":"<p>Monitor logs in real-time:</p> <pre><code># Combined log monitoring\ntail -f logs/*.log | grep -E \"ERROR|WARN|SUCCESS\"\n\n# Specific pattern monitoring\ntail -f logs/agent.log | grep \"deployment\"\n\n# Count errors\ngrep -c ERROR logs/agent.log\n</code></pre>"},{"location":"configuration/testing-config/#health-check-script","title":"Health Check Script","text":"<p>Create a monitoring script:</p> <pre><code>#!/bin/bash\n# health_check.sh\n\necho \"=== EPMware Agent Health Check ===\"\necho \"Date: $(date)\"\n\n# Check if agent is running\nif pgrep -f \"epmware-agent.jar\" &gt; /dev/null; then\n    echo \"\u2713 Agent process is running\"\nelse\n    echo \"\u2717 Agent process is NOT running\"\nfi\n\n# Check last poll time\nLAST_POLL=$(tail -1 logs/agent-poll.log | cut -d' ' -f1-2)\necho \"Last poll: $LAST_POLL\"\n\n# Check for recent errors\nERROR_COUNT=$(tail -100 logs/agent.log | grep -c ERROR)\necho \"Recent errors: $ERROR_COUNT\"\n\n# Test connection\nif java -jar epmware-agent.jar --test &gt; /dev/null 2&gt;&amp;1; then\n    echo \"\u2713 Connection test passed\"\nelse\n    echo \"\u2717 Connection test failed\"\nfi\n</code></pre>"},{"location":"configuration/testing-config/#test-documentation","title":"Test Documentation","text":""},{"location":"configuration/testing-config/#recording-test-results","title":"Recording Test Results","text":"<p>Document your test results:</p> <pre><code># Agent Testing Report\n\n## Environment\n- Server: servername\n- Date: 2023-11-15\n- Agent Version: 1.7.0\n- Java Version: 1.8.0_291\n\n## Test Results\n| Test | Result | Notes |\n|------|--------|-------|\n| Basic Connection | \u2713 Pass | Connected in 200ms |\n| Authentication | \u2713 Pass | Token validated |\n| Polling | \u2713 Pass | 30-second interval working |\n| Deployment | \u2713 Pass | Test deployment successful |\n| Error Recovery | \u2713 Pass | Recovered from network interruption |\n\n## Issues Found\n- None\n\n## Recommendations\n- Continue to production deployment\n</code></pre>"},{"location":"configuration/testing-config/#troubleshooting-resources","title":"Troubleshooting Resources","text":""},{"location":"configuration/testing-config/#log-locations","title":"Log Locations","text":"<p>Check these logs for issues:</p> Log File Contents <code>logs/agent.log</code> Main agent activity and errors <code>logs/agent-poll.log</code> Polling activity <code>/var/log/messages</code> (Linux) System-level issues Windows Event Viewer Windows service issues"},{"location":"configuration/testing-config/#debug-commands","title":"Debug Commands","text":"<p>Useful commands for troubleshooting:</p> <pre><code># Check Java version\njava -version\n\n# Verify environment variables\nenv | grep -E \"JAVA|PATH\"\n\n# Check process\nps -ef | grep epmware\n\n# Network diagnostics\nnetstat -an | grep ESTABLISHED\n\n# Disk space\ndf -h /home/[username]\n</code></pre>"},{"location":"configuration/testing-config/#next-steps","title":"Next Steps","text":"<p>After successful testing:</p> <ol> <li>Schedule the Agent - Set up automatic startup</li> <li>Configure Applications - Set up target applications</li> <li>Monitor Operations - Implement monitoring</li> <li>Review Troubleshooting - Prepare for issues</li> </ol>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#getting-started","title":"Getting Started","text":"<p>Welcome to the EPMware Agent Installation Guide. This section provides essential information to help you understand the agent's purpose, architecture, and requirements before beginning installation.</p>"},{"location":"getting-started/#what-is-the-epmware-agent","title":"What is the EPMware Agent?","text":"<p>The EPMware Agent is a secure bridge between EPMware's cloud or on-premise application and your target EPM systems. It enables automated metadata deployment without exposing your internal applications to external networks.</p>"},{"location":"getting-started/#key-benefits","title":"Key Benefits","text":"<ul> <li>Secure Communication - No inbound firewall rules required</li> <li>Automated Deployment - Hands-free metadata updates</li> <li>Multi-Application Support - Single agent for multiple targets</li> <li>Audit Trail - Complete logging of all operations</li> <li>Reliable Operations - Automatic retry and error recovery</li> </ul>"},{"location":"getting-started/#quick-start-path","title":"Quick Start Path","text":"<p>For experienced administrators familiar with EPMware:</p> <ul> <li> Fast Track Installation </li> <li>Check Requirements</li> <li>Install Prerequisites</li> <li>Deploy Agent</li> <li>Configure</li> <li> <p>Test</p> </li> <li> <p> Detailed Installation   Follow the complete guide starting with:</p> </li> <li>Introduction</li> <li>System Requirements</li> <li>Architecture Overview</li> </ul>"},{"location":"getting-started/#installation-overview","title":"Installation Overview","text":"<p>The complete installation process involves:</p>"},{"location":"getting-started/#phase-1-preparation-30-minutes","title":"Phase 1: Preparation (30 minutes)","text":"<ul> <li>Review system requirements</li> <li>Understand architecture</li> <li>Gather required information</li> <li>Prepare target server</li> </ul>"},{"location":"getting-started/#phase-2-installation-45-minutes","title":"Phase 2: Installation (45 minutes)","text":"<ul> <li>Install prerequisites (Cygwin, Java)</li> <li>Extract agent files</li> <li>Set file permissions</li> <li>Verify installation</li> </ul>"},{"location":"getting-started/#phase-3-configuration-30-minutes","title":"Phase 3: Configuration (30 minutes)","text":"<ul> <li>Configure agent properties</li> <li>Generate REST token</li> <li>Set up service script</li> <li>Test connectivity</li> </ul>"},{"location":"getting-started/#phase-4-integration-variable","title":"Phase 4: Integration (Variable)","text":"<ul> <li>Configure target applications</li> <li>Set up scheduled tasks</li> <li>Implement monitoring</li> <li>Document setup</li> </ul>"},{"location":"getting-started/#before-you-begin","title":"Before You Begin","text":""},{"location":"getting-started/#required-information","title":"Required Information","text":"<p>Gather this information before starting:</p> Information Description Where to Find EPMware URL Your EPMware instance address Provided by EPMware team Server Name Name in EPMware configuration Infrastructure \u2192 Servers REST Token Authentication token Generate in User Management Target Applications Applications to integrate Your EPM landscape"},{"location":"getting-started/#required-access","title":"Required Access","text":"<p>Ensure you have:</p> <ul> <li>Server Access</li> <li>Administrator privileges (Windows)</li> <li>Root or sudo access (Linux)</li> <li>Ability to install software</li> <li> <p>Permission to create services</p> </li> <li> <p>Network Access</p> </li> <li>Outbound HTTPS (port 443)</li> <li>Access to target applications</li> <li> <p>Proxy credentials (if applicable)</p> </li> <li> <p>EPMware Access</p> </li> <li>User account in EPMware</li> <li>Permission to generate tokens</li> <li>Access to server configuration</li> </ul>"},{"location":"getting-started/#supported-configurations","title":"Supported Configurations","text":""},{"location":"getting-started/#operating-systems","title":"Operating Systems","text":"Platform Versions Notes Windows Server 2016, 2019, 2022 Requires Cygwin Red Hat Linux 7.x, 8.x Recommended Oracle Linux 7.x, 8.x Recommended Ubuntu 18.04, 20.04, 22.04 LTS Supported"},{"location":"getting-started/#target-applications","title":"Target Applications","text":"Application Versions Integration Type Hyperion HFM 11.1.2.4.x, 11.2.x Direct via utilities Hyperion Planning 11.1.2.4.x, 11.2.x Direct via utilities Essbase 11.1.2.4.x, 21c MaxL scripts PCMCS Cloud EPM Automate Other Cloud EPM Current EPM Automate"},{"location":"getting-started/#deployment-scenarios","title":"Deployment Scenarios","text":"<p>The agent supports various deployment models:</p> <ol> <li>Single Agent - One agent managing multiple applications</li> <li>Multiple Agents - Dedicated agents per application</li> <li>High Availability - Active/passive agent configuration</li> <li>Hybrid Cloud - Managing both on-premise and cloud</li> </ol>"},{"location":"getting-started/#decision-points","title":"Decision Points","text":""},{"location":"getting-started/#installation-location","title":"Installation Location","text":"<p>Choose the optimal location for your agent:</p> Option Pros Cons Application Server Direct access, no network latency Resource competition Dedicated Server Isolated, better security Additional infrastructure Shared Services Server Centralized management Single point of failure"},{"location":"getting-started/#user-account-strategy","title":"User Account Strategy","text":"<p>Decide on the user account approach:</p> Strategy Use Case Considerations Single Service Account Simple environments Easier management Per-Application Accounts Complex security More configuration Dedicated Agent Account Recommended Best security isolation"},{"location":"getting-started/#common-use-cases","title":"Common Use Cases","text":""},{"location":"getting-started/#use-case-1-hfm-metadata-management","title":"Use Case 1: HFM Metadata Management","text":"<p>Scenario: Automate HFM dimension updates from EPMware</p> <p>Requirements: - Agent on HFM server or connected server - HFM utilities accessible - Registry properties configured</p>"},{"location":"getting-started/#use-case-2-cloud-epm-integration","title":"Use Case 2: Cloud EPM Integration","text":"<p>Scenario: Deploy to PCMCS from EPMware</p> <p>Requirements: - Agent with internet access - EPM Automate installed - Cloud credentials</p>"},{"location":"getting-started/#use-case-3-multi-application-deployment","title":"Use Case 3: Multi-Application Deployment","text":"<p>Scenario: Single workflow deploys to multiple targets</p> <p>Requirements: - Agent with access to all applications - Credentials for each system - Coordinated deployment windows</p>"},{"location":"getting-started/#success-criteria","title":"Success Criteria","text":"<p>Your agent installation is successful when:</p> <ul> <li>\u2713 Agent connects to EPMware</li> <li>\u2713 Polling shows in logs</li> <li>\u2713 Test deployment completes</li> <li>\u2713 Status updates in EPMware</li> <li>\u2713 No errors in agent logs</li> </ul>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":""},{"location":"getting-started/#documentation-resources","title":"Documentation Resources","text":"<ul> <li>This Guide - Complete installation instructions</li> <li>EPMware Admin Guide - Application configuration</li> <li>EPMware User Guide - Using the application</li> <li>Release Notes - Latest features and fixes</li> </ul>"},{"location":"getting-started/#support-channels","title":"Support Channels","text":"<ul> <li>Email: support@epmware.com</li> <li>Phone: 408-614-0442</li> <li>Portal: support.epmware.com</li> </ul>"},{"location":"getting-started/#information-to-provide","title":"Information to Provide","text":"<p>When requesting help, include:</p> <ol> <li>Agent version</li> <li>Operating system</li> <li>Error messages</li> <li>Log excerpts</li> <li>Configuration files (sanitized)</li> </ol>"},{"location":"getting-started/#installation-timeline","title":"Installation Timeline","text":"<p>Typical installation timeline:</p> Phase Duration Activities Planning 1-2 hours Requirements review, information gathering Prerequisites 1-2 hours Software installation, network configuration Agent Installation 1 hour File deployment, initial configuration Testing 1-2 hours Connectivity tests, trial deployments Integration 2-4 hours Application-specific configuration Documentation 1 hour Record configuration, create runbooks <p>Total: 8-12 hours for complete production setup</p>"},{"location":"getting-started/#risk-mitigation","title":"Risk Mitigation","text":""},{"location":"getting-started/#common-risks-and-mitigations","title":"Common Risks and Mitigations","text":"Risk Impact Mitigation Network connectivity issues Agent cannot communicate Test connectivity before installation Insufficient permissions Cannot deploy metadata Verify account privileges Version incompatibility Integration failures Check compatibility matrix Resource constraints Performance issues Monitor system resources"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Ready to begin? Proceed through these sections:</p> <ol> <li>Introduction - Understand EPMware and the agent</li> <li>System Requirements - Verify your environment</li> <li>Architecture Overview - Learn how it works</li> <li>Installation - Begin installation process</li> </ol> <p>Preparation is Key</p> <p>Time spent in preparation saves troubleshooting time later. Review all prerequisites and gather required information before starting installation.</p> <p>Version Information</p> <p>This guide covers EPMware Agent version 1.7. Check the release notes for version-specific information.</p>"},{"location":"getting-started/architecture/","title":"Architecture Overview","text":""},{"location":"getting-started/architecture/#architecture-overview","title":"Architecture Overview","text":""},{"location":"getting-started/architecture/#on-premise-agent-architecture","title":"On-Premise Agent Architecture","text":"<p>The EPMware On-Premise Agent provides a secure bridge between EPMware Cloud applications and your on-premise target systems. This architecture ensures that your internal applications remain protected while enabling seamless metadata management.</p> <p> EPMware On-Premise Agent Architecture - Showing the flow between EPMware Cloud, On-Premise Agent, and Target Applications</p>"},{"location":"getting-started/architecture/#key-components","title":"Key Components","text":""},{"location":"getting-started/architecture/#1-epmware-cloud-application","title":"1. EPMware Cloud Application","text":"<p>The cloud-based EPMware application serves as the central hub for:</p> <ul> <li>Metadata request management</li> <li>Workflow orchestration</li> <li>User interface and dashboards</li> <li>REST API endpoints</li> <li>Deployment scheduling</li> </ul>"},{"location":"getting-started/architecture/#2-on-premise-agent","title":"2. On-Premise Agent","text":"<p>The agent acts as an intermediary, providing:</p> <ul> <li>Secure Communication - REST API-based authentication with tokens</li> <li>Command Execution - Processes deployment commands from EPMware</li> <li>Status Reporting - Returns execution results to EPMware</li> <li>Polling Mechanism - Checks for pending tasks at configured intervals</li> </ul>"},{"location":"getting-started/architecture/#3-target-applications","title":"3. Target Applications","text":"<p>Supported on-premise applications include:</p> <ul> <li>Hyperion Financial Management (HFM)</li> <li>Hyperion Planning</li> <li>Essbase</li> <li>Other EPM applications</li> </ul>"},{"location":"getting-started/architecture/#communication-flow","title":"Communication Flow","text":""},{"location":"getting-started/architecture/#1-polling-process","title":"1. Polling Process","text":"<pre><code>sequenceDiagram\n    participant Agent\n    participant EPMware\n    participant Target\n\n    Agent-&gt;&gt;EPMware: Poll for tasks (every 30 seconds)\n    EPMware--&gt;&gt;Agent: Return pending tasks\n    Agent-&gt;&gt;Target: Execute deployment\n    Target--&gt;&gt;Agent: Return results\n    Agent-&gt;&gt;EPMware: Report status\n</code></pre>"},{"location":"getting-started/architecture/#2-data-flow","title":"2. Data Flow","text":"<ol> <li>Request Initiation - Users submit metadata requests through EPMware UI</li> <li>Workflow Processing - Requests move through approval workflow</li> <li>Deployment Queue - Approved requests are queued for deployment</li> <li>Agent Polling - Agent checks for pending deployments</li> <li>Command Execution - Agent executes deployment to target application</li> <li>Status Update - Results are reported back to EPMware</li> </ol>"},{"location":"getting-started/architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"getting-started/architecture/#authentication-layers","title":"Authentication Layers","text":"<ol> <li>EPMware Authentication</li> <li>REST API token-based authentication</li> <li>36-character alphanumeric tokens</li> <li> <p>Secure HTTPS communication</p> </li> <li> <p>Target Application Authentication</p> </li> <li>Application-specific credentials</li> <li>Encrypted password files</li> <li>Service account authentication</li> </ol>"},{"location":"getting-started/architecture/#network-security","title":"Network Security","text":"<ul> <li>Firewall Protection - Only outbound connections required</li> <li>SSL/TLS Encryption - All communication encrypted</li> <li>No Inbound Ports - Agent initiates all connections</li> <li>Token Rotation - Periodic token refresh capability</li> </ul>"},{"location":"getting-started/architecture/#deployment-models","title":"Deployment Models","text":""},{"location":"getting-started/architecture/#single-agent-configuration","title":"Single Agent Configuration","text":"<p>Best for organizations with: - Single data center - Co-located EPM applications - Centralized IT management</p> <p> Single agent serving multiple target applications</p>"},{"location":"getting-started/architecture/#multiple-agent-configuration","title":"Multiple Agent Configuration","text":"<p>Recommended for: - Geographically distributed applications - Different security zones - Load distribution requirements</p> <p> Multiple agents for distributed deployment</p>"},{"location":"getting-started/architecture/#hybrid-cloud-configuration","title":"Hybrid Cloud Configuration","text":"<p>For organizations using both cloud and on-premise applications:</p> <p> Hybrid architecture with both cloud and on-premise targets</p>"},{"location":"getting-started/architecture/#agent-components","title":"Agent Components","text":""},{"location":"getting-started/architecture/#core-files","title":"Core Files","text":"File/Directory Purpose <code>epmware-agent.jar</code> Main agent executable <code>agent.properties</code> Configuration settings <code>ew_target_service.sh</code> Service startup script <code>logs/</code> Agent log files <code>temp/</code> Temporary working directory"},{"location":"getting-started/architecture/#process-architecture","title":"Process Architecture","text":"<p>The agent runs as: - Windows: Scheduled Task or Windows Service - Linux: Background daemon process</p>"},{"location":"getting-started/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"getting-started/architecture/#polling-frequency","title":"Polling Frequency","text":"<ul> <li>Default: 30 seconds</li> <li>Minimum: 10 seconds (high-frequency deployments)</li> <li>Maximum: 300 seconds (low-frequency deployments)</li> </ul>"},{"location":"getting-started/architecture/#resource-usage","title":"Resource Usage","text":"<ul> <li>Memory: ~512MB - 2GB depending on deployment size</li> <li>CPU: Minimal during polling, increases during deployment</li> <li>Network: Burst traffic during metadata transfer</li> <li>Disk I/O: Temporary files during processing</li> </ul>"},{"location":"getting-started/architecture/#high-availability-options","title":"High Availability Options","text":""},{"location":"getting-started/architecture/#active-passive-configuration","title":"Active-Passive Configuration","text":"<ul> <li>Primary agent handles all requests</li> <li>Standby agent activated on failure</li> <li>Manual or automated failover</li> </ul>"},{"location":"getting-started/architecture/#load-balanced-configuration","title":"Load Balanced Configuration","text":"<ul> <li>Multiple agents with shared workload</li> <li>Application-based distribution</li> <li>Improved throughput for large deployments</li> </ul>"},{"location":"getting-started/architecture/#monitoring-and-management","title":"Monitoring and Management","text":""},{"location":"getting-started/architecture/#health-checks","title":"Health Checks","text":"<p>The agent provides several monitoring capabilities:</p> <ul> <li>Connection status verification</li> <li>Deployment success/failure metrics</li> <li>Response time tracking</li> <li>Error logging and alerting</li> </ul>"},{"location":"getting-started/architecture/#log-management","title":"Log Management","text":"<p>Two primary log files: 1. agent.log - Deployment activities and errors 2. agent-poll.log - Polling activity tracking</p>"},{"location":"getting-started/architecture/#integration-points","title":"Integration Points","text":""},{"location":"getting-started/architecture/#epmware-integration","title":"EPMware Integration","text":"<ul> <li>REST API for communication</li> <li>JSON-based message format</li> <li>Asynchronous task processing</li> </ul>"},{"location":"getting-started/architecture/#application-integration","title":"Application Integration","text":"<ul> <li>HFM: HFM utilities and command-line tools</li> <li>Planning: Planning utilities and encrypted credentials</li> <li>Cloud EPM: EPM Automate utility</li> <li>Custom: Scriptable integration points</li> </ul>"},{"location":"getting-started/architecture/#scalability-considerations","title":"Scalability Considerations","text":"<p>The architecture supports:</p> <ul> <li>Vertical Scaling: Increase server resources for larger deployments</li> <li>Horizontal Scaling: Add agents for distributed processing</li> <li>Queue Management: Handle multiple concurrent deployments</li> <li>Batch Processing: Group deployments for efficiency</li> </ul> <p>Best Practice</p> <p>For production environments, implement agent redundancy to ensure continuous availability of metadata deployment capabilities.</p> <p>Cloud vs On-Premise</p> <p>While EPMware can be deployed either on-premise or in the cloud, the agent architecture remains consistent, with only the connection endpoints changing.</p>"},{"location":"getting-started/architecture/#next-steps","title":"Next Steps","text":"<p>Now that you understand the architecture:</p> <ol> <li>Review Installation Prerequisites</li> <li>Proceed with Agent Installation</li> <li>Configure Agent Properties</li> </ol>"},{"location":"getting-started/introduction/","title":"Introduction","text":""},{"location":"getting-started/introduction/#introduction","title":"Introduction","text":""},{"location":"getting-started/introduction/#overview","title":"Overview","text":"<p>EPMware is a master data management and workflow tool that manages master data and enforces your organization's workflow around the everyday processes that surround your metadata changes. By configuring shared dimensions in EPMware, users request metadata once and our workflow engine routes the request to obtain approvals and deploys the metadata to the participating target systems.</p>"},{"location":"getting-started/introduction/#key-capabilities","title":"Key Capabilities","text":""},{"location":"getting-started/introduction/#centralized-metadata-management","title":"Centralized Metadata Management","text":"<ul> <li>Single Source of Truth - Standardization and rationalization of metadata across all EPM applications</li> <li>Workflow Automation - Automated routing of metadata requests through approval stages</li> <li>Real-time Dashboard - Monitor request status from creation through review, approval, and deployment</li> <li>Visual Workflow - Graphical representation of each request's progress</li> </ul>"},{"location":"getting-started/introduction/#seamless-integration","title":"Seamless Integration","text":"<p>EPMware provides seamless integration with:</p> <ul> <li>Hyperion Financial Management (HFM)</li> <li>Hyperion Planning</li> <li>Essbase</li> <li>Oracle Cloud EPM applications</li> <li>PCMCS (Profitability and Cost Management Cloud Service)</li> </ul>"},{"location":"getting-started/introduction/#security-and-compliance","title":"Security and Compliance","text":"<ul> <li>LDAP/Active Directory Integration - Leverages existing enterprise security infrastructure</li> <li>Complete Audit Trail - Every transaction, sign-off, and deployment is logged</li> <li>Role-based Access Control - Configurable security module with granular permissions</li> </ul>"},{"location":"getting-started/introduction/#purpose-of-this-guide","title":"Purpose of This Guide","text":"<p>This guide provides comprehensive instructions for:</p> <ul> <li>Installing the EPMware On-Premise Agent</li> <li>Configuring agent connectivity and properties</li> <li>Setting up integration with target applications</li> <li>Managing and monitoring agent operations</li> <li>Troubleshooting common issues</li> </ul>"},{"location":"getting-started/introduction/#target-audience","title":"Target Audience","text":"<p>This guide is intended for:</p> <ul> <li>System Administrators</li> <li>EPM Application Administrators</li> <li>IT Infrastructure Teams</li> <li>Technical Consultants</li> </ul>"},{"location":"getting-started/introduction/#document-conventions","title":"Document Conventions","text":"<p>Throughout this guide, we use the following conventions:</p> <p>Note</p> <p>Important information or tips that help you use the product more effectively</p> <p>Warning</p> <p>Critical information that could prevent data loss or system issues</p> <p>Tip</p> <p>Best practices and recommendations for optimal configuration</p> <pre><code># Command line examples are shown in code blocks\njava -version\n</code></pre>"},{"location":"getting-started/introduction/#related-documentation","title":"Related Documentation","text":"<ul> <li>EPMware Logic Builder Guide</li> <li>EPMware Administration Guide</li> <li>EPMware User Guide</li> <li>EPMware API Reference</li> </ul>"},{"location":"getting-started/introduction/#next-steps","title":"Next Steps","text":"<ul> <li>Review System Requirements to ensure your environment meets prerequisites</li> <li>Understand the Architecture Overview to see how the agent fits into your infrastructure</li> <li>Proceed to Installation to begin setting up the agent</li> </ul>"},{"location":"getting-started/requirements/","title":"System Requirements","text":""},{"location":"getting-started/requirements/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/requirements/#hardware-requirements","title":"Hardware Requirements","text":"<p>The following specifications are recommended for optimal agent performance:</p>"},{"location":"getting-started/requirements/#minimum-requirements","title":"Minimum Requirements","text":"Component Specification Processor 2 CPU x64 Intel or AMD64 Processor Memory 16 GB RAM Storage 60 GB available disk space Network 1 Gbps network connection"},{"location":"getting-started/requirements/#recommended-configuration","title":"Recommended Configuration","text":"Component Specification Processor 4+ CPU cores x64 Intel or AMD64 Processor Memory 32 GB RAM or higher Storage 100+ GB available disk space Network 10 Gbps network connection"},{"location":"getting-started/requirements/#software-requirements","title":"Software Requirements","text":""},{"location":"getting-started/requirements/#operating-systems","title":"Operating Systems","text":"<p>The EPMware Agent supports the following operating systems:</p> <ul> <li>Linux (Recommended)</li> <li>Red Hat Enterprise Linux 7.x, 8.x</li> <li>Oracle Linux 7.x, 8.x</li> <li>CentOS 7.x, 8.x</li> <li> <p>Ubuntu 18.04 LTS, 20.04 LTS, 22.04 LTS</p> </li> <li> <p>Windows</p> </li> <li>Windows Server 2016</li> <li>Windows Server 2019</li> <li>Windows Server 2022</li> <li>Windows 10 (for development/testing only)</li> </ul>"},{"location":"getting-started/requirements/#required-software","title":"Required Software","text":"Software Version Notes Java 1.8 or higher JRE or JDK required Cygwin Latest stable Required for Windows installations only zip/unzip Any version Must be in system PATH"},{"location":"getting-started/requirements/#target-application-compatibility","title":"Target Application Compatibility","text":"<p>The agent supports integration with:</p> Application Supported Versions Hyperion HFM 11.1.2.4.x, 11.2.x Hyperion Planning 11.1.2.4.x, 11.2.x Essbase 11.1.2.4.x, 21c Oracle Cloud EPM Current versions PCMCS Current versions EPM Automate Latest version (for cloud integrations)"},{"location":"getting-started/requirements/#network-requirements","title":"Network Requirements","text":""},{"location":"getting-started/requirements/#port-configuration","title":"Port Configuration","text":"<p>Ensure the following ports are open for communication:</p> Direction Port Protocol Purpose Outbound 443 HTTPS EPMware Cloud communication Outbound 8080 HTTP EPMware On-Premise (configurable) Outbound Target App Ports Various Application-specific communication"},{"location":"getting-started/requirements/#firewall-rules","title":"Firewall Rules","text":"<p>Configure firewall rules to allow:</p> <ul> <li>Outbound HTTPS traffic to EPMware cloud URL</li> <li>Communication with target application servers</li> <li>DNS resolution for cloud services</li> </ul>"},{"location":"getting-started/requirements/#network-bandwidth","title":"Network Bandwidth","text":"<ul> <li>Minimum: 10 Mbps dedicated bandwidth</li> <li>Recommended: 100 Mbps or higher for large metadata deployments</li> <li>Latency: Less than 200ms to EPMware servers</li> </ul>"},{"location":"getting-started/requirements/#security-requirements","title":"Security Requirements","text":""},{"location":"getting-started/requirements/#user-permissions","title":"User Permissions","text":"<p>The agent requires:</p> <ul> <li>Windows: Local administrator rights or service account with appropriate permissions</li> <li>Linux: User account with read/write access to agent directory</li> <li>Target Applications: Valid user credentials with metadata management permissions</li> </ul>"},{"location":"getting-started/requirements/#authentication","title":"Authentication","text":"<ul> <li>REST API token for EPMware authentication</li> <li>Application-specific credentials for target systems</li> <li>SSL/TLS certificates for secure communication</li> </ul>"},{"location":"getting-started/requirements/#environment-specific-requirements","title":"Environment-Specific Requirements","text":""},{"location":"getting-started/requirements/#hyperion-hfm","title":"Hyperion HFM","text":"<ul> <li>Access to HFM application server</li> <li>HFM user with metadata load permissions</li> <li>Registry properties file access</li> </ul>"},{"location":"getting-started/requirements/#hyperion-planning","title":"Hyperion Planning","text":"<ul> <li>Access to Planning application server</li> <li>Planning user with administrator privileges</li> <li>Ability to generate encrypted password files</li> </ul>"},{"location":"getting-started/requirements/#oracle-cloud-epm","title":"Oracle Cloud EPM","text":"<ul> <li>EPM Automate utility installed</li> <li>Valid cloud service credentials</li> <li>Network access to Oracle Cloud infrastructure</li> </ul>"},{"location":"getting-started/requirements/#pre-installation-checklist","title":"Pre-Installation Checklist","text":"<p>Before installing the agent, verify:</p> <ul> <li>[ ] Operating system meets requirements</li> <li>[ ] Java is installed and in PATH</li> <li>[ ] Required ports are open</li> <li>[ ] User accounts are created</li> <li>[ ] Target application credentials are available</li> <li>[ ] Network connectivity to EPMware is confirmed</li> <li>[ ] Sufficient disk space is available</li> <li>[ ] Cygwin is installed (Windows only)</li> </ul> <p>Performance Considerations</p> <p>For environments with multiple target applications or high-volume metadata operations, consider dedicating a server specifically for the EPMware Agent to ensure optimal performance.</p> <p>Java Version</p> <p>Ensure Java version compatibility with both the EPMware Agent and your target applications. Some older EPM applications may require specific Java versions.</p>"},{"location":"getting-started/requirements/#next-steps","title":"Next Steps","text":"<p>Once you've confirmed your environment meets these requirements:</p> <ol> <li>Review the Architecture Overview</li> <li>Proceed to Installation Prerequisites</li> <li>Begin the Agent Installation process</li> </ol>"},{"location":"installation/","title":"Installation Overview","text":""},{"location":"installation/#installation-overview","title":"Installation Overview","text":"<p>The EPMware Agent installation process consists of three main phases: prerequisites installation, agent deployment, and configuration. This section guides you through each phase to ensure a successful installation.</p>"},{"location":"installation/#installation-process","title":"Installation Process","text":"<ul> <li> <p> Prerequisites   Install required software including Java and Cygwin (Windows only)</p> </li> <li> <p> Agent Installation   Download and extract agent files to the appropriate directory</p> </li> <li> <p> Configuration   Configure properties, tokens, and test connectivity</p> </li> </ul>"},{"location":"installation/#before-you-begin","title":"Before You Begin","text":""},{"location":"installation/#pre-installation-checklist","title":"Pre-Installation Checklist","text":"<ul> <li>[ ] Verify System Requirements are met</li> <li>[ ] Obtain EPMware Agent installation package (<code>ew_agent_files.zip</code>)</li> <li>[ ] Have administrator or appropriate user access to the target server</li> <li>[ ] Know your EPMware server URL (cloud or on-premise)</li> <li>[ ] Have credentials for a dedicated EPMware service account</li> <li>[ ] Identify target applications for integration</li> </ul>"},{"location":"installation/#required-information","title":"Required Information","text":"<p>Gather the following information before starting:</p> Information Description Example EPMware URL Your EPMware instance URL <code>https://client.epmwarecloud.com</code> Server Name Name configured in EPMware <code>hfmserver01</code> Service Account EPMware user for agent <code>svc_epmware_agent</code> Installation Path Where agent will be installed <code>C:\\cygwin64\\home\\Administrator</code> Target Applications Applications to integrate HFM, Planning, PCMCS"},{"location":"installation/#installation-options","title":"Installation Options","text":""},{"location":"installation/#windows-installation","title":"Windows Installation","text":"<p>For Windows servers, the installation requires: 1. Cygwin environment setup 2. Agent file extraction 3. Windows Task Scheduler configuration</p> <p>Estimated Time: 30-45 minutes</p>"},{"location":"installation/#linux-installation","title":"Linux Installation","text":"<p>For Linux servers, the process involves: 1. Java verification 2. Agent file extraction 3. Background service configuration</p> <p>Estimated Time: 20-30 minutes</p>"},{"location":"installation/#installation-phases","title":"Installation Phases","text":""},{"location":"installation/#phase-1-prerequisites","title":"Phase 1: Prerequisites","text":"<p>Install and configure required software:</p> <ul> <li>Cygwin Installation (Windows only)</li> <li>Download and install Cygwin</li> <li>Configure user environment</li> <li> <p>Verify installation</p> </li> <li> <p>Java Configuration</p> </li> <li>Install Java 1.8 or higher</li> <li>Set JAVA_HOME variable</li> <li>Add Java to system PATH</li> </ul>"},{"location":"installation/#phase-2-agent-deployment","title":"Phase 2: Agent Deployment","text":"<p>Deploy the EPMware Agent files:</p> <ul> <li>Download and Extract</li> <li>Obtain agent package</li> <li>Extract to home directory</li> <li> <p>Verify file permissions</p> </li> <li> <p>File Structure</p> </li> <li>Understand agent components</li> <li>Review directory layout</li> <li>Check file integrity</li> </ul>"},{"location":"installation/#phase-3-initial-configuration","title":"Phase 3: Initial Configuration","text":"<p>Complete basic configuration:</p> <ul> <li>Configure agent properties</li> <li>Generate REST API token</li> <li>Test connectivity</li> <li>Schedule agent service</li> </ul>"},{"location":"installation/#quick-installation-guide","title":"Quick Installation Guide","text":"<p>For experienced administrators, here's a quick reference:</p>"},{"location":"installation/#windows-quick-install","title":"Windows Quick Install","text":"<pre><code># 1. Install Cygwin (if not present)\n# Download from www.cygwin.com\n\n# 2. Extract agent files\ncd C:\\cygwin64\\home\\Administrator\nunzip ew_agent_files.zip\n\n# 3. Configure properties\nedit agent.properties\n\n# 4. Test connection\n./ew_target_service.sh\n\n# 5. Schedule task\n# Use Task Scheduler to create \"EPMWARE TARGET AGENT SERVICE\"\n</code></pre>"},{"location":"installation/#linux-quick-install","title":"Linux Quick Install","text":"<pre><code># 1. Verify Java\njava -version\n\n# 2. Extract agent files\ncd /home/epmadmin\nunzip ew_agent_files.zip\n\n# 3. Configure properties\nvi agent.properties\n\n# 4. Test connection\n./ew_target_service.sh\n\n# 5. Run as background service\nnohup ./ew_target_service.sh &amp;\n</code></pre>"},{"location":"installation/#post-installation-tasks","title":"Post-Installation Tasks","text":"<p>After installation, complete these tasks:</p> <ol> <li>Verify Installation</li> <li>Check agent logs for successful startup</li> <li>Confirm polling is active</li> <li> <p>Test connection from EPMware</p> </li> <li> <p>Configure Applications</p> </li> <li>Set up HFM integration if needed</li> <li>Configure Planning applications</li> <li> <p>Set up Cloud EPM connections</p> </li> <li> <p>Security Hardening</p> </li> <li>Set appropriate file permissions</li> <li>Configure firewall rules</li> <li> <p>Implement token rotation schedule</p> </li> <li> <p>Documentation</p> </li> <li>Document configuration settings</li> <li>Record service account details</li> <li>Note any customizations</li> </ol>"},{"location":"installation/#common-installation-scenarios","title":"Common Installation Scenarios","text":""},{"location":"installation/#scenario-1-single-server-multiple-applications","title":"Scenario 1: Single Server, Multiple Applications","text":"<p>Installing agent on a server hosting multiple EPM applications: - Install agent once - Configure for all applications - Use single polling interval</p>"},{"location":"installation/#scenario-2-distributed-environment","title":"Scenario 2: Distributed Environment","text":"<p>Installing agents across multiple servers: - Install agent on each application server - Use unique tokens per agent - Coordinate polling intervals</p>"},{"location":"installation/#scenario-3-cloud-and-on-premise-hybrid","title":"Scenario 3: Cloud and On-Premise Hybrid","text":"<p>Installing for mixed environment: - Install on-premise agent for local apps - Configure EPM Automate for cloud apps - Manage both through EPMware</p>"},{"location":"installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"installation/#common-installation-issues","title":"Common Installation Issues","text":"Issue Solution Permission denied during extraction Run as administrator or check user permissions Java not found Install Java and set PATH variable Cygwin not working Reinstall with default packages Cannot create directories Check disk space and permissions"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during installation:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Review agent logs for error messages</li> <li>Contact EPMware Support at support@epmware.com</li> </ol> <p>Best Practice</p> <p>Always perform a test installation in a non-production environment first to familiarize yourself with the process and identify any environment-specific issues.</p> <p>Security Note</p> <p>Never install the agent using a personal user account. Always use a dedicated service account with appropriate permissions.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Begin the installation process:</p> <ol> <li>Install Prerequisites - Set up required software</li> <li>Deploy Agent Files - Extract and organize agent components</li> <li>Configure Agent - Set up properties and authentication</li> </ol>"},{"location":"installation/agent/","title":"Agent Installation Overview","text":""},{"location":"installation/agent/#agent-installation-overview","title":"Agent Installation Overview","text":"<p>This section covers the deployment and setup of EPMware Agent files on your server. The agent installation involves extracting files to the appropriate location and verifying the installation structure.</p>"},{"location":"installation/agent/#installation-process","title":"Installation Process","text":"<ul> <li> <p> Download and Extract   Obtain and deploy agent files to the server</p> </li> <li> <p> File Structure   Understand agent components and directory layout</p> </li> </ul>"},{"location":"installation/agent/#installation-steps-summary","title":"Installation Steps Summary","text":""},{"location":"installation/agent/#step-1-obtain-agent-package","title":"Step 1: Obtain Agent Package","text":"<ul> <li>Download <code>ew_agent_files.zip</code> from EPMware</li> <li>Transfer to target server</li> <li>Verify file integrity</li> </ul>"},{"location":"installation/agent/#step-2-extract-files","title":"Step 2: Extract Files","text":"<ul> <li>Extract to user home directory</li> <li>Verify extraction location</li> <li>Check file permissions</li> </ul>"},{"location":"installation/agent/#step-3-verify-structure","title":"Step 3: Verify Structure","text":"<ul> <li>Confirm all files present</li> <li>Review directory layout</li> <li>Set appropriate permissions</li> </ul>"},{"location":"installation/agent/#pre-installation-checklist","title":"Pre-Installation Checklist","text":"<p>Before installing the agent files:</p>"},{"location":"installation/agent/#prerequisites-completed","title":"Prerequisites Completed","text":"<ul> <li>[ ] Cygwin installed (Windows only)</li> <li>[ ] Java configured and accessible</li> <li>[ ] User account created for agent</li> <li>[ ] Home directory accessible</li> </ul>"},{"location":"installation/agent/#information-ready","title":"Information Ready","text":"<ul> <li>[ ] Know installation directory path</li> <li>[ ] Have agent package file</li> <li>[ ] Understand file structure requirements</li> </ul>"},{"location":"installation/agent/#system-prepared","title":"System Prepared","text":"<ul> <li>[ ] Sufficient disk space (minimum 1GB)</li> <li>[ ] Required permissions available</li> <li>[ ] Network connectivity verified</li> </ul>"},{"location":"installation/agent/#installation-locations","title":"Installation Locations","text":""},{"location":"installation/agent/#standard-installation-paths","title":"Standard Installation Paths","text":"<p>Windows (with Cygwin): </p><pre><code>C:\\cygwin64\\home\\[username]\\\n</code></pre><p></p> <p>Linux: </p><pre><code>/home/[username]/\nor\n/opt/epmware/agent/\n</code></pre><p></p>"},{"location":"installation/agent/#directory-structure-after-installation","title":"Directory Structure After Installation","text":"<pre><code>[installation_directory]/\n\u251c\u2500\u2500 epmware-agent.jar\n\u251c\u2500\u2500 agent.properties\n\u251c\u2500\u2500 ew_target_service.sh\n\u251c\u2500\u2500 logs/\n\u251c\u2500\u2500 temp/\n\u2514\u2500\u2500 [optional directories]\n</code></pre>"},{"location":"installation/agent/#quick-installation-commands","title":"Quick Installation Commands","text":""},{"location":"installation/agent/#windows-cygwin","title":"Windows (Cygwin)","text":"<pre><code># Navigate to home\ncd ~\n\n# Extract agent\nunzip ew_agent_files.zip\n\n# Set permissions\nchmod +x ew_target_service.sh\n\n# Verify\nls -la\n</code></pre>"},{"location":"installation/agent/#linux","title":"Linux","text":"<pre><code># Navigate to home\ncd /home/epmadmin\n\n# Extract agent\nunzip ew_agent_files.zip\n\n# Set permissions\nchmod 755 ew_target_service.sh\nchmod 600 agent.properties\n\n# Verify\nls -la\n</code></pre>"},{"location":"installation/agent/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/agent/#method-1-direct-extraction","title":"Method 1: Direct Extraction","text":"<p>Extract directly to the target location:</p> <pre><code># Direct extraction\ncd /home/epmadmin\nunzip /tmp/ew_agent_files.zip\n</code></pre>"},{"location":"installation/agent/#method-2-extract-and-move","title":"Method 2: Extract and Move","text":"<p>Extract to temporary location then move:</p> <pre><code># Extract to temp\ncd /tmp\nunzip ew_agent_files.zip\n\n# Move to final location\nmv ew_agent_files/* /home/epmadmin/\n</code></pre>"},{"location":"installation/agent/#method-3-automated-installation","title":"Method 3: Automated Installation","text":"<p>Use a script for consistent installation:</p> <pre><code>#!/bin/bash\n# install_agent.sh\n\nAGENT_USER=\"epmadmin\"\nAGENT_HOME=\"/home/$AGENT_USER\"\nAGENT_ZIP=\"/tmp/ew_agent_files.zip\"\n\n# Extract files\nsu - $AGENT_USER -c \"cd ~ &amp;&amp; unzip $AGENT_ZIP\"\n\n# Set permissions\nchown -R $AGENT_USER:$AGENT_USER $AGENT_HOME\nchmod 755 $AGENT_HOME/*.sh\nchmod 600 $AGENT_HOME/*.properties\n\necho \"Agent installed successfully\"\n</code></pre>"},{"location":"installation/agent/#post-installation-verification","title":"Post-Installation Verification","text":""},{"location":"installation/agent/#file-verification","title":"File Verification","text":"<p>Check that all required files are present:</p> <pre><code># Required files checklist\nfor file in epmware-agent.jar agent.properties ew_target_service.sh; do\n  if [ -f \"$file\" ]; then\n    echo \"\u2713 $file exists\"\n  else\n    echo \"\u2717 $file missing\"\n  fi\ndone\n</code></pre>"},{"location":"installation/agent/#permission-verification","title":"Permission Verification","text":"<p>Ensure correct permissions:</p> <pre><code># Check permissions\nls -la | grep -E \"agent\\.properties|\\.sh|\\.jar\"\n\n# Expected output:\n# -rw------- agent.properties (600)\n# -rwxr-xr-x ew_target_service.sh (755)\n# -rw-r--r-- epmware-agent.jar (644)\n</code></pre>"},{"location":"installation/agent/#structure-verification","title":"Structure Verification","text":"<p>Confirm directory structure:</p> <pre><code># Display structure\ntree -L 2 ~/\n\n# Or simple listing\nfind ~ -maxdepth 2 -type d | sort\n</code></pre>"},{"location":"installation/agent/#common-installation-scenarios","title":"Common Installation Scenarios","text":""},{"location":"installation/agent/#scenario-1-fresh-installation","title":"Scenario 1: Fresh Installation","text":"<p>New agent installation on clean system:</p> <ol> <li>Install prerequisites</li> <li>Create agent user</li> <li>Extract agent files</li> <li>Configure properties</li> <li>Start agent</li> </ol>"},{"location":"installation/agent/#scenario-2-upgrade-installation","title":"Scenario 2: Upgrade Installation","text":"<p>Upgrading existing agent:</p> <ol> <li>Stop current agent</li> <li>Backup configuration</li> <li>Extract new files</li> <li>Restore configuration</li> <li>Restart agent</li> </ol>"},{"location":"installation/agent/#scenario-3-migration-installation","title":"Scenario 3: Migration Installation","text":"<p>Moving agent to new server:</p> <ol> <li>Backup old configuration</li> <li>Install on new server</li> <li>Copy configuration</li> <li>Update server-specific settings</li> <li>Test and cutover</li> </ol>"},{"location":"installation/agent/#installation-best-practices","title":"Installation Best Practices","text":""},{"location":"installation/agent/#security-practices","title":"Security Practices","text":"<ol> <li>Use Dedicated User - Don't use root/Administrator</li> <li>Restrict Permissions - Limit file access</li> <li>Secure Transfer - Use SCP/SFTP for file transfer</li> <li>Verify Integrity - Check file checksums</li> </ol>"},{"location":"installation/agent/#organization-practices","title":"Organization Practices","text":"<ol> <li>Consistent Paths - Use standard directories</li> <li>Clear Naming - Use descriptive names</li> <li>Document Setup - Record installation details</li> <li>Version Control - Track configuration files</li> </ol>"},{"location":"installation/agent/#maintenance-practices","title":"Maintenance Practices","text":"<ol> <li>Regular Backups - Backup before changes</li> <li>Clean Installation - Remove old files</li> <li>Log Rotation - Plan for log management</li> <li>Update Schedule - Plan agent updates</li> </ol>"},{"location":"installation/agent/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"installation/agent/#common-issues","title":"Common Issues","text":"Issue Cause Solution Files in wrong location Extracted with path Move to correct directory Permission denied Incorrect ownership Fix with chown/chmod Missing files Incomplete extraction Re-extract from zip Cannot find Java PATH not set Configure environment"},{"location":"installation/agent/#installation-validation-script","title":"Installation Validation Script","text":"<pre><code>#!/bin/bash\n# validate_installation.sh\n\necho \"=== EPMware Agent Installation Validation ===\"\n\n# Check Java\nif command -v java &amp;&gt; /dev/null; then\n    echo \"\u2713 Java found: $(java -version 2&gt;&amp;1 | head -1)\"\nelse\n    echo \"\u2717 Java not found\"\nfi\n\n# Check agent files\nfor file in epmware-agent.jar agent.properties ew_target_service.sh; do\n    if [ -f \"$file\" ]; then\n        echo \"\u2713 $file present\"\n    else\n        echo \"\u2717 $file missing\"\n    fi\ndone\n\n# Check permissions\nif [ -x \"ew_target_service.sh\" ]; then\n    echo \"\u2713 Service script is executable\"\nelse\n    echo \"\u2717 Service script not executable\"\nfi\n\n# Check disk space\nAVAILABLE=$(df -h . | awk 'NR==2 {print $4}')\necho \"\u2139 Available disk space: $AVAILABLE\"\n</code></pre>"},{"location":"installation/agent/#multiple-agent-installations","title":"Multiple Agent Installations","text":""},{"location":"installation/agent/#installing-multiple-agents","title":"Installing Multiple Agents","text":"<p>For multiple agents on one server:</p> <pre><code># Create separate users\nfor app in hfm planning essbase; do\n    sudo useradd -m agent_$app\n    sudo -u agent_$app -i bash -c \"cd ~ &amp;&amp; unzip /tmp/ew_agent_files.zip\"\ndone\n\n# Each agent has own:\n# - User account\n# - Home directory\n# - Configuration\n# - Log files\n</code></pre>"},{"location":"installation/agent/#managing-multiple-agents","title":"Managing Multiple Agents","text":"<pre><code># Start all agents\nfor user in agent_*; do\n    sudo -u $user -i ./ew_target_service.sh &amp;\ndone\n\n# Check status\nps aux | grep epmware-agent\n</code></pre>"},{"location":"installation/agent/#next-steps","title":"Next Steps","text":"<p>After installing agent files:</p> <ol> <li>Review File Structure - Understand components</li> <li>Configure Properties - Set up configuration</li> <li>Configure Service - Prepare startup script</li> <li>Test Installation - Verify functionality</li> </ol> <p>Installation Progress</p> <p>Once files are extracted and verified, the agent installation is complete. Proceed to configuration to enable agent functionality.</p> <p>Installation Automation</p> <p>Consider creating installation scripts for consistent deployment across multiple servers. This ensures standardization and reduces errors.</p>"},{"location":"installation/agent/download/","title":"Download and Extract","text":""},{"location":"installation/agent/download/#download-and-extract-agent","title":"Download and Extract Agent","text":""},{"location":"installation/agent/download/#overview","title":"Overview","text":"<p>This section covers downloading the EPMware Agent package and extracting it to the appropriate location on your server. The agent files must be placed in the home directory of the user account that will run the agent service.</p>"},{"location":"installation/agent/download/#obtaining-the-agent-package","title":"Obtaining the Agent Package","text":""},{"location":"installation/agent/download/#download-sources","title":"Download Sources","text":"<p>The EPMware Agent package (<code>ew_agent_files.zip</code>) can be obtained from:</p> <ol> <li>EPMware Support Portal</li> <li>Login to support.epmware.com</li> <li>Navigate to Downloads section</li> <li> <p>Download latest agent version</p> </li> <li> <p>Direct from EPMware Support</p> </li> <li>Contact support@epmware.com</li> <li>Request agent installation files</li> <li> <p>Receive secure download link</p> </li> <li> <p>Your EPMware Implementation Team</p> </li> <li>Provided during initial setup</li> <li>Available from your consultant</li> </ol>"},{"location":"installation/agent/download/#package-information","title":"Package Information","text":"File Name Size Contents <code>ew_agent_files.zip</code> ~50 MB Agent JAR, scripts, configuration templates"},{"location":"installation/agent/download/#version-verification","title":"Version Verification","text":"<p>Check the agent version before installation:</p> <pre><code># After extraction, check version\njava -jar epmware-agent.jar --version\n</code></pre>"},{"location":"installation/agent/download/#pre-extraction-setup","title":"Pre-Extraction Setup","text":""},{"location":"installation/agent/download/#identify-installation-directory","title":"Identify Installation Directory","text":"<p>The agent must be installed in the user's home directory:</p> <p>Windows (Cygwin): - Default: <code>C:\\cygwin64\\home\\[username]\\</code> - Example: <code>C:\\cygwin64\\home\\Administrator\\</code></p> <p>Linux: - Default: <code>/home/[username]/</code> - Example: <code>/home/epmadmin/</code></p>"},{"location":"installation/agent/download/#create-user-directory-if-needed","title":"Create User Directory (if needed)","text":"<p>Windows: </p><pre><code># Open Cygwin Terminal as target user\n# Directory created automatically on first login\ncd ~\npwd\n</code></pre><p></p> <p>Linux: </p><pre><code># Create user if not exists\nsudo useradd -m epmadmin\nsudo passwd epmadmin\n\n# Verify directory\nls -la /home/epmadmin\n</code></pre><p></p>"},{"location":"installation/agent/download/#extraction-process","title":"Extraction Process","text":""},{"location":"installation/agent/download/#windows-extraction","title":"Windows Extraction","text":""},{"location":"installation/agent/download/#method-1-using-windows-explorer","title":"Method 1: Using Windows Explorer","text":"<ol> <li>Navigate to the home directory:</li> <li>Open File Explorer</li> <li> <p>Go to <code>C:\\cygwin64\\home\\[username]\\</code></p> </li> <li> <p>Copy the agent zip file to this location</p> </li> <li> <p>Right-click <code>ew_agent_files.zip</code></p> </li> <li> <p>Select Extract All...</p> </li> <li> <p>Important: Set extraction path to the home directory itself</p> </li> <li>Remove any subfolder from the path</li> <li>Should extract directly to <code>C:\\cygwin64\\home\\[username]\\</code></li> </ol> <p> Windows extraction dialog - ensure correct path</p>"},{"location":"installation/agent/download/#method-2-using-cygwin-terminal","title":"Method 2: Using Cygwin Terminal","text":"<pre><code># Navigate to home directory\ncd ~\n\n# Copy zip file to home directory (adjust source path)\ncp /cygdrive/c/Users/[WindowsUser]/Downloads/ew_agent_files.zip .\n\n# Extract files\nunzip ew_agent_files.zip\n\n# Verify extraction\nls -la\n</code></pre>"},{"location":"installation/agent/download/#linux-extraction","title":"Linux Extraction","text":"<pre><code># Navigate to home directory\ncd ~\n\n# Copy agent zip file (adjust source path)\ncp /tmp/ew_agent_files.zip .\n\n# Extract files\nunzip ew_agent_files.zip\n\n# If unzip not available, install it\n# RHEL/CentOS: sudo yum install unzip\n# Ubuntu: sudo apt-get install unzip\n\n# Verify extraction\nls -la\n</code></pre>"},{"location":"installation/agent/download/#post-extraction-verification","title":"Post-Extraction Verification","text":""},{"location":"installation/agent/download/#expected-directory-structure","title":"Expected Directory Structure","text":"<p>After extraction, verify the following structure:</p> <pre><code>home/[username]/\n\u251c\u2500\u2500 epmware-agent.jar       # Main agent executable\n\u251c\u2500\u2500 agent.properties         # Configuration file\n\u251c\u2500\u2500 ew_target_service.sh     # Service startup script\n\u251c\u2500\u2500 logs/                    # Log directory (created on first run)\n\u2502   \u251c\u2500\u2500 agent.log           \n\u2502   \u2514\u2500\u2500 agent-poll.log      \n\u251c\u2500\u2500 temp/                    # Temporary files directory\n\u2514\u2500\u2500 lib/                     # Additional libraries (if any)\n</code></pre> <p> Extracted agent files in home directory</p>"},{"location":"installation/agent/download/#file-permissions","title":"File Permissions","text":""},{"location":"installation/agent/download/#windows-cygwin","title":"Windows (Cygwin)","text":"<pre><code># Check permissions\nls -la ~/\n\n# Set execute permission for script\nchmod +x ew_target_service.sh\n\n# Ensure read/write for properties\nchmod 644 agent.properties\n</code></pre>"},{"location":"installation/agent/download/#linux","title":"Linux","text":"<pre><code># Set appropriate permissions\nchmod 755 ~/\nchmod 755 ew_target_service.sh\nchmod 600 agent.properties  # Restrict access to properties file\nchmod 644 epmware-agent.jar\n\n# Set ownership\nchown -R epmadmin:epmadmin ~/\n</code></pre>"},{"location":"installation/agent/download/#common-extraction-issues","title":"Common Extraction Issues","text":""},{"location":"installation/agent/download/#issue-files-in-wrong-directory","title":"Issue: Files in Wrong Directory","text":"<p>Problem: Files extracted to subfolder like <code>home/[username]/ew_agent_files/</code></p> <p>Solution: </p><pre><code># Move files to correct location\ncd ~\nmv ew_agent_files/* .\nmv ew_agent_files/.* . 2&gt;/dev/null  # Hidden files if any\nrmdir ew_agent_files\n</code></pre><p></p>"},{"location":"installation/agent/download/#issue-permissions-error","title":"Issue: Permissions Error","text":"<p>Problem: Cannot extract or access files</p> <p>Windows Solution: - Run Cygwin Terminal as Administrator - Ensure Windows user has full control of Cygwin directory</p> <p>Linux Solution: </p><pre><code># Extract as the target user\nsu - epmadmin\nunzip ew_agent_files.zip\n\n# Or fix permissions after\nsudo chown -R epmadmin:epmadmin /home/epmadmin/\n</code></pre><p></p>"},{"location":"installation/agent/download/#issue-corrupted-zip-file","title":"Issue: Corrupted ZIP File","text":"<p>Problem: Extraction fails with errors</p> <p>Solution: 1. Verify file integrity: </p><pre><code># Test zip file\nunzip -t ew_agent_files.zip\n\n# Check file size\nls -lh ew_agent_files.zip\n</code></pre><p></p> <ol> <li> <p>Re-download if corrupted</p> </li> <li> <p>Try alternative extraction tool: </p><pre><code># Using jar command (if available)\njar xvf ew_agent_files.zip\n\n# Using 7zip (if available)\n7z x ew_agent_files.zip\n</code></pre><p></p> </li> </ol>"},{"location":"installation/agent/download/#multiple-agent-installations","title":"Multiple Agent Installations","text":""},{"location":"installation/agent/download/#single-server-multiple-agents","title":"Single Server, Multiple Agents","text":"<p>To run multiple agents on one server:</p> <ol> <li> <p>Create separate users: </p><pre><code># Linux\nsudo useradd -m epmadmin_hfm\nsudo useradd -m epmadmin_planning\n\n# Windows - Create Windows users and login to Cygwin\n</code></pre><p></p> </li> <li> <p>Extract agent to each home directory: </p><pre><code># As each user\nsu - epmadmin_hfm\ncd ~\nunzip /tmp/ew_agent_files.zip\n\nsu - epmadmin_planning\ncd ~\nunzip /tmp/ew_agent_files.zip\n</code></pre><p></p> </li> <li> <p>Configure unique settings per agent</p> </li> </ol>"},{"location":"installation/agent/download/#shared-installation-not-recommended","title":"Shared Installation (Not Recommended)","text":"<p>While possible, sharing agent files is not recommended: - Complicates configuration management - Log files will conflict - Updates affect all instances</p>"},{"location":"installation/agent/download/#backup-original-files","title":"Backup Original Files","text":"<p>Before configuration, backup the original files:</p> <pre><code># Create backup directory\nmkdir ~/agent_backup_$(date +%Y%m%d)\n\n# Copy original files\ncp agent.properties ~/agent_backup_$(date +%Y%m%d)/\ncp ew_target_service.sh ~/agent_backup_$(date +%Y%m%d)/\n\n# List backups\nls -la ~/agent_backup_*\n</code></pre>"},{"location":"installation/agent/download/#security-considerations","title":"Security Considerations","text":""},{"location":"installation/agent/download/#file-security","title":"File Security","text":"<ol> <li> <p>Protect Configuration Files: </p><pre><code># Restrict access to properties\nchmod 600 agent.properties\n\n# Verify no sensitive data in world-readable files\nfind ~ -type f -perm /004 -name \"*.properties\"\n</code></pre><p></p> </li> <li> <p>Remove Installation Files: </p><pre><code># Remove zip file after extraction\nrm ew_agent_files.zip\n\n# Clear command history if it contains passwords\nhistory -c\n</code></pre><p></p> </li> <li> <p>Audit File Access: </p><pre><code># Linux - Enable auditing\nauditctl -w /home/epmadmin -p rwa -k epmware_agent\n</code></pre><p></p> </li> </ol>"},{"location":"installation/agent/download/#network-security","title":"Network Security","text":"<p>Verify firewall allows required connections:</p> <pre><code># Test connectivity to EPMware\ncurl -I https://your-epmware-server.com\n\n# Check open ports\nnetstat -an | grep LISTEN\n</code></pre>"},{"location":"installation/agent/download/#verification-checklist","title":"Verification Checklist","text":"<p>After extraction, verify:</p> <ul> <li>[ ] All files extracted to correct directory</li> <li>[ ] No nested <code>ew_agent_files</code> subfolder</li> <li>[ ] <code>epmware-agent.jar</code> is present</li> <li>[ ] <code>agent.properties</code> is present</li> <li>[ ] <code>ew_target_service.sh</code> is present</li> <li>[ ] File permissions are correct</li> <li>[ ] User owns all agent files</li> <li>[ ] Original files are backed up</li> </ul>"},{"location":"installation/agent/download/#updating-agent-files","title":"Updating Agent Files","text":""},{"location":"installation/agent/download/#update-process","title":"Update Process","text":"<p>When updating to a new agent version:</p> <ol> <li> <p>Stop Current Agent: </p><pre><code># Stop the running agent\n# Method varies by OS and configuration\n</code></pre><p></p> </li> <li> <p>Backup Current Installation: </p><pre><code>mkdir ~/agent_backup_$(date +%Y%m%d_%H%M%S)\ncp -r *.jar *.properties *.sh ~/agent_backup_$(date +%Y%m%d_%H%M%S)/\n</code></pre><p></p> </li> <li> <p>Extract New Version: </p><pre><code># Extract new files, preserving configurations\nunzip -o ew_agent_files_new.zip -x agent.properties\n</code></pre><p></p> </li> <li> <p>Verify and Restart: </p><pre><code># Check version\njava -jar epmware-agent.jar --version\n\n# Restart agent\n./ew_target_service.sh\n</code></pre><p></p> </li> </ol> <p>Configuration Preservation</p> <p>Always preserve your customized <code>agent.properties</code> file when updating. The <code>-x agent.properties</code> flag in the unzip command excludes it from being overwritten.</p>"},{"location":"installation/agent/download/#next-steps","title":"Next Steps","text":"<p>After successfully extracting the agent files:</p> <ol> <li>Review File Structure - Understand agent components</li> <li>Configure Agent Properties - Set up configuration</li> <li>Generate REST Token - Set up authentication</li> <li>Test Connection - Verify setup</li> </ol>"},{"location":"installation/agent/file-structure/","title":"File Structure","text":""},{"location":"installation/agent/file-structure/#agent-file-structure","title":"Agent File Structure","text":""},{"location":"installation/agent/file-structure/#overview","title":"Overview","text":"<p>Understanding the EPMware Agent file structure is essential for proper configuration, troubleshooting, and maintenance. This section details each component and its purpose.</p>"},{"location":"installation/agent/file-structure/#directory-layout","title":"Directory Layout","text":""},{"location":"installation/agent/file-structure/#complete-file-structure","title":"Complete File Structure","text":"<pre><code>home/[username]/                    # Agent root directory\n\u251c\u2500\u2500 epmware-agent.jar               # Main agent executable\n\u251c\u2500\u2500 agent.properties                # Primary configuration file\n\u251c\u2500\u2500 ew_target_service.sh            # Service startup script\n\u251c\u2500\u2500 logs/                           # Log directory\n\u2502   \u251c\u2500\u2500 agent.log                   # Main activity log\n\u2502   \u251c\u2500\u2500 agent-poll.log              # Polling activity log\n\u2502   \u2514\u2500\u2500 agent-[date].log.gz        # Archived logs\n\u251c\u2500\u2500 temp/                           # Temporary working directory\n\u2502   \u251c\u2500\u2500 deploy_[timestamp]/         # Deployment staging\n\u2502   \u2514\u2500\u2500 import_[timestamp]/         # Import staging\n\u251c\u2500\u2500 lib/                            # Additional libraries (optional)\n\u2502   \u2514\u2500\u2500 *.jar                       # Supporting JAR files\n\u251c\u2500\u2500 config/                         # Additional configurations (optional)\n\u2502   \u251c\u2500\u2500 application.yml             # Spring Boot config\n\u2502   \u2514\u2500\u2500 logback.xml                 # Logging configuration\n\u251c\u2500\u2500 scripts/                        # Custom scripts (optional)\n\u2502   \u251c\u2500\u2500 pre_deploy.sh              # Pre-deployment hooks\n\u2502   \u2514\u2500\u2500 post_deploy.sh             # Post-deployment hooks\n\u2514\u2500\u2500 backup/                         # Configuration backups\n    \u2514\u2500\u2500 agent.properties.[date]     # Backed up configs\n</code></pre>"},{"location":"installation/agent/file-structure/#core-components","title":"Core Components","text":""},{"location":"installation/agent/file-structure/#epmware-agentjar","title":"epmware-agent.jar","text":"<p>The main executable JAR file containing the agent application.</p> <p>Purpose: - Core agent functionality - REST API client - Task execution engine - Logging framework</p> <p>Details: </p><pre><code># Check JAR contents\njar tf epmware-agent.jar | head -20\n\n# Verify integrity\njar tf epmware-agent.jar &gt; /dev/null &amp;&amp; echo \"JAR is valid\"\n\n# Check version\njava -jar epmware-agent.jar --version\n</code></pre><p></p> <p>Size: Typically 25-30 MB</p>"},{"location":"installation/agent/file-structure/#agentproperties","title":"agent.properties","text":"<p>Primary configuration file containing all agent settings.</p> <p>Key Sections: - EPMware connection settings - Authentication tokens - Polling intervals - Directory paths</p> <p>Example Structure: </p><pre><code># EPMware Connection\new.portal.server=servername\new.portal.url=https://url\new.portal.token=token-value\n\n# Agent Configuration\nagent.interval.millisecond=30000\nagent.root.dir=/home/user\n</code></pre><p></p> <p>Security</p> <p>This file contains sensitive information. Always restrict access with appropriate permissions.</p>"},{"location":"installation/agent/file-structure/#ew_target_servicesh","title":"ew_target_service.sh","text":"<p>Shell script that starts the agent service.</p> <p>Purpose: - Sets environment variables - Configures Java options - Launches the agent JAR - Manages process lifecycle</p> <p>Default Content: </p><pre><code>#!/bin/bash\n#mvn spring-boot:run\nHOME=/home/Administrator\ncd $HOME\njava -jar epmware-agent.jar --spring.config.name=agent\n</code></pre><p></p> <p>Customization Points: - HOME path adjustment - Java memory settings - Additional JVM options</p>"},{"location":"installation/agent/file-structure/#log-directory","title":"Log Directory","text":""},{"location":"installation/agent/file-structure/#agentlog","title":"agent.log","text":"<p>Main activity log containing: - Deployment operations - Import/export activities - Error messages - Debug information</p> <p>Sample Content: </p><pre><code>2023-11-15 10:30:00 INFO  Starting deployment for HFM_PROD\n2023-11-15 10:30:05 INFO  Connecting to target application\n2023-11-15 10:30:10 INFO  Deploying metadata file: entity.xml\n2023-11-15 10:31:00 INFO  Deployment completed successfully\n</code></pre><p></p>"},{"location":"installation/agent/file-structure/#agent-polllog","title":"agent-poll.log","text":"<p>Polling activity log showing: - Regular polling intervals - Connection status - Task retrieval</p> <p>Sample Content: </p><pre><code>2023-11-15 10:30:00 Polling EPMware for tasks...\n2023-11-15 10:30:01 No pending tasks\n2023-11-15 10:30:31 Polling EPMware for tasks...\n2023-11-15 10:30:32 Retrieved 1 task(s)\n</code></pre><p></p>"},{"location":"installation/agent/file-structure/#log-rotation","title":"Log Rotation","text":"<p>Logs are automatically rotated based on: - Size (default: 10MB) - Age (default: 30 days) - Count (default: 10 files)</p> <p>Archive Format: </p><pre><code>agent-2023-11-15.log.gz\nagent-poll-2023-11-15.log.gz\n</code></pre><p></p>"},{"location":"installation/agent/file-structure/#temporary-directory","title":"Temporary Directory","text":""},{"location":"installation/agent/file-structure/#purpose","title":"Purpose","text":"<p>The <code>temp/</code> directory is used for: - Staging deployment files - Processing import/export operations - Caching downloaded content - Working space for transformations</p>"},{"location":"installation/agent/file-structure/#structure","title":"Structure","text":"<pre><code>temp/\n\u251c\u2500\u2500 deploy_20231115_103000/\n\u2502   \u251c\u2500\u2500 metadata.xml\n\u2502   \u2514\u2500\u2500 validation.log\n\u251c\u2500\u2500 import_20231115_110000/\n\u2502   \u251c\u2500\u2500 extracted_data.csv\n\u2502   \u2514\u2500\u2500 transform.log\n\u2514\u2500\u2500 cache/\n    \u2514\u2500\u2500 templates/\n</code></pre>"},{"location":"installation/agent/file-structure/#cleanup","title":"Cleanup","text":"<p>Temporary files are cleaned up: - After successful operation completion - On agent restart - Based on retention policy (default: 7 days)</p>"},{"location":"installation/agent/file-structure/#optional-directories","title":"Optional Directories","text":""},{"location":"installation/agent/file-structure/#lib-directory","title":"lib/ Directory","text":"<p>Contains additional JAR files for: - Database drivers - Custom extensions - Third-party libraries</p> <p>Example: </p><pre><code>lib/\n\u251c\u2500\u2500 ojdbc8.jar          # Oracle JDBC driver\n\u251c\u2500\u2500 mysql-connector.jar  # MySQL driver\n\u2514\u2500\u2500 custom-utils.jar    # Custom utilities\n</code></pre><p></p>"},{"location":"installation/agent/file-structure/#config-directory","title":"config/ Directory","text":"<p>Additional configuration files:</p> <p>application.yml: </p><pre><code>spring:\n  application:\n    name: epmware-agent\n  profiles:\n    active: production\n\nlogging:\n  level:\n    root: INFO\n    com.epmware: DEBUG\n</code></pre><p></p> <p>logback.xml: </p><pre><code>&lt;configuration&gt;\n    &lt;appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\"&gt;\n        &lt;file&gt;logs/agent.log&lt;/file&gt;\n        &lt;encoder&gt;\n            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss} %-5level %msg%n&lt;/pattern&gt;\n        &lt;/encoder&gt;\n    &lt;/appender&gt;\n&lt;/configuration&gt;\n</code></pre><p></p>"},{"location":"installation/agent/file-structure/#scripts-directory","title":"scripts/ Directory","text":"<p>Custom automation scripts:</p> <p>pre_deploy.sh: </p><pre><code>#!/bin/bash\n# Pre-deployment validation\necho \"Validating deployment package...\"\n# Custom validation logic\n</code></pre><p></p> <p>post_deploy.sh: </p><pre><code>#!/bin/bash\n# Post-deployment cleanup\necho \"Cleaning up temporary files...\"\n# Cleanup logic\n</code></pre><p></p>"},{"location":"installation/agent/file-structure/#file-permissions","title":"File Permissions","text":""},{"location":"installation/agent/file-structure/#recommended-permissions","title":"Recommended Permissions","text":"File/Directory Windows (Cygwin) Linux Notes <code>agent.properties</code> 644 600 Restrict access to sensitive data <code>*.sh</code> scripts 755 755 Execute permission required <code>*.jar</code> files 644 644 Read access sufficient <code>logs/</code> 755 755 Write permission for agent user <code>temp/</code> 755 755 Write permission for agent user"},{"location":"installation/agent/file-structure/#setting-permissions","title":"Setting Permissions","text":"<p>Linux: </p><pre><code># Set permissions\nchmod 600 agent.properties\nchmod 755 *.sh\nchmod 644 *.jar\nchmod 755 logs temp\n\n# Set ownership\nchown -R epmadmin:epmadmin /home/epmadmin\n</code></pre><p></p> <p>Windows (Cygwin): </p><pre><code># Set permissions\nchmod 644 agent.properties\nchmod 755 *.sh\nchmod 644 *.jar\n</code></pre><p></p>"},{"location":"installation/agent/file-structure/#file-size-management","title":"File Size Management","text":""},{"location":"installation/agent/file-structure/#monitoring-disk-usage","title":"Monitoring Disk Usage","text":"<pre><code># Check overall usage\ndu -sh ~/\n\n# Check specific directories\ndu -sh logs/\ndu -sh temp/\n\n# Find large files\nfind ~ -type f -size +100M\n</code></pre>"},{"location":"installation/agent/file-structure/#space-requirements","title":"Space Requirements","text":"Component Typical Size Maximum Size Agent files 50 MB 100 MB Logs (active) 100 MB 1 GB Logs (archived) 500 MB 5 GB Temp files 100 MB 2 GB Total 750 MB 8 GB"},{"location":"installation/agent/file-structure/#backup-strategy","title":"Backup Strategy","text":""},{"location":"installation/agent/file-structure/#what-to-backup","title":"What to Backup","text":"<p>Priority files for backup: 1. <code>agent.properties</code> - Critical configuration 2. <code>*.sh</code> scripts - Customized scripts 3. <code>config/</code> directory - Additional configs 4. <code>scripts/</code> directory - Custom automation</p>"},{"location":"installation/agent/file-structure/#backup-script","title":"Backup Script","text":"<pre><code>#!/bin/bash\n# Agent backup script\nBACKUP_DIR=\"/backup/epmware/$(date +%Y%m%d)\"\nmkdir -p $BACKUP_DIR\n\n# Backup critical files\ncp agent.properties $BACKUP_DIR/\ncp *.sh $BACKUP_DIR/\ncp -r config/ $BACKUP_DIR/ 2&gt;/dev/null\ncp -r scripts/ $BACKUP_DIR/ 2&gt;/dev/null\n\n# Create archive\ntar -czf $BACKUP_DIR.tar.gz $BACKUP_DIR\nrm -rf $BACKUP_DIR\n\necho \"Backup created: $BACKUP_DIR.tar.gz\"\n</code></pre>"},{"location":"installation/agent/file-structure/#troubleshooting-file-issues","title":"Troubleshooting File Issues","text":""},{"location":"installation/agent/file-structure/#missing-files","title":"Missing Files","text":"Missing File Impact Resolution <code>epmware-agent.jar</code> Agent won't start Re-extract from zip <code>agent.properties</code> No configuration Create from template <code>ew_target_service.sh</code> Can't start service Re-extract or recreate"},{"location":"installation/agent/file-structure/#corrupted-files","title":"Corrupted Files","text":"<p>Check JAR integrity: </p><pre><code># Test JAR file\njava -jar epmware-agent.jar --test\n# Or\njar tf epmware-agent.jar &gt; /dev/null\necho \"Exit code: $?\"  # Should be 0\n</code></pre><p></p> <p>Verify configuration: </p><pre><code># Check properties syntax\ngrep -E \"^[^#].*=\" agent.properties\n</code></pre><p></p>"},{"location":"installation/agent/file-structure/#permission-issues","title":"Permission Issues","text":"<p>Common problems and fixes:</p> <pre><code># Fix: Cannot execute script\nchmod +x ew_target_service.sh\n\n# Fix: Cannot write logs\nchmod 755 logs\nmkdir -p logs\n\n# Fix: Cannot read properties\nchmod 644 agent.properties\n</code></pre>"},{"location":"installation/agent/file-structure/#best-practices","title":"Best Practices","text":""},{"location":"installation/agent/file-structure/#file-organization","title":"File Organization","text":"<ol> <li>Keep root clean - Only essential files in home directory</li> <li>Use subdirectories - Organize custom content</li> <li>Regular cleanup - Remove old logs and temp files</li> <li>Document changes - Track modifications to scripts</li> </ol>"},{"location":"installation/agent/file-structure/#security","title":"Security","text":"<ol> <li>Restrict access - Limit file permissions</li> <li>Protect tokens - Secure agent.properties</li> <li>Audit access - Monitor file access logs</li> <li>Encrypt backups - Protect backed up configurations</li> </ol>"},{"location":"installation/agent/file-structure/#maintenance","title":"Maintenance","text":"<ol> <li>Monitor growth - Watch log and temp directories</li> <li>Archive old logs - Compress and move old files</li> <li>Update documentation - Keep file inventory current</li> <li>Test recovery - Verify backup restoration</li> </ol>"},{"location":"installation/agent/file-structure/#environment-specific-structures","title":"Environment-Specific Structures","text":""},{"location":"installation/agent/file-structure/#development-environment","title":"Development Environment","text":"<p>Simplified structure for development: </p><pre><code>home/dev_user/\n\u251c\u2500\u2500 epmware-agent.jar\n\u251c\u2500\u2500 agent.properties\n\u251c\u2500\u2500 ew_target_service.sh\n\u2514\u2500\u2500 logs/\n</code></pre><p></p>"},{"location":"installation/agent/file-structure/#production-environment","title":"Production Environment","text":"<p>Complete structure with monitoring: </p><pre><code>home/prod_user/\n\u251c\u2500\u2500 epmware-agent.jar\n\u251c\u2500\u2500 agent.properties\n\u251c\u2500\u2500 ew_target_service.sh\n\u251c\u2500\u2500 logs/\n\u251c\u2500\u2500 config/\n\u251c\u2500\u2500 scripts/\n\u251c\u2500\u2500 backup/\n\u2514\u2500\u2500 monitoring/\n    \u251c\u2500\u2500 health_check.sh\n    \u2514\u2500\u2500 metrics.log\n</code></pre><p></p>"},{"location":"installation/agent/file-structure/#next-steps","title":"Next Steps","text":"<p>After understanding the file structure:</p> <ol> <li>Configure Agent Properties</li> <li>Set Up Service Configuration</li> <li>Generate REST Token</li> <li>Test the Installation</li> </ol>"},{"location":"installation/prerequisites/","title":"Prerequisites Overview","text":""},{"location":"installation/prerequisites/#prerequisites-overview","title":"Prerequisites Overview","text":"<p>Before installing the EPMware Agent, certain software prerequisites must be met. This section guides you through installing and configuring the required components.</p>"},{"location":"installation/prerequisites/#required-software","title":"Required Software","text":"<ul> <li> <p> Cygwin (Windows only)   Linux-like environment for Windows systems</p> </li> <li> <p> Java (All platforms)   Java Runtime Environment 1.8 or higher</p> </li> <li> <p> Compression Tools   zip/unzip utilities for package extraction</p> </li> </ul>"},{"location":"installation/prerequisites/#platform-specific-requirements","title":"Platform-Specific Requirements","text":""},{"location":"installation/prerequisites/#windows-prerequisites","title":"Windows Prerequisites","text":"<p>For Windows servers, you need:</p> <ol> <li>Cygwin - Provides Unix-like environment</li> <li>Enables shell script execution</li> <li>Creates user home directories</li> <li> <p>Provides command-line tools</p> </li> <li> <p>Java JRE/JDK - Runtime environment</p> </li> <li>Version 1.8 or higher</li> <li>64-bit recommended</li> <li> <p>Added to system PATH</p> </li> <li> <p>Administrative Access - For installation</p> </li> <li>Install software</li> <li>Configure services</li> <li>Modify system settings</li> </ol>"},{"location":"installation/prerequisites/#linux-prerequisites","title":"Linux Prerequisites","text":"<p>For Linux servers, you need:</p> <ol> <li>Java JRE/JDK - Runtime environment</li> <li>OpenJDK or Oracle Java</li> <li>Version 1.8 or higher</li> <li> <p>Configured in PATH</p> </li> <li> <p>Standard Tools - Usually pre-installed</p> </li> <li>bash shell</li> <li>zip/unzip</li> <li> <p>curl or wget</p> </li> <li> <p>User Account - For agent operation</p> </li> <li>Home directory access</li> <li>Read/write permissions</li> <li>Network access rights</li> </ol>"},{"location":"installation/prerequisites/#quick-prerequisites-check","title":"Quick Prerequisites Check","text":""},{"location":"installation/prerequisites/#windows-quick-check","title":"Windows Quick Check","text":"<pre><code>REM Check Java\njava -version\n\nREM Check Cygwin\nC:\\cygwin64\\bin\\bash --version\n\nREM Check zip\nwhere zip\n</code></pre>"},{"location":"installation/prerequisites/#linux-quick-check","title":"Linux Quick Check","text":"<pre><code># Check Java\njava -version\n\n# Check shell\necho $SHELL\n\n# Check tools\nwhich zip unzip curl\n</code></pre>"},{"location":"installation/prerequisites/#installation-order","title":"Installation Order","text":"<p>Follow this sequence for best results:</p> <ol> <li>Operating System Updates</li> <li>Apply latest patches</li> <li> <p>Reboot if required</p> </li> <li> <p>Cygwin (Windows only)</p> </li> <li>Download and install</li> <li>Configure user environment</li> <li> <p>Verify terminal access</p> </li> <li> <p>Java</p> </li> <li>Install JRE or JDK</li> <li>Set JAVA_HOME</li> <li>Add to PATH</li> <li> <p>Verify installation</p> </li> <li> <p>Network Configuration</p> </li> <li>Open required ports</li> <li>Configure proxy (if needed)</li> <li>Test connectivity</li> </ol>"},{"location":"installation/prerequisites/#prerequisite-validation","title":"Prerequisite Validation","text":""},{"location":"installation/prerequisites/#system-requirements-check","title":"System Requirements Check","text":"<p>Verify your system meets minimum requirements:</p> <pre><code># Check CPU\nlscpu | grep \"CPU(s)\"  # Linux\nwmic cpu get NumberOfCores  # Windows\n\n# Check Memory\nfree -h  # Linux\nwmic OS get TotalVisibleMemorySize  # Windows\n\n# Check Disk Space\ndf -h  # Linux\nwmic logicaldisk get size,freespace  # Windows\n</code></pre>"},{"location":"installation/prerequisites/#software-version-check","title":"Software Version Check","text":"<p>Ensure correct versions are installed:</p> Software Minimum Version Check Command Java 1.8 <code>java -version</code> Cygwin 3.0 <code>uname -r</code> (in Cygwin) bash 4.0 <code>bash --version</code>"},{"location":"installation/prerequisites/#common-prerequisite-issues","title":"Common Prerequisite Issues","text":""},{"location":"installation/prerequisites/#issue-java-not-found","title":"Issue: Java Not Found","text":"<p>Symptoms: - <code>'java' is not recognized as an internal or external command</code> - <code>bash: java: command not found</code></p> <p>Solution: 1. Install Java if missing 2. Add Java to PATH 3. Restart terminal/command prompt</p>"},{"location":"installation/prerequisites/#issue-cygwin-not-working-windows","title":"Issue: Cygwin Not Working (Windows)","text":"<p>Symptoms: - Cannot open Cygwin terminal - Scripts fail with \"bad interpreter\"</p> <p>Solution: 1. Reinstall Cygwin 2. Ensure proper installation path 3. Check Windows environment variables</p>"},{"location":"installation/prerequisites/#issue-insufficient-permissions","title":"Issue: Insufficient Permissions","text":"<p>Symptoms: - Cannot create directories - Permission denied errors</p> <p>Solution: 1. Run as administrator (Windows) 2. Use sudo (Linux) 3. Check user permissions</p>"},{"location":"installation/prerequisites/#environment-preparation","title":"Environment Preparation","text":""},{"location":"installation/prerequisites/#create-agent-user-recommended","title":"Create Agent User (Recommended)","text":"<p>Windows: </p><pre><code>REM Create local user\nnet user epmware_agent Password123! /add\nnet localgroup Administrators epmware_agent /add\n</code></pre><p></p> <p>Linux: </p><pre><code># Create user with home directory\nsudo useradd -m -s /bin/bash epmware_agent\nsudo passwd epmware_agent\n</code></pre><p></p>"},{"location":"installation/prerequisites/#set-up-directory-structure","title":"Set Up Directory Structure","text":"<pre><code># Create directories\nmkdir -p /opt/epmware/agent\nmkdir -p /var/log/epmware\nmkdir -p /var/run/epmware\n\n# Set permissions\nchown -R epmware_agent:epmware_agent /opt/epmware\nchmod 755 /opt/epmware/agent\n</code></pre>"},{"location":"installation/prerequisites/#network-prerequisites","title":"Network Prerequisites","text":""},{"location":"installation/prerequisites/#required-connectivity","title":"Required Connectivity","text":"<p>Ensure the agent can reach:</p> <ol> <li>EPMware Server</li> <li>Cloud: Port 443 (HTTPS)</li> <li> <p>On-premise: Configured port</p> </li> <li> <p>Target Applications</p> </li> <li>HFM: Port 19000 (typical)</li> <li>Planning: Port 19000</li> <li>Essbase: Port 1423</li> </ol>"},{"location":"installation/prerequisites/#firewall-configuration","title":"Firewall Configuration","text":"<p>Windows Firewall: </p><pre><code>REM Allow outbound HTTPS\nnetsh advfirewall firewall add rule name=\"EPMware Agent HTTPS\" ^\n  dir=out action=allow protocol=TCP remoteport=443\n</code></pre><p></p> <p>Linux iptables: </p><pre><code># Allow outbound HTTPS\nsudo iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables-save\n</code></pre><p></p>"},{"location":"installation/prerequisites/#proxy-configuration","title":"Proxy Configuration","text":"<p>If using a proxy server:</p> <pre><code># Set proxy environment variables\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport NO_PROXY=localhost,127.0.0.1,internal.domain\n</code></pre>"},{"location":"installation/prerequisites/#prerequisites-for-specific-applications","title":"Prerequisites for Specific Applications","text":""},{"location":"installation/prerequisites/#hfm-prerequisites","title":"HFM Prerequisites","text":"<p>Additional requirements for HFM integration: - HFM client utilities installed - Access to HFM registry files - HFM user credentials</p>"},{"location":"installation/prerequisites/#planning-prerequisites","title":"Planning Prerequisites","text":"<p>Additional requirements for Planning: - Planning utilities accessible - Ability to create encrypted password files - Planning admin credentials</p>"},{"location":"installation/prerequisites/#cloud-epm-prerequisites","title":"Cloud EPM Prerequisites","text":"<p>Additional requirements for cloud: - EPM Automate utility - Cloud service URL - Identity domain information</p>"},{"location":"installation/prerequisites/#validation-checklist","title":"Validation Checklist","text":"<p>Before proceeding to agent installation:</p>"},{"location":"installation/prerequisites/#system-checklist","title":"System Checklist","text":"<ul> <li>[ ] Operating system is supported</li> <li>[ ] Sufficient CPU resources (2+ cores)</li> <li>[ ] Adequate memory (16+ GB)</li> <li>[ ] Available disk space (60+ GB)</li> </ul>"},{"location":"installation/prerequisites/#software-checklist","title":"Software Checklist","text":"<ul> <li>[ ] Cygwin installed (Windows)</li> <li>[ ] Java 1.8+ installed</li> <li>[ ] Java in system PATH</li> <li>[ ] zip/unzip available</li> <li>[ ] Network tools available</li> </ul>"},{"location":"installation/prerequisites/#network-checklist","title":"Network Checklist","text":"<ul> <li>[ ] Can reach EPMware server</li> <li>[ ] Required ports are open</li> <li>[ ] Proxy configured (if needed)</li> <li>[ ] DNS resolution working</li> </ul>"},{"location":"installation/prerequisites/#security-checklist","title":"Security Checklist","text":"<ul> <li>[ ] Agent user account created</li> <li>[ ] Appropriate permissions set</li> <li>[ ] Firewall rules configured</li> <li>[ ] Security policies reviewed</li> </ul>"},{"location":"installation/prerequisites/#troubleshooting-prerequisites","title":"Troubleshooting Prerequisites","text":""},{"location":"installation/prerequisites/#diagnostic-commands","title":"Diagnostic Commands","text":"<p>Run these commands to diagnose issues:</p> <pre><code># System information\nuname -a  # Linux/Cygwin\nsysteminfo  # Windows\n\n# Network diagnostics\nping epmware-server.com\nnslookup epmware-server.com\ntraceroute epmware-server.com  # Linux\ntracert epmware-server.com  # Windows\n\n# Java diagnostics\njava -version\necho $JAVA_HOME\nwhich java\n\n# Permission check\nid  # Linux\nwhoami /all  # Windows\n</code></pre>"},{"location":"installation/prerequisites/#common-fixes","title":"Common Fixes","text":"<ol> <li> <p>Path Issues </p><pre><code># Add to PATH\nexport PATH=$PATH:/usr/local/bin\n# Make permanent in .bashrc or .profile\n</code></pre><p></p> </li> <li> <p>Permission Issues </p><pre><code># Fix ownership\nsudo chown -R $(whoami) /path/to/directory\n</code></pre><p></p> </li> <li> <p>Network Issues </p><pre><code># Test connectivity\ntelnet server.com 443\ncurl -I https://server.com\n</code></pre><p></p> </li> </ol>"},{"location":"installation/prerequisites/#best-practices","title":"Best Practices","text":""},{"location":"installation/prerequisites/#documentation","title":"Documentation","text":"<p>Document your prerequisite configuration: - Java version and location - Cygwin installation path (Windows) - Network settings - User accounts created</p>"},{"location":"installation/prerequisites/#standardization","title":"Standardization","text":"<p>Use consistent configurations across environments: - Same Java version - Identical Cygwin setup (Windows) - Uniform directory structures - Standard user naming</p>"},{"location":"installation/prerequisites/#security","title":"Security","text":"<p>Follow security best practices: - Use dedicated service accounts - Apply principle of least privilege - Keep software updated - Document security exceptions</p> <p>Prerequisite Script</p> <p>Consider creating a script to automatically check all prerequisites. This ensures consistency and saves time during installation.</p> <p>Version Compatibility</p> <p>Always verify that prerequisite versions are compatible with your EPMware Agent version and target applications.</p>"},{"location":"installation/prerequisites/#next-steps","title":"Next Steps","text":"<p>After prerequisites are satisfied:</p> <ol> <li>Install Cygwin - Windows only</li> <li>Configure Java - All platforms</li> <li>Download Agent - Get agent files</li> <li>Begin Installation - Deploy agent</li> </ol>"},{"location":"installation/prerequisites/cygwin/","title":"Installing Cygwin","text":""},{"location":"installation/prerequisites/cygwin/#installing-cygwin","title":"Installing Cygwin","text":""},{"location":"installation/prerequisites/cygwin/#overview","title":"Overview","text":"<p>Cygwin is a required component for running the EPMware Agent on Windows servers. It provides a Linux-like environment that allows the agent's shell scripts to execute properly on Windows systems.</p> <p>Windows Only</p> <p>Cygwin installation is only required for Windows servers. Linux servers can skip this section and proceed to Java Configuration.</p>"},{"location":"installation/prerequisites/cygwin/#prerequisites","title":"Prerequisites","text":"<p>Before installing Cygwin:</p> <ul> <li>[ ] Windows Administrator privileges</li> <li>[ ] Internet connection for downloading packages</li> <li>[ ] At least 1 GB of free disk space</li> <li>[ ] Proxy server information (if applicable)</li> </ul>"},{"location":"installation/prerequisites/cygwin/#download-cygwin","title":"Download Cygwin","text":""},{"location":"installation/prerequisites/cygwin/#step-1-access-cygwin-website","title":"Step 1: Access Cygwin Website","text":"<ol> <li>Navigate to www.cygwin.com</li> <li>Click on \"Install Cygwin\" link</li> <li>Choose the appropriate installer:</li> <li>setup-x86_64.exe for 64-bit Windows (recommended)</li> <li>setup-x86.exe for 32-bit Windows</li> </ol>"},{"location":"installation/prerequisites/cygwin/#step-2-save-the-installer","title":"Step 2: Save the Installer","text":"<ol> <li>Download the setup file to your Desktop or Downloads folder</li> <li>Right-click the downloaded file and select \"Properties\"</li> <li>If blocked, check \"Unblock\" and click OK</li> </ol> <p> Cygwin download page with installer options</p>"},{"location":"installation/prerequisites/cygwin/#installation-process","title":"Installation Process","text":""},{"location":"installation/prerequisites/cygwin/#step-1-run-the-installer","title":"Step 1: Run the Installer","text":"<ol> <li>Right-click setup-x86_64.exe</li> <li>Select Run as administrator</li> <li>Click Yes on the User Account Control prompt</li> </ol>"},{"location":"installation/prerequisites/cygwin/#step-2-installation-type","title":"Step 2: Installation Type","text":"<p>Select Install from Internet and click Next</p> <p> Selecting installation type - Install from Internet</p>"},{"location":"installation/prerequisites/cygwin/#step-3-installation-directory","title":"Step 3: Installation Directory","text":"<p>Configure the installation paths:</p> Setting Recommended Value Notes Root Directory <code>C:\\cygwin64</code> Default location recommended Install For All Users Ensures all users can access <p> Configuring Cygwin root directory</p> <p>Custom Installation Path</p> <p>If installing to a different drive, ensure the EPMware Agent configuration reflects the correct path.</p>"},{"location":"installation/prerequisites/cygwin/#step-4-local-package-directory","title":"Step 4: Local Package Directory","text":"<p>Specify where to store downloaded packages:</p> <ul> <li>Recommended: <code>C:\\cygwin64\\packages</code></li> <li>Important: Do not use the Cygwin root folder</li> </ul> <p> Setting local package directory</p>"},{"location":"installation/prerequisites/cygwin/#step-5-connection-method","title":"Step 5: Connection Method","text":"<p>Configure your internet connection:</p> <ul> <li>Direct Connection: If connected directly to the internet</li> <li>Use Proxy: If behind a corporate proxy server</li> </ul> <p>For proxy configuration: </p><pre><code>Proxy Host: proxy.company.com\nPort: 8080\n</code></pre><p></p> <p> Selecting connection method</p>"},{"location":"installation/prerequisites/cygwin/#step-6-download-site-selection","title":"Step 6: Download Site Selection","text":"<p>Choose a mirror site for downloading packages:</p> <ol> <li>Select any available mirror from the list</li> <li>Prefer sites with good connectivity to your location</li> <li>Click Next to proceed</li> </ol> <p> Selecting a download mirror site</p>"},{"location":"installation/prerequisites/cygwin/#step-7-package-selection","title":"Step 7: Package Selection","text":"<p>For EPMware Agent, the default packages are sufficient:</p> <ol> <li>Keep \"Category\" view</li> <li>Leave all defaults selected</li> <li>Click Next to begin installation</li> </ol> <p>Required Packages</p> <p>The EPMware Agent requires only the base Cygwin packages. Additional packages are not necessary unless specified by your environment requirements.</p>"},{"location":"installation/prerequisites/cygwin/#step-8-installation-progress","title":"Step 8: Installation Progress","text":"<p>The installer will: 1. Download selected packages 2. Install Cygwin base system 3. Create shortcuts and icons 4. Configure the environment</p> <p> Cygwin installation in progress</p>"},{"location":"installation/prerequisites/cygwin/#step-9-completion","title":"Step 9: Completion","text":"<ol> <li>Select Create icon on Desktop (optional)</li> <li>Select Add icon to Start Menu (recommended)</li> <li>Click Finish</li> </ol>"},{"location":"installation/prerequisites/cygwin/#post-installation-verification","title":"Post-Installation Verification","text":""},{"location":"installation/prerequisites/cygwin/#verify-installation","title":"Verify Installation","text":"<ol> <li>Open Windows Explorer</li> <li>Navigate to <code>C:\\cygwin64</code></li> <li>Verify the following directories exist:</li> <li><code>bin\\</code></li> <li><code>etc\\</code></li> <li><code>home\\</code></li> <li><code>usr\\</code></li> <li><code>var\\</code></li> </ol>"},{"location":"installation/prerequisites/cygwin/#test-cygwin-terminal","title":"Test Cygwin Terminal","text":"<ol> <li>Double-click the Cygwin Terminal icon on desktop</li> <li> <p>The terminal should open with a prompt:    </p><pre><code>username@hostname ~\n$\n</code></pre><p></p> </li> <li> <p>Test basic commands:    </p><pre><code># Check current directory\npwd\n\n# List files\nls -la\n\n# Check Cygwin version\nuname -a\n</code></pre><p></p> </li> </ol> <p> Cygwin terminal showing successful installation</p>"},{"location":"installation/prerequisites/cygwin/#user-configuration","title":"User Configuration","text":""},{"location":"installation/prerequisites/cygwin/#identify-cygwin-user","title":"Identify Cygwin User","text":"<p>The EPMware Agent will run under a specific Windows user. This user needs a Cygwin home directory:</p> <ol> <li>Open Cygwin Terminal</li> <li>Check current user:    <pre><code>whoami\n</code></pre></li> <li>Verify home directory:    <pre><code>echo $HOME\n</code></pre></li> </ol> <p>Expected output: </p><pre><code>/home/Administrator\n</code></pre><p></p>"},{"location":"installation/prerequisites/cygwin/#create-service-account-home-optional","title":"Create Service Account Home (Optional)","text":"<p>If using a service account:</p> <ol> <li>Open Cygwin Terminal as the service account</li> <li>Cygwin will automatically create the home directory</li> <li>Verify creation:    <pre><code>ls -la /home/\n</code></pre></li> </ol>"},{"location":"installation/prerequisites/cygwin/#environment-variables","title":"Environment Variables","text":""},{"location":"installation/prerequisites/cygwin/#path-configuration","title":"PATH Configuration","text":"<p>Cygwin's bin directory should be in the system PATH:</p> <ol> <li>Open System Properties \u2192 Advanced \u2192 Environment Variables</li> <li>Edit the Path variable</li> <li>Add: <code>C:\\cygwin64\\bin</code></li> </ol>"},{"location":"installation/prerequisites/cygwin/#verify-path","title":"Verify PATH","text":"<pre><code># In Windows Command Prompt\nwhere bash\nwhere ls\n</code></pre> <p>Expected output: </p><pre><code>C:\\cygwin64\\bin\\bash.exe\nC:\\cygwin64\\bin\\ls.exe\n</code></pre><p></p>"},{"location":"installation/prerequisites/cygwin/#required-components-for-epmware","title":"Required Components for EPMware","text":""},{"location":"installation/prerequisites/cygwin/#essential-binaries","title":"Essential Binaries","text":"<p>Verify these commands are available:</p> <pre><code># In Cygwin Terminal\nwhich bash\nwhich java\nwhich zip\nwhich unzip\n</code></pre>"},{"location":"installation/prerequisites/cygwin/#file-permissions","title":"File Permissions","text":"<p>Ensure proper permissions for the agent user:</p> <pre><code># Check permissions\nls -la /home/$(whoami)\n\n# Set correct permissions if needed\nchmod 755 /home/$(whoami)\n</code></pre>"},{"location":"installation/prerequisites/cygwin/#troubleshooting-cygwin-installation","title":"Troubleshooting Cygwin Installation","text":""},{"location":"installation/prerequisites/cygwin/#common-issues","title":"Common Issues","text":"Issue Cause Solution Setup fails to download Proxy/firewall blocking Configure proxy settings or try different mirror \"Permission denied\" errors Incorrect user permissions Run installer as administrator Missing home directory User hasn't logged into Cygwin Open Cygwin Terminal as that user Commands not found PATH not configured Add Cygwin bin to system PATH"},{"location":"installation/prerequisites/cygwin/#reinstallation","title":"Reinstallation","text":"<p>If you need to reinstall Cygwin:</p> <ol> <li>Backup any important files from <code>/home/</code> directories</li> <li>Uninstall Cygwin through Control Panel</li> <li>Delete the <code>C:\\cygwin64</code> directory</li> <li>Run the installer again</li> </ol>"},{"location":"installation/prerequisites/cygwin/#cygwin-updates","title":"Cygwin Updates","text":"<p>To update Cygwin packages:</p> <ol> <li>Run the setup program again</li> <li>Select \"Keep\" for existing packages</li> <li>Update any packages marked with \"New\"</li> </ol>"},{"location":"installation/prerequisites/cygwin/#security-considerations","title":"Security Considerations","text":""},{"location":"installation/prerequisites/cygwin/#file-system-permissions","title":"File System Permissions","text":"<ul> <li>Cygwin inherits Windows NTFS permissions</li> <li>Ensure only authorized users can access Cygwin directories</li> <li>Protect the agent installation directory</li> </ul>"},{"location":"installation/prerequisites/cygwin/#service-account-best-practices","title":"Service Account Best Practices","text":"<ul> <li>Use a dedicated service account for the agent</li> <li>Grant minimum necessary permissions</li> <li>Avoid using domain administrator accounts</li> </ul>"},{"location":"installation/prerequisites/cygwin/#special-considerations-for-epmware","title":"Special Considerations for EPMware","text":""},{"location":"installation/prerequisites/cygwin/#multiple-agents","title":"Multiple Agents","text":"<p>If running multiple agents on the same server:</p> <ol> <li>Use the same Cygwin installation</li> <li>Create separate home directories for each agent</li> <li>Configure unique properties for each instance</li> </ol>"},{"location":"installation/prerequisites/cygwin/#server-specific-requirements","title":"Server-Specific Requirements","text":"<p>For specific EPM applications:</p> <ul> <li>HFM Servers: Ensure Cygwin user can access HFM utilities</li> <li>Planning Servers: Verify access to Planning utilities</li> <li>Essbase Servers: Check MaxL script execution capability</li> </ul>"},{"location":"installation/prerequisites/cygwin/#validation-checklist","title":"Validation Checklist","text":"<p>Before proceeding to agent installation:</p> <ul> <li>[ ] Cygwin installed successfully</li> <li>[ ] Terminal opens without errors</li> <li>[ ] Home directory exists for agent user</li> <li>[ ] Basic commands work (ls, pwd, etc.)</li> <li>[ ] Java is accessible from Cygwin</li> <li>[ ] zip/unzip commands are available</li> </ul> <p>Installation Complete</p> <p>Once Cygwin is installed and verified, proceed to Java Configuration to set up the Java environment.</p>"},{"location":"installation/prerequisites/cygwin/#next-steps","title":"Next Steps","text":"<ol> <li>Configure Java - Set up Java environment</li> <li>Download Agent - Get EPMware Agent files</li> <li>Extract Files - Deploy agent components</li> </ol>"},{"location":"integration/","title":"Application Integration Overview","text":""},{"location":"integration/#application-integration-overview","title":"Application Integration Overview","text":"<p>This section covers the configuration required to integrate the EPMware Agent with specific EPM applications. Each application has unique requirements and setup procedures.</p>"},{"location":"integration/#supported-applications","title":"Supported Applications","text":"<ul> <li> <p> Hyperion HFM   Financial Management integration with registry configuration</p> </li> <li> <p> Hyperion Planning   Planning and Budgeting application integration</p> </li> <li> <p> Oracle Cloud EPM   PCMCS, EPBCS, and other cloud applications</p> </li> </ul>"},{"location":"integration/#integration-architecture","title":"Integration Architecture","text":""},{"location":"integration/#on-premise-applications","title":"On-Premise Applications","text":"<p>For on-premise EPM applications, the agent communicates directly with application utilities:</p> <pre><code>graph LR\n    A[EPMware Agent] --&gt; B[Application Utilities]\n    B --&gt; C[HFM LoadMetadata]\n    B --&gt; D[Planning OutlineLoad]\n    B --&gt; E[MaxL Scripts]\n    C --&gt; F[HFM Application]\n    D --&gt; G[Planning Application]\n    E --&gt; H[Essbase Application]\n</code></pre>"},{"location":"integration/#cloud-applications","title":"Cloud Applications","text":"<p>For cloud applications, the agent uses EPM Automate:</p> <pre><code>graph LR\n    A[EPMware Agent] --&gt; B[EPM Automate]\n    B --&gt; C[REST APIs]\n    C --&gt; D[Oracle Cloud]\n    D --&gt; E[PCMCS]\n    D --&gt; F[EPBCS]\n    D --&gt; G[Other Cloud Apps]\n</code></pre>"},{"location":"integration/#quick-setup-guide","title":"Quick Setup Guide","text":""},{"location":"integration/#step-1-identify-target-applications","title":"Step 1: Identify Target Applications","text":"<p>Determine which applications need integration:</p> <pre><code># List installed EPM applications (Linux)\nls /opt/Oracle/Middleware/EPMSystem*/products/\n\n# Windows\ndir \"C:\\Oracle\\Middleware\\EPMSystem*\\products\\\"\n</code></pre>"},{"location":"integration/#step-2-verify-application-access","title":"Step 2: Verify Application Access","text":"<p>Ensure the agent can access application utilities:</p> <pre><code># HFM utilities\nls $EPM_ORACLE_HOME/products/FinancialManagement/bin/\n\n# Planning utilities\nls $EPM_ORACLE_HOME/products/Planning/bin/\n\n# Essbase MaxL\nwhich startMaxl.sh\n</code></pre>"},{"location":"integration/#step-3-configure-application-settings","title":"Step 3: Configure Application Settings","text":"<p>Add application-specific settings to EPMware:</p> <ol> <li>Navigate to Configuration \u2192 Applications</li> <li>Select your application</li> <li>Configure connection parameters</li> <li>Test connectivity</li> </ol>"},{"location":"integration/#integration-requirements-matrix","title":"Integration Requirements Matrix","text":"Application Version Requirements Configuration Needed HFM 11.1.2.4+ Registry file, HFM utilities Copy reg.properties Planning 11.1.2.4+ Password file, Planning utilities Generate encrypted password Essbase 11.1.2.4+ MaxL, credentials MaxL scripts PCMCS Cloud EPM Automate, internet access Install EPM Automate EPBCS Cloud EPM Automate, identity domain Cloud credentials"},{"location":"integration/#common-integration-tasks","title":"Common Integration Tasks","text":""},{"location":"integration/#metadata-deployment","title":"Metadata Deployment","text":"<p>The agent handles various metadata operations:</p> <ul> <li>Import - Extract metadata from applications</li> <li>Export - Deploy metadata to applications</li> <li>Validation - Verify metadata before deployment</li> <li>Backup - Create backups before changes</li> <li>Rollback - Restore previous versions if needed</li> </ul>"},{"location":"integration/#supported-operations-by-application","title":"Supported Operations by Application","text":"Application Import Export Clear Backup Rules HFM \u2713 \u2713 \u2713 \u2713 \u2713 Planning \u2713 \u2713 \u2713 \u2713 \u2713 Essbase \u2713 \u2713 \u2713 \u2713 \u2713 PCMCS \u2713 \u2713 \u2713 \u2713 \u2713 EPBCS \u2713 \u2713 \u2713 \u2713 \u2713"},{"location":"integration/#configuration-files","title":"Configuration Files","text":""},{"location":"integration/#application-properties","title":"Application Properties","text":"<p>Each application requires specific properties in EPMware:</p> <pre><code># HFM Example\nhfm.server=hfm-server.company.com\nhfm.cluster=Cluster1\nhfm.application=HFMPROD\nhfm.user=hfm_admin\nhfm.timeout=3600\n\n# Planning Example\nplanning.server=planning-server.company.com\nplanning.application=PLANPROD\nplanning.user=planning_admin\nplanning.passwordFile=/opt/oracle/password.txt\n\n# Cloud Example\ncloud.url=https://instance.oraclecloud.com\ncloud.identityDomain=company\ncloud.user=cloud.admin@company.com\n</code></pre>"},{"location":"integration/#agent-configuration","title":"Agent Configuration","text":"<p>Add application-specific settings to <code>agent.properties</code>:</p> <pre><code># Enable application modules\nhfm.enabled=true\nplanning.enabled=true\ncloud.enabled=true\n\n# Set application paths\nhfm.utility.path=/opt/Oracle/products/FinancialManagement/bin\nplanning.utility.path=/opt/Oracle/products/Planning/bin\nepmautomate.path=/home/epmadmin/epmautomate/bin\n</code></pre>"},{"location":"integration/#security-configuration","title":"Security Configuration","text":""},{"location":"integration/#credential-management","title":"Credential Management","text":"<p>Different methods for each application type:</p>"},{"location":"integration/#on-premise-applications_1","title":"On-Premise Applications","text":"<pre><code># Encrypted password files\n./PasswordEncryption.sh password.txt\n\n# Secure wallet\nmkstore -wrl ./wallet -createCredential \n</code></pre>"},{"location":"integration/#cloud-applications_1","title":"Cloud Applications","text":"<pre><code># EPM Automate login\nepmautomate login user password url\n\n# Token-based auth\nexport EPM_TOKEN=your-token-here\n</code></pre>"},{"location":"integration/#access-control","title":"Access Control","text":"<p>Required permissions by application:</p> Application Required Role Permissions Needed HFM Application Administrator Metadata Load, Dimension Editor Planning Administrator Dimension Editor, Data Load Essbase Application Manager Database Manager, Calc Execute Cloud EPM Service Administrator Application Management"},{"location":"integration/#testing-integration","title":"Testing Integration","text":""},{"location":"integration/#connection-tests","title":"Connection Tests","text":"<p>Test connectivity to each application:</p> <pre><code># HFM Test\n$HFM_HOME/bin/LoadMetadata.bat -test\n\n# Planning Test\n$PLANNING_HOME/bin/OutlineLoad.sh -test\n\n# Cloud Test\nepmautomate login user password url\nepmautomate listfiles\nepmautomate logout\n</code></pre>"},{"location":"integration/#deployment-tests","title":"Deployment Tests","text":"<p>Perform test deployments:</p> <ol> <li>Create test metadata file</li> <li>Deploy to development environment</li> <li>Verify deployment success</li> <li>Check application logs</li> </ol>"},{"location":"integration/#troubleshooting-integration","title":"Troubleshooting Integration","text":""},{"location":"integration/#common-integration-issues","title":"Common Integration Issues","text":"Issue Symptoms Solution Utilities not found \"command not found\" Add to PATH or specify full path Permission denied Cannot execute utilities Check file permissions and user access Connection failed Timeout or refused Verify network and application status Authentication failed Invalid credentials Regenerate passwords/tokens"},{"location":"integration/#debug-integration","title":"Debug Integration","text":"<p>Enable debug logging for specific applications:</p> <pre><code># Application-specific debug\nhfm.debug=true\nplanning.debug=true\ncloud.debug=true\n\n# Verbose logging\napplication.log.verbose=true\napplication.log.level=TRACE\n</code></pre>"},{"location":"integration/#performance-optimization","title":"Performance Optimization","text":""},{"location":"integration/#batch-processing","title":"Batch Processing","text":"<p>Configure batch sizes for large deployments:</p> <pre><code># Batch configuration\ndeployment.batch.enabled=true\ndeployment.batch.size=1000\ndeployment.batch.parallel=false\ndeployment.batch.threads=2\n</code></pre>"},{"location":"integration/#connection-pooling","title":"Connection Pooling","text":"<p>Optimize connections for multiple applications:</p> <pre><code># Connection pool settings\nconnection.pool.enabled=true\nconnection.pool.size=5\nconnection.pool.timeout=30000\nconnection.pool.validate=true\n</code></pre>"},{"location":"integration/#multi-application-deployment","title":"Multi-Application Deployment","text":""},{"location":"integration/#deployment-order","title":"Deployment Order","text":"<p>Configure deployment sequence:</p> <pre><code># Deployment order (lower numbers deploy first)\nhfm.deployment.order=1\nessbase.deployment.order=2\nplanning.deployment.order=3\n</code></pre>"},{"location":"integration/#dependency-management","title":"Dependency Management","text":"<p>Handle application dependencies:</p> <pre><code># Dependencies\nplanning.depends.on=essbase\nreporting.depends.on=hfm,planning\n</code></pre>"},{"location":"integration/#monitoring-integration","title":"Monitoring Integration","text":""},{"location":"integration/#health-checks","title":"Health Checks","text":"<p>Monitor application connectivity:</p> <pre><code>#!/bin/bash\n# check_applications.sh\n\necho \"Checking HFM...\"\ntimeout 10 $HFM_HOME/bin/HFMHealthCheck.sh\n\necho \"Checking Planning...\"\ntimeout 10 $PLANNING_HOME/bin/PlanningHealthCheck.sh\n\necho \"Checking Cloud...\"\ntimeout 10 epmautomate login $USER $PASS $URL &amp;&amp; epmautomate logout\n</code></pre>"},{"location":"integration/#integration-metrics","title":"Integration Metrics","text":"<p>Track integration performance:</p> Metric Target Alert Threshold Connection Time &lt;5 seconds &gt;30 seconds Deployment Duration &lt;5 minutes &gt;15 minutes Success Rate &gt;99% &lt;95% Error Rate &lt;1% &gt;5%"},{"location":"integration/#best-practices","title":"Best Practices","text":""},{"location":"integration/#general-guidelines","title":"General Guidelines","text":"<ol> <li>Test First - Always test in non-production</li> <li>Backup Always - Create backups before deployments</li> <li>Monitor Closely - Watch logs during deployments</li> <li>Document Changes - Record all configuration changes</li> <li>Plan Maintenance - Schedule deployment windows</li> </ol>"},{"location":"integration/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Rotate Credentials - Regular password changes</li> <li>Limit Access - Minimum required permissions</li> <li>Encrypt Sensitive Data - Use encrypted password files</li> <li>Audit Activities - Log all operations</li> <li>Secure Communications - Use SSL/TLS</li> </ol>"},{"location":"integration/#performance-best-practices","title":"Performance Best Practices","text":"<ol> <li>Optimize Batch Sizes - Balance speed and resources</li> <li>Schedule Off-Hours - Deploy during low usage</li> <li>Monitor Resources - Track CPU and memory</li> <li>Clean Up - Remove temporary files</li> <li>Regular Maintenance - Update utilities and drivers</li> </ol>"},{"location":"integration/#application-specific-guides","title":"Application-Specific Guides","text":"<p>Detailed configuration for each application:</p>"},{"location":"integration/#on-premise-applications_2","title":"On-Premise Applications","text":"<ul> <li>Hyperion HFM Configuration</li> <li>Hyperion Planning Setup</li> <li>Essbase Integration (Coming Soon)</li> </ul>"},{"location":"integration/#cloud-applications_2","title":"Cloud Applications","text":"<ul> <li>PCMCS Configuration</li> <li>EPM Automate Setup</li> <li>Cloud Upgrade Process</li> </ul>"},{"location":"integration/#integration-checklist","title":"Integration Checklist","text":"<p>Before deploying to production:</p> <ul> <li>[ ] Application utilities accessible</li> <li>[ ] Credentials configured and tested</li> <li>[ ] Network connectivity verified</li> <li>[ ] Required permissions granted</li> <li>[ ] Test deployment successful</li> <li>[ ] Backup procedures in place</li> <li>[ ] Monitoring configured</li> <li>[ ] Documentation updated</li> <li>[ ] Rollback plan prepared</li> <li>[ ] Maintenance window scheduled</li> </ul> <p>Start Small</p> <p>Begin with one application in development, validate the integration thoroughly, then expand to other applications and environments.</p> <p>Version Compatibility</p> <p>Always verify that your EPMware Agent version is compatible with your EPM application versions. Check the compatibility matrix in release notes.</p>"},{"location":"integration/#next-steps","title":"Next Steps","text":"<p>Based on your applications, proceed to:</p> <ol> <li>HFM Configuration - For Financial Management</li> <li>Planning Configuration - For Planning/Budgeting</li> <li>Cloud EPM Setup - For Oracle Cloud applications</li> <li>Troubleshooting - If you encounter issues</li> </ol>"},{"location":"integration/cloud/","title":"Oracle Cloud EPM Integration","text":""},{"location":"integration/cloud/#oracle-cloud-epm-integration","title":"Oracle Cloud EPM Integration","text":"<p>This section covers the configuration and integration of the EPMware Agent with Oracle Cloud EPM applications.</p>"},{"location":"integration/cloud/#overview","title":"Overview","text":"<p>Cloud EPM integration enables EPMware to manage metadata for: - Planning and Budgeting Cloud Service (PBCS) - Enterprise Planning and Budgeting Cloud Service (EPBCS) - Profitability and Cost Management Cloud Service (PCMCS) - Financial Consolidation and Close Cloud Service (FCCS) - Account Reconciliation Cloud Service (ARCS) - Tax Reporting Cloud Service (TRCS)</p>"},{"location":"integration/cloud/#integration-components","title":"Integration Components","text":"<ul> <li> <p> PCMCS Configuration   Profitability and Cost Management setup</p> </li> <li> <p> EPM Automate   Command-line utility installation and usage</p> </li> <li> <p> Upgrade Process   Keeping cloud tools and connections current</p> </li> </ul>"},{"location":"integration/cloud/#cloud-architecture","title":"Cloud Architecture","text":"<pre><code>graph LR\n    A[EPMware Agent] --&gt; B[EPM Automate]\n    B --&gt; C[REST APIs]\n    C --&gt; D[Oracle Cloud]\n    D --&gt; E[PBCS/EPBCS]\n    D --&gt; F[PCMCS]\n    D --&gt; G[FCCS]\n    D --&gt; H[Other Services]\n</code></pre>"},{"location":"integration/cloud/#prerequisites","title":"Prerequisites","text":""},{"location":"integration/cloud/#software-requirements","title":"Software Requirements","text":"Component Version Purpose EPM Automate Latest Cloud interaction utility Java 1.8+ EPM Automate requirement Internet Access Stable Cloud connectivity TLS Support 1.2+ Secure communication"},{"location":"integration/cloud/#cloud-requirements","title":"Cloud Requirements","text":"<ul> <li>Oracle Cloud EPM subscription</li> <li>Service Administrator role</li> <li>Identity domain information</li> <li>Service URL</li> </ul>"},{"location":"integration/cloud/#quick-setup-guide","title":"Quick Setup Guide","text":""},{"location":"integration/cloud/#step-1-install-epm-automate","title":"Step 1: Install EPM Automate","text":"<p>Windows: </p><pre><code># Download installer from Oracle Cloud\n# Run EPM Automate.exe as administrator\n# Default installation: C:\\Oracle\\EPM Automate\n</code></pre><p></p> <p>Linux: </p><pre><code># Download EPM Automate\nwget https://cloud-url/EPMAutomate.tar\n\n# Extract\ntar xf EPMAutomate.tar -C ~\nexport PATH=$PATH:~/epmautomate/bin\n\n# Verify installation\nepmautomate --version\n</code></pre><p></p>"},{"location":"integration/cloud/#step-2-test-cloud-connection","title":"Step 2: Test Cloud Connection","text":"<pre><code># Login to cloud service\nepmautomate login ServiceAdmin Password https://instance.oraclecloud.com IdentityDomain\n\n# List files to verify connection\nepmautomate listfiles\n\n# Logout\nepmautomate logout\n</code></pre>"},{"location":"integration/cloud/#step-3-configure-agent","title":"Step 3: Configure Agent","text":"<p>Add to <code>agent.properties</code>: </p><pre><code># Cloud configuration\ncloud.enabled=true\ncloud.url=https://instance.oraclecloud.com\ncloud.identityDomain=mycompany\ncloud.user=ServiceAdmin\ncloud.epmautomate.path=/home/epmware/epmautomate/bin\n</code></pre><p></p>"},{"location":"integration/cloud/#cloud-service-types","title":"Cloud Service Types","text":""},{"location":"integration/cloud/#pbcsepbcs","title":"PBCS/EPBCS","text":"<p>Planning and Budgeting services: </p><pre><code># Connect to PBCS\nepmautomate login admin password https://planning-instance.pbcs.us2.oraclecloud.com myDomain\n\n# Deploy metadata\nepmautomate uploadfile metadata.zip\nepmautomate importmetadata metadata.zip\nepmautomate deletefile metadata.zip\n</code></pre><p></p>"},{"location":"integration/cloud/#pcmcs","title":"PCMCS","text":"<p>Profitability and Cost Management: </p><pre><code># Connect to PCMCS\nepmautomate login admin password https://pcmcs-instance.pcmcs.us2.oraclecloud.com myDomain\n\n# Deploy to PCMCS\nepmautomate uploadfile dimension.zip\nepmautomate importdimension dimension.zip\n</code></pre><p></p>"},{"location":"integration/cloud/#fccs","title":"FCCS","text":"<p>Financial Consolidation and Close: </p><pre><code># Connect to FCCS\nepmautomate login admin password https://fccs-instance.fccs.us2.oraclecloud.com myDomain\n\n# Import metadata\nepmautomate uploadfile fccs_metadata.csv\nepmautomate importmetadata fccs_metadata.csv\n</code></pre><p></p>"},{"location":"integration/cloud/#authentication-methods","title":"Authentication Methods","text":""},{"location":"integration/cloud/#password-authentication","title":"Password Authentication","text":"<pre><code># Direct password\nepmautomate login username password URL identityDomain\n\n# Password file\necho \"password\" &gt; .pwd_file\nepmautomate login username .pwd_file URL identityDomain\n</code></pre>"},{"location":"integration/cloud/#oauth-20-authentication","title":"OAuth 2.0 Authentication","text":"<pre><code># OAuth setup\nepmautomate login username password URL identityDomain AuthType=OAuth\n\n# Use refresh token\nepmautomate login username refreshToken URL identityDomain AuthType=OAuth RefreshToken=true\n</code></pre>"},{"location":"integration/cloud/#sso-authentication","title":"SSO Authentication","text":"<pre><code># For SSO-enabled services\ncloud.auth.type=SSO\ncloud.auth.provider=OKTA\ncloud.auth.endpoint=https://company.okta.com\n</code></pre>"},{"location":"integration/cloud/#epm-automate-operations","title":"EPM Automate Operations","text":""},{"location":"integration/cloud/#common-commands","title":"Common Commands","text":"Command Purpose Example <code>uploadfile</code> Upload file to cloud <code>epmautomate uploadfile data.zip</code> <code>downloadfile</code> Download from cloud <code>epmautomate downloadfile data.zip</code> <code>importmetadata</code> Import metadata <code>epmautomate importmetadata file.zip</code> <code>exportmetadata</code> Export metadata <code>epmautomate exportmetadata file.zip</code> <code>runbusinessrule</code> Execute rule <code>epmautomate runbusinessrule RuleName</code> <code>refreshcube</code> Refresh database <code>epmautomate refreshcube</code>"},{"location":"integration/cloud/#batch-operations","title":"Batch Operations","text":"<pre><code>#!/bin/bash\n# batch_deploy.sh\n\n# Login\nepmautomate login $USER $PASSWORD $URL $DOMAIN\n\n# Upload and import multiple files\nfor file in *.zip; do\n    echo \"Processing $file...\"\n    epmautomate uploadfile \"$file\"\n    epmautomate importmetadata \"$file\"\n    epmautomate deletefile \"$file\"\ndone\n\n# Logout\nepmautomate logout\n</code></pre>"},{"location":"integration/cloud/#connection-configuration","title":"Connection Configuration","text":""},{"location":"integration/cloud/#network-requirements","title":"Network Requirements","text":"<pre><code>Required Ports:\n  - 443 (HTTPS)\n\nRequired Protocols:\n  - TLS 1.2+\n  - HTTP/2 (preferred)\n\nFirewall Rules:\n  - Allow outbound to *.oraclecloud.com\n  - Allow outbound to *.oracle.com\n</code></pre>"},{"location":"integration/cloud/#proxy-configuration","title":"Proxy Configuration","text":"<pre><code># Set proxy for EPM Automate\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport HTTP_PROXY=http://proxy.company.com:8080\n\n# Or in command\nepmautomate login user pwd url domain ProxyHost=proxy.company.com ProxyPort=8080\n</code></pre>"},{"location":"integration/cloud/#timeout-settings","title":"Timeout Settings","text":"<pre><code># Connection timeouts\ncloud.connection.timeout=60000\ncloud.read.timeout=300000\ncloud.operation.timeout=1800000\n</code></pre>"},{"location":"integration/cloud/#security-configuration","title":"Security Configuration","text":""},{"location":"integration/cloud/#secure-credential-storage","title":"Secure Credential Storage","text":"<pre><code># Encrypt password file\nopenssl enc -aes-256-cbc -salt -in password.txt -out password.enc\n\n# Decrypt when needed\nopenssl enc -aes-256-cbc -d -in password.enc -out password.txt\n\n# Use encrypted file\nepmautomate login user password.enc url domain Encrypted=true\n</code></pre>"},{"location":"integration/cloud/#certificate-management","title":"Certificate Management","text":"<pre><code># Import Oracle Cloud certificate\nkeytool -import -trustcacerts -alias oraclecloud \\\n        -file oracle-cloud.crt \\\n        -keystore $JAVA_HOME/lib/security/cacerts\n</code></pre>"},{"location":"integration/cloud/#audit-and-compliance","title":"Audit and Compliance","text":"<pre><code># Enable audit logging\ncloud.audit.enabled=true\ncloud.audit.detailed=true\ncloud.audit.includeData=false\n</code></pre>"},{"location":"integration/cloud/#performance-optimization","title":"Performance Optimization","text":""},{"location":"integration/cloud/#parallel-processing","title":"Parallel Processing","text":"<pre><code>#!/bin/bash\n# parallel_deploy.sh\n\n# Function to deploy\ndeploy_file() {\n    local file=$1\n    epmautomate uploadfile \"$file\"\n    epmautomate importmetadata \"$file\"\n}\n\n# Process files in parallel\nexport -f deploy_file\nfind . -name \"*.zip\" | parallel -j 4 deploy_file\n</code></pre>"},{"location":"integration/cloud/#connection-pooling","title":"Connection Pooling","text":"<pre><code># EPM Automate connection settings\ncloud.connection.pool.enabled=true\ncloud.connection.pool.size=5\ncloud.connection.keepAlive=true\n</code></pre>"},{"location":"integration/cloud/#compression","title":"Compression","text":"<pre><code># Enable compression for uploads\nepmautomate uploadfile largefile.zip Compression=true\n\n# Compress before upload\ngzip -9 metadata.csv\nepmautomate uploadfile metadata.csv.gz\n</code></pre>"},{"location":"integration/cloud/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"integration/cloud/#health-checks","title":"Health Checks","text":"<pre><code>#!/bin/bash\n# cloud_health_check.sh\n\n# Test connectivity\nif epmautomate login $USER $PWD $URL $DOMAIN; then\n    echo \"\u2713 Cloud connection successful\"\n\n    # Check service status\n    epmautomate getstatus\n\n    # Logout\n    epmautomate logout\nelse\n    echo \"\u2717 Cloud connection failed\"\n    exit 1\nfi\n</code></pre>"},{"location":"integration/cloud/#log-configuration","title":"Log Configuration","text":"<pre><code># EPM Automate logging\nepmautomate.log.enabled=true\nepmautomate.log.level=INFO\nepmautomate.log.file=/var/log/epmware/epmautomate.log\n</code></pre>"},{"location":"integration/cloud/#activity-monitoring","title":"Activity Monitoring","text":"<pre><code># Monitor EPM Automate operations\nepmautomate listjobs\nepmautomate getjobstatus JobID\nepmautomate getactivityreport\n</code></pre>"},{"location":"integration/cloud/#troubleshooting","title":"Troubleshooting","text":""},{"location":"integration/cloud/#common-issues","title":"Common Issues","text":"Issue Cause Solution Login fails Invalid credentials Verify username/password/domain Connection timeout Network issues Check firewall and proxy Upload fails File too large Split file or increase timeout Import fails Invalid format Validate file format TLS error Certificate issue Update certificates"},{"location":"integration/cloud/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable debug logging\nexport EPM_AUTOMATE_LOG_LEVEL=DEBUG\n\n# Run with verbose output\nepmautomate login user pwd url domain -v\n\n# Check debug logs\ntail -f ~/epmautomate/logs/epmautomate.log\n</code></pre>"},{"location":"integration/cloud/#best-practices","title":"Best Practices","text":""},{"location":"integration/cloud/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never hardcode passwords - Use encrypted files</li> <li>Rotate credentials regularly - Monthly for production</li> <li>Use service accounts - Not personal accounts</li> <li>Enable MFA - Where available</li> <li>Audit all operations - Track who did what</li> </ol>"},{"location":"integration/cloud/#operational-best-practices","title":"Operational Best Practices","text":"<ol> <li>Test in sandbox first - Never test in production</li> <li>Backup before changes - Export existing metadata</li> <li>Use maintenance windows - Schedule deployments</li> <li>Monitor operations - Check job status</li> <li>Document procedures - Keep runbooks updated</li> </ol>"},{"location":"integration/cloud/#performance-best-practices","title":"Performance Best Practices","text":"<ol> <li>Batch operations - Group related changes</li> <li>Compress large files - Reduce transfer time</li> <li>Use parallel processing - For multiple files</li> <li>Implement retries - Handle transient failures</li> <li>Monitor bandwidth - Avoid network saturation</li> </ol>"},{"location":"integration/cloud/#cloud-specific-configurations","title":"Cloud-Specific Configurations","text":""},{"location":"integration/cloud/#data-center-regions","title":"Data Center Regions","text":"<pre><code># Region-specific URLs\ncloud.region.us=.oraclecloud.com\ncloud.region.eu=.eu.oraclecloud.com\ncloud.region.ap=.ap.oraclecloud.com\n\n# Select region\ncloud.datacenter=us2\n</code></pre>"},{"location":"integration/cloud/#service-limits","title":"Service Limits","text":"<p>Be aware of cloud service limits: - File upload size: 2GB typical - Concurrent connections: 10-20 - API rate limits: 100 requests/minute - Job execution time: 2 hours maximum</p>"},{"location":"integration/cloud/#integration-testing","title":"Integration Testing","text":""},{"location":"integration/cloud/#test-scripts","title":"Test Scripts","text":"<pre><code>#!/bin/bash\n# test_cloud_integration.sh\n\necho \"=== Cloud Integration Test ===\"\n\n# Test login\necho \"Testing login...\"\nepmautomate login $USER $PWD $URL $DOMAIN || exit 1\n\n# Test file operations\necho \"Testing file upload...\"\necho \"test\" &gt; test.txt\nepmautomate uploadfile test.txt || exit 1\n\necho \"Testing file download...\"\nepmautomate downloadfile test.txt test_download.txt || exit 1\n\necho \"Testing file deletion...\"\nepmautomate deletefile test.txt || exit 1\n\n# Logout\nepmautomate logout\n\necho \"=== All tests passed ===\"\n</code></pre>"},{"location":"integration/cloud/#migration-from-on-premise","title":"Migration from On-Premise","text":""},{"location":"integration/cloud/#migration-checklist","title":"Migration Checklist","text":"<ul> <li>[ ] Install EPM Automate</li> <li>[ ] Configure cloud credentials</li> <li>[ ] Test connectivity</li> <li>[ ] Export on-premise metadata</li> <li>[ ] Transform metadata format if needed</li> <li>[ ] Import to cloud</li> <li>[ ] Validate deployment</li> <li>[ ] Update agent configuration</li> <li>[ ] Test end-to-end process</li> <li>[ ] Document new procedures</li> </ul>"},{"location":"integration/cloud/#next-steps","title":"Next Steps","text":"<ul> <li>PCMCS Configuration - Set up PCMCS integration</li> <li>EPM Automate Setup - Detailed utility configuration</li> <li>Upgrade Process - Keep tools current</li> <li>Planning Integration - On-premise Planning</li> </ul> <p>Cloud Updates</p> <p>Oracle frequently updates cloud services. Check for EPM Automate updates monthly and review release notes for new features and changes.</p> <p>Rate Limits</p> <p>Be aware of API rate limits in cloud services. Implement throttling and retry logic to handle rate limit errors gracefully.</p>"},{"location":"integration/cloud/epm-automate/","title":"EPM Automate","text":""},{"location":"integration/cloud/epm-automate/#epm-automate-configuration","title":"EPM Automate Configuration","text":"<p>Comprehensive guide for installing, configuring, and using EPM Automate utility with the EPMware Agent for Oracle Cloud EPM integration.</p>"},{"location":"integration/cloud/epm-automate/#overview","title":"Overview","text":"<p>EPM Automate is Oracle's command-line utility that enables: - Remote task execution in Oracle Cloud EPM - Automated metadata and data management - Scripted deployments and backups - Integration with third-party tools</p>"},{"location":"integration/cloud/epm-automate/#installation","title":"Installation","text":""},{"location":"integration/cloud/epm-automate/#system-requirements","title":"System Requirements","text":"Requirement Specification Operating System Windows, Linux, macOS Java JRE 1.8 or higher Memory 512 MB minimum Disk Space 500 MB Network Internet access, TLS 1.2+"},{"location":"integration/cloud/epm-automate/#windows-installation","title":"Windows Installation","text":""},{"location":"integration/cloud/epm-automate/#step-1-download","title":"Step 1: Download","text":"<ol> <li>Access your Oracle Cloud EPM environment</li> <li>Click your username \u2192 Downloads</li> <li>Select Download for Windows under EPM Automate</li> </ol> <p> Downloading EPM Automate from Oracle Cloud</p>"},{"location":"integration/cloud/epm-automate/#step-2-install","title":"Step 2: Install","text":"<pre><code># Run installer as Administrator\nEPM Automate.exe\n\n# Default installation path\nC:\\Oracle\\EPM Automate\\\n\n# Verify installation\nC:\\Oracle\\EPM Automate\\bin\\epmautomate.bat --version\n</code></pre>"},{"location":"integration/cloud/epm-automate/#step-3-configure-path","title":"Step 3: Configure PATH","text":"<pre><code># Add to system PATH\n[Environment]::SetEnvironmentVariable(\n    \"Path\",\n    $env:Path + \";C:\\Oracle\\EPM Automate\\bin\",\n    \"Machine\"\n)\n\n# Verify\nepmautomate --version\n</code></pre>"},{"location":"integration/cloud/epm-automate/#linux-installation","title":"Linux Installation","text":""},{"location":"integration/cloud/epm-automate/#step-1-download_1","title":"Step 1: Download","text":"<pre><code># Download from Oracle Cloud\nwget https://your-instance.oraclecloud.com/interop/epmautomate/EPMAutomate.tar\n\n# Or download via browser and transfer\nscp EPMAutomate.tar user@server:/tmp/\n</code></pre>"},{"location":"integration/cloud/epm-automate/#step-2-extract-and-configure","title":"Step 2: Extract and Configure","text":"<pre><code># Extract to home directory\ncd ~\ntar xf /tmp/EPMAutomate.tar\n\n# Set environment variables\nexport JAVA_HOME=/usr/java/latest\nexport PATH=$PATH:~/epmautomate/bin\n\n# Make permanent (add to .bashrc)\necho 'export JAVA_HOME=/usr/java/latest' &gt;&gt; ~/.bashrc\necho 'export PATH=$PATH:~/epmautomate/bin' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"integration/cloud/epm-automate/#step-3-verify-installation","title":"Step 3: Verify Installation","text":"<pre><code># Check version\nepmautomate.sh --version\n\n# Test execution\nepmautomate.sh help\n</code></pre>"},{"location":"integration/cloud/epm-automate/#macos-installation","title":"macOS Installation","text":"<pre><code># Extract archive\ntar xf EPMAutomate.tar\n\n# Configure environment\nexport JAVA_HOME=$(/usr/libexec/java_home)\nexport PATH=$PATH:~/epmautomate/bin\n\n# Verify\nepmautomate.sh --version\n</code></pre>"},{"location":"integration/cloud/epm-automate/#configuration-for-epmware-agent","title":"Configuration for EPMware Agent","text":""},{"location":"integration/cloud/epm-automate/#directory-structure","title":"Directory Structure","text":"<pre><code>/home/epmware_agent/\n\u251c\u2500\u2500 agent.properties\n\u251c\u2500\u2500 ew_target_service.sh\n\u251c\u2500\u2500 epmware-agent.jar\n\u2514\u2500\u2500 epmautomate/\n    \u251c\u2500\u2500 bin/\n    \u2502   \u251c\u2500\u2500 epmautomate.sh\n    \u2502   \u2514\u2500\u2500 epmautomate.bat\n    \u251c\u2500\u2500 lib/\n    \u251c\u2500\u2500 jre/\n    \u2514\u2500\u2500 logs/\n</code></pre>"},{"location":"integration/cloud/epm-automate/#agent-properties-configuration","title":"Agent Properties Configuration","text":"<p>Add to <code>agent.properties</code>:</p> <pre><code># EPM Automate configuration\nepmautomate.enabled=true\nepmautomate.path=/home/epmware_agent/epmautomate/bin\nepmautomate.timeout=3600000\nepmautomate.retry.count=3\nepmautomate.retry.delay=30000\n\n# Cloud connection settings\ncloud.url=https://instance.oraclecloud.com\ncloud.identity.domain=mycompany\ncloud.user=ServiceAdmin\ncloud.password.encrypted=true\n</code></pre>"},{"location":"integration/cloud/epm-automate/#environment-variables","title":"Environment Variables","text":"<pre><code># Set in ew_target_service.sh\nexport EPM_AUTOMATE_HOME=/home/epmware_agent/epmautomate\nexport PATH=$EPM_AUTOMATE_HOME/bin:$PATH\nexport JAVA_HOME=/usr/java/latest\n\n# EPM Automate specific\nexport EPM_AUTOMATE_LOG_LEVEL=INFO\nexport EPM_AUTOMATE_TIMEOUT=3600\n</code></pre>"},{"location":"integration/cloud/epm-automate/#authentication-configuration","title":"Authentication Configuration","text":""},{"location":"integration/cloud/epm-automate/#password-file-method","title":"Password File Method","text":"<pre><code># Create encrypted password file\necho \"myPassword\" &gt; .password\nchmod 600 .password\n\n# Use in scripts\nepmautomate login username .password $URL $DOMAIN\n</code></pre>"},{"location":"integration/cloud/epm-automate/#oauth-configuration","title":"OAuth Configuration","text":"<pre><code># Initial OAuth setup\nepmautomate login username password $URL $DOMAIN AuthType=OAuth\n\n# Save refresh token\nepmautomate getrefreshtoken &gt; .refresh_token\n\n# Use refresh token\nepmautomate login username .refresh_token $URL $DOMAIN AuthType=OAuth RefreshToken=true\n</code></pre>"},{"location":"integration/cloud/epm-automate/#sso-configuration","title":"SSO Configuration","text":"<pre><code># For SSO-enabled environments\ncloud.auth.type=SSO\ncloud.sso.provider=OKTA\ncloud.sso.endpoint=https://company.okta.com\n</code></pre>"},{"location":"integration/cloud/epm-automate/#epm-automate-commands","title":"EPM Automate Commands","text":""},{"location":"integration/cloud/epm-automate/#basic-commands","title":"Basic Commands","text":"Command Description Example <code>login</code> Connect to service <code>epmautomate login user pwd url domain</code> <code>logout</code> Disconnect <code>epmautomate logout</code> <code>uploadfile</code> Upload file <code>epmautomate uploadfile data.zip</code> <code>downloadfile</code> Download file <code>epmautomate downloadfile report.pdf</code> <code>listfiles</code> List files <code>epmautomate listfiles</code> <code>deletefile</code> Delete file <code>epmautomate deletefile old.zip</code>"},{"location":"integration/cloud/epm-automate/#metadata-commands","title":"Metadata Commands","text":"<pre><code># Import metadata\nepmautomate uploadfile metadata.zip\nepmautomate importmetadata metadata.zip\nepmautomate deletefile metadata.zip\n\n# Export metadata\nepmautomate exportmetadata ALL\nepmautomate downloadfile metadata.zip\n\n# Validate metadata\nepmautomate validatemetadata metadata.zip\n</code></pre>"},{"location":"integration/cloud/epm-automate/#data-management","title":"Data Management","text":"<pre><code># Import data\nepmautomate uploadfile data.csv\nepmautomate importdata data.csv\nepmautomate runbatch\n\n# Export data\nepmautomate exportdata dataexport.csv\nepmautomate downloadfile dataexport.csv\n\n# Clear data\nepmautomate cleardata \"Year=FY21,Scenario=Actual\"\n</code></pre>"},{"location":"integration/cloud/epm-automate/#application-management","title":"Application Management","text":"<pre><code># Application snapshot\nepmautomate exportsnapshot snapshot_$(date +%Y%m%d)\n\n# Import snapshot\nepmautomate importsnapshot backup_snapshot\n\n# Refresh database\nepmautomate refreshcube\n\n# Run calculation\nepmautomate runbusinessrule \"Calculate Revenue\"\n</code></pre>"},{"location":"integration/cloud/epm-automate/#scripting-with-epm-automate","title":"Scripting with EPM Automate","text":""},{"location":"integration/cloud/epm-automate/#basic-script-template","title":"Basic Script Template","text":"<pre><code>#!/bin/bash\n# epm_automate_template.sh\n\n# Configuration\nURL=\"https://instance.oraclecloud.com\"\nDOMAIN=\"mycompany\"\nUSER=\"ServiceAdmin\"\nPASSWORD_FILE=\".password\"\n\n# Functions\nlogin() {\n    echo \"Logging in...\"\n    epmautomate login $USER $PASSWORD_FILE $URL $DOMAIN\n}\n\nlogout() {\n    echo \"Logging out...\"\n    epmautomate logout\n}\n\nhandle_error() {\n    echo \"Error occurred: $1\"\n    logout\n    exit 1\n}\n\n# Main execution\ntrap 'handle_error \"Script interrupted\"' INT TERM\n\nlogin || handle_error \"Login failed\"\n\n# Your operations here\nepmautomate listfiles || handle_error \"List files failed\"\n\nlogout\necho \"Script completed successfully\"\n</code></pre>"},{"location":"integration/cloud/epm-automate/#advanced-deployment-script","title":"Advanced Deployment Script","text":"<pre><code>#!/bin/bash\n# deploy_metadata.sh\n\nset -e  # Exit on error\n\n# Configuration\nsource config.env\n\n# Logging\nLOG_FILE=\"deployment_$(date +%Y%m%d_%H%M%S).log\"\nexec 1&gt; &gt;(tee -a \"$LOG_FILE\")\nexec 2&gt;&amp;1\n\necho \"=== EPM Deployment Started: $(date) ===\"\n\n# Login with retry\nMAX_RETRIES=3\nRETRY_COUNT=0\n\nwhile [ $RETRY_COUNT -lt $MAX_RETRIES ]; do\n    if epmautomate login $USER $PWD_FILE $URL $DOMAIN; then\n        echo \"Login successful\"\n        break\n    else\n        RETRY_COUNT=$((RETRY_COUNT + 1))\n        echo \"Login attempt $RETRY_COUNT failed\"\n        sleep 30\n    fi\ndone\n\nif [ $RETRY_COUNT -eq $MAX_RETRIES ]; then\n    echo \"Login failed after $MAX_RETRIES attempts\"\n    exit 1\nfi\n\n# Backup before deployment\necho \"Creating backup...\"\nepmautomate exportsnapshot \"backup_pre_deploy_$(date +%Y%m%d)\"\n\n# Deploy metadata\nfor file in metadata/*.zip; do\n    echo \"Processing $file...\"\n    epmautomate uploadfile \"$file\"\n    epmautomate importmetadata \"$(basename $file)\"\n    epmautomate deletefile \"$(basename $file)\"\ndone\n\n# Validate\necho \"Validating deployment...\"\nepmautomate refreshcube\nepmautomate validatedata\n\n# Cleanup and logout\nepmautomate logout\necho \"=== Deployment Completed: $(date) ===\"\n</code></pre>"},{"location":"integration/cloud/epm-automate/#error-handling","title":"Error Handling","text":""},{"location":"integration/cloud/epm-automate/#common-errors-and-solutions","title":"Common Errors and Solutions","text":"Error Cause Solution <code>EPMCSS-00001</code> Invalid credentials Check username/password <code>EPMCSS-00301</code> Session timeout Re-login <code>EPMCSS-20004</code> File not found Verify file path <code>EPMCSS-20705</code> Import failed Check file format <code>Connection refused</code> Network issue Check firewall/proxy"},{"location":"integration/cloud/epm-automate/#error-handling-in-scripts","title":"Error Handling in Scripts","text":"<pre><code># Function to handle EPM Automate errors\ncheck_error() {\n    local exit_code=$?\n    local operation=$1\n\n    if [ $exit_code -ne 0 ]; then\n        echo \"Error: $operation failed with exit code $exit_code\"\n\n        # Get detailed error\n        epmautomate getlogs &gt; error_detail.log 2&gt;&amp;1\n\n        # Send alert\n        mail -s \"EPM Deployment Failed\" admin@company.com &lt; error_detail.log\n\n        # Cleanup\n        epmautomate logout 2&gt;/dev/null\n        exit $exit_code\n    fi\n}\n\n# Usage\nepmautomate login $USER $PWD $URL $DOMAIN\ncheck_error \"Login\"\n\nepmautomate importmetadata metadata.zip\ncheck_error \"Metadata import\"\n</code></pre>"},{"location":"integration/cloud/epm-automate/#performance-optimization","title":"Performance Optimization","text":""},{"location":"integration/cloud/epm-automate/#connection-optimization","title":"Connection Optimization","text":"<pre><code># Keep connection alive\nepmautomate setsubstvars keepAlive=true\n\n# Increase timeout for large operations\nepmautomate setsubstvars operationTimeout=7200\n\n# Enable compression\nepmautomate setsubstvars compression=true\n</code></pre>"},{"location":"integration/cloud/epm-automate/#batch-processing","title":"Batch Processing","text":"<pre><code># Process files in batches\nfind . -name \"*.csv\" -print0 | \\\n    xargs -0 -n 10 -P 2 -I {} epmautomate uploadfile {}\n</code></pre>"},{"location":"integration/cloud/epm-automate/#parallel-execution","title":"Parallel Execution","text":"<pre><code>#!/bin/bash\n# parallel_deploy.sh\n\n# Function for parallel processing\nprocess_file() {\n    local file=$1\n    epmautomate uploadfile \"$file\"\n    epmautomate importdata \"$(basename $file)\"\n    epmautomate deletefile \"$(basename $file)\"\n}\n\nexport -f process_file\n\n# Process files in parallel (max 4 concurrent)\nfind data/ -name \"*.csv\" | parallel -j 4 process_file\n</code></pre>"},{"location":"integration/cloud/epm-automate/#security-best-practices","title":"Security Best Practices","text":""},{"location":"integration/cloud/epm-automate/#credential-security","title":"Credential Security","text":"<pre><code># Encrypt password file\nopenssl enc -aes-256-cbc -salt -in password.txt -out password.enc\n\n# Decrypt for use\nopenssl enc -aes-256-cbc -d -in password.enc | epmautomate login $USER - $URL $DOMAIN\n\n# Use environment variables\nexport EPM_PASSWORD=$(openssl enc -aes-256-cbc -d -in password.enc)\nepmautomate login $USER $EPM_PASSWORD $URL $DOMAIN\nunset EPM_PASSWORD\n</code></pre>"},{"location":"integration/cloud/epm-automate/#audit-logging","title":"Audit Logging","text":"<pre><code># Enable detailed logging\nexport EPM_AUTOMATE_LOG_LEVEL=DEBUG\nexport EPM_AUTOMATE_LOG_FILE=/var/log/epm/epm_automate.log\n\n# Log all operations\nepmautomate() {\n    echo \"[$(date)] Executing: epmautomate $*\" &gt;&gt; $EPM_AUTOMATE_LOG_FILE\n    command epmautomate \"$@\"\n    echo \"[$(date)] Exit code: $?\" &gt;&gt; $EPM_AUTOMATE_LOG_FILE\n}\n</code></pre>"},{"location":"integration/cloud/epm-automate/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"integration/cloud/epm-automate/#log-configuration","title":"Log Configuration","text":"<pre><code># Log settings\nepmautomate.log.enabled=true\nepmautomate.log.level=INFO\nepmautomate.log.file=/var/log/epmware/epmautomate.log\nepmautomate.log.max.size=100MB\nepmautomate.log.max.files=10\n</code></pre>"},{"location":"integration/cloud/epm-automate/#monitoring-script","title":"Monitoring Script","text":"<pre><code>#!/bin/bash\n# monitor_epm_automate.sh\n\nLOG_FILE=\"/var/log/epmware/epmautomate.log\"\nERROR_COUNT=0\n\n# Monitor for errors\ntail -f $LOG_FILE | while read line; do\n    if echo \"$line\" | grep -q \"ERROR\\|FAILED\"; then\n        ERROR_COUNT=$((ERROR_COUNT + 1))\n\n        # Alert if threshold exceeded\n        if [ $ERROR_COUNT -gt 5 ]; then\n            echo \"High error rate detected\" | \\\n                mail -s \"EPM Automate Alert\" admin@company.com\n            ERROR_COUNT=0\n        fi\n    fi\ndone\n</code></pre>"},{"location":"integration/cloud/epm-automate/#upgrading-epm-automate","title":"Upgrading EPM Automate","text":""},{"location":"integration/cloud/epm-automate/#check-for-updates","title":"Check for Updates","text":"<pre><code># Check current version\nepmautomate --version\n\n# Check for available updates\nepmautomate upgrade -c\n</code></pre>"},{"location":"integration/cloud/epm-automate/#upgrade-process","title":"Upgrade Process","text":"<pre><code># Automatic upgrade\nepmautomate upgrade -f\n\n# Manual upgrade\n# 1. Download new version\n# 2. Backup current installation\ncp -r ~/epmautomate ~/epmautomate.backup\n\n# 3. Extract new version\ntar xf EPMAutomate_new.tar\n\n# 4. Verify upgrade\nepmautomate --version\n</code></pre>"},{"location":"integration/cloud/epm-automate/#integration-with-epmware-agent","title":"Integration with EPMware Agent","text":""},{"location":"integration/cloud/epm-automate/#agent-script-integration","title":"Agent Script Integration","text":"<pre><code>#!/bin/bash\n# agent_epm_automate.sh\n\n# Called by EPMware Agent\nOPERATION=$1\nPARAMETERS=$2\n\ncase $OPERATION in\n    deploy)\n        epmautomate login $USER $PWD $URL $DOMAIN\n        epmautomate uploadfile $PARAMETERS\n        epmautomate importmetadata $(basename $PARAMETERS)\n        epmautomate logout\n        ;;\n\n    backup)\n        epmautomate login $USER $PWD $URL $DOMAIN\n        epmautomate exportsnapshot $PARAMETERS\n        epmautomate downloadfile \"$PARAMETERS.zip\"\n        epmautomate logout\n        ;;\n\n    *)\n        echo \"Unknown operation: $OPERATION\"\n        exit 1\n        ;;\nesac\n</code></pre>"},{"location":"integration/cloud/epm-automate/#troubleshooting","title":"Troubleshooting","text":""},{"location":"integration/cloud/epm-automate/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable debug output\nexport EPM_AUTOMATE_LOG_LEVEL=DEBUG\n\n# Verbose output\nepmautomate login $USER $PWD $URL $DOMAIN -v\n\n# Trace network calls\nexport EPM_AUTOMATE_TRACE=true\n</code></pre>"},{"location":"integration/cloud/epm-automate/#common-issues","title":"Common Issues","text":"<pre><code># SSL/TLS issues\nepmautomate login $USER $PWD $URL $DOMAIN TrustAll=true\n\n# Proxy issues\nexport HTTPS_PROXY=http://proxy:8080\nepmautomate login $USER $PWD $URL $DOMAIN\n\n# Timeout issues\nepmautomate setsubstvars connectionTimeout=120\n</code></pre>"},{"location":"integration/cloud/epm-automate/#best-practices-checklist","title":"Best Practices Checklist","text":"<ul> <li>[ ] Always use encrypted password files</li> <li>[ ] Implement error handling in scripts</li> <li>[ ] Log all operations for audit</li> <li>[ ] Test scripts in non-production first</li> <li>[ ] Keep EPM Automate updated</li> <li>[ ] Use version control for scripts</li> <li>[ ] Document custom scripts</li> <li>[ ] Implement monitoring</li> <li>[ ] Regular backup before changes</li> <li>[ ] Clean up temporary files</li> </ul> <p>Script Library</p> <p>Build a library of reusable EPM Automate scripts for common operations. This speeds up development and ensures consistency.</p> <p>Rate Limits</p> <p>Be aware of Oracle Cloud rate limits. Implement throttling in scripts to avoid hitting API limits.</p>"},{"location":"integration/cloud/epm-automate/#next-steps","title":"Next Steps","text":"<ul> <li>PCMCS Configuration - PCMCS-specific setup</li> <li>Upgrade Process - Keep EPM Automate current</li> <li>Cloud Integration - Cloud services overview</li> <li>Troubleshooting - Resolve issues</li> </ul>"},{"location":"integration/cloud/pcmcs/","title":"PCMCS","text":""},{"location":"integration/cloud/pcmcs/#pcmcs-configuration","title":"PCMCS Configuration","text":"<p>This guide covers the specific configuration for integrating EPMware Agent with Oracle Profitability and Cost Management Cloud Service (PCMCS).</p>"},{"location":"integration/cloud/pcmcs/#overview","title":"Overview","text":"<p>PCMCS integration allows EPMware to: - Deploy dimension metadata - Manage calculation rules - Import and export POV data - Execute calculations - Manage application settings</p>"},{"location":"integration/cloud/pcmcs/#architecture-options","title":"Architecture Options","text":""},{"location":"integration/cloud/pcmcs/#option-1-epmware-cloud-server","title":"Option 1: EPMware Cloud Server","text":"<pre><code>graph LR\n    A[EPMware Cloud] --&gt; B[EPMware AWS Server]\n    B --&gt; C[EPM Automate]\n    C --&gt; D[Oracle PCMCS]\n</code></pre>"},{"location":"integration/cloud/pcmcs/#option-2-customer-on-premise-server","title":"Option 2: Customer On-Premise Server","text":"<pre><code>graph LR\n    A[EPMware Cloud] --&gt; B[Customer Server]\n    B --&gt; C[EPM Automate]\n    C --&gt; D[Oracle PCMCS]\n</code></pre> <p> Two deployment options for PCMCS integration</p>"},{"location":"integration/cloud/pcmcs/#prerequisites","title":"Prerequisites","text":""},{"location":"integration/cloud/pcmcs/#required-components","title":"Required Components","text":"Component Requirement Location EPM Automate Latest version Agent server Internet Access Outbound HTTPS Port 443 PCMCS Subscription Active Oracle Cloud Service Administrator Role assigned Identity domain"},{"location":"integration/cloud/pcmcs/#epm-automate-installation","title":"EPM Automate Installation","text":""},{"location":"integration/cloud/pcmcs/#windows-installation","title":"Windows Installation","text":"<pre><code># Download EPM Automate installer\n# Default installation path\nC:\\Oracle\\EPM Automate\\\n\n# Add to PATH\n$env:PATH += \";C:\\Oracle\\EPM Automate\\bin\"\n</code></pre>"},{"location":"integration/cloud/pcmcs/#linux-installation","title":"Linux Installation","text":"<pre><code># Download and extract\nwget https://download-url/EPMAutomate.tar\ntar xf EPMAutomate.tar -C ~/\n\n# Set environment\nexport JAVA_HOME=/usr/java/latest\nexport PATH=$PATH:~/epmautomate/bin\n\n# Verify installation\nepmautomate --version\n</code></pre>"},{"location":"integration/cloud/pcmcs/#pcmcs-specific-configuration","title":"PCMCS-Specific Configuration","text":""},{"location":"integration/cloud/pcmcs/#connection-setup","title":"Connection Setup","text":"<pre><code># PCMCS connection format\nepmautomate login ServiceAdmin password https://pcmcs-test-a123456.epm.em3.oraclecloud.com\n\n# Components:\n# - ServiceAdmin: Your service administrator username\n# - password: Account password\n# - URL: Your PCMCS instance URL\n</code></pre>"},{"location":"integration/cloud/pcmcs/#agent-configuration","title":"Agent Configuration","text":"<p>Add to <code>agent.properties</code>:</p> <pre><code># PCMCS configuration\npcmcs.enabled=true\npcmcs.url=https://pcmcs-test-a123456.epm.em3.oraclecloud.com\npcmcs.user=ServiceAdmin\npcmcs.identityDomain=mycompany\npcmcs.epmautomate.path=/home/epmware/epmautomate/bin\n\n# PCMCS-specific settings\npcmcs.application=PCMAPP\npcmcs.database=Database1\npcmcs.timeout=7200000\n</code></pre>"},{"location":"integration/cloud/pcmcs/#directory-structure","title":"Directory Structure","text":"<p>Create the EPM Automate directory structure:</p> <pre><code># Create EPM Automate directory\nmkdir -p ~/epmautomate\n\n# Expected structure\nhome/epmware/\n\u251c\u2500\u2500 epmautomate/\n\u2502   \u251c\u2500\u2500 bin/\n\u2502   \u2502   \u251c\u2500\u2500 epmautomate.sh\n\u2502   \u2502   \u2514\u2500\u2500 epmautomate.bat\n\u2502   \u251c\u2500\u2500 lib/\n\u2502   \u2514\u2500\u2500 jre/\n\u251c\u2500\u2500 agent.properties\n\u2514\u2500\u2500 ew_target_service.sh\n</code></pre> <p> EPM Automate directory structure under agent home</p>"},{"location":"integration/cloud/pcmcs/#pcmcs-operations","title":"PCMCS Operations","text":""},{"location":"integration/cloud/pcmcs/#dimension-management","title":"Dimension Management","text":""},{"location":"integration/cloud/pcmcs/#upload-dimensions","title":"Upload Dimensions","text":"<pre><code># Upload dimension file\nepmautomate uploadfile dimensions.csv\n\n# Import dimensions\nepmautomate importdimension dimensions.csv\n\n# Delete uploaded file\nepmautomate deletefile dimensions.csv\n</code></pre>"},{"location":"integration/cloud/pcmcs/#export-dimensions","title":"Export Dimensions","text":"<pre><code># Export all dimensions\nepmautomate exportdimension ALL dimensions_backup.csv\n\n# Export specific dimension\nepmautomate exportdimension Account account_dim.csv\n\n# Download exported file\nepmautomate downloadfile dimensions_backup.csv\n</code></pre>"},{"location":"integration/cloud/pcmcs/#rule-management","title":"Rule Management","text":""},{"location":"integration/cloud/pcmcs/#deploy-calculation-rules","title":"Deploy Calculation Rules","text":"<pre><code># Upload rule file\nepmautomate uploadfile calc_rules.txt\n\n# Import rules\nepmautomate importrules calc_rules.txt REPLACE\n\n# Validate rules\nepmautomate validaterules\n</code></pre>"},{"location":"integration/cloud/pcmcs/#execute-calculations","title":"Execute Calculations","text":"<pre><code># Run calculation\nepmautomate runpcmcalc POV=\"Year=FY21,Period=Jan,Scenario=Actual\"\n\n# Check calculation status\nepmautomate getpcmcalcstatus\n\n# Download calc results\nepmautomate downloadfile calculation_results.csv\n</code></pre>"},{"location":"integration/cloud/pcmcs/#data-management","title":"Data Management","text":""},{"location":"integration/cloud/pcmcs/#import-data","title":"Import Data","text":"<pre><code># Upload data file\nepmautomate uploadfile data.csv\n\n# Import data\nepmautomate importpcmdata data.csv\n\n# Import with options\nepmautomate importpcmdata data.csv REPLACE=true VALIDATEONLY=false\n</code></pre>"},{"location":"integration/cloud/pcmcs/#export-data","title":"Export Data","text":"<pre><code># Export data for POV\nepmautomate exportpcmdata \"Year=FY21,Period=Jan\" output.csv\n\n# Export all data\nepmautomate exportpcmdata ALL full_export.csv\n\n# Download exported data\nepmautomate downloadfile full_export.csv\n</code></pre>"},{"location":"integration/cloud/pcmcs/#pcmcs-application-tasks","title":"PCMCS Application Tasks","text":""},{"location":"integration/cloud/pcmcs/#application-management","title":"Application Management","text":"<pre><code># Get application status\nepmautomate getpcmstatus\n\n# List POVs\nepmautomate listpovs\n\n# Clear POV data\nepmautomate clearpcmdata \"Year=FY21,Period=Jan\"\n\n# Reset application\nepmautomate resetpcmapplication\n</code></pre>"},{"location":"integration/cloud/pcmcs/#model-management","title":"Model Management","text":"<pre><code># Export model\nepmautomate exportpcmmodel model_backup.zip\n\n# Import model\nepmautomate importpcmmodel model.zip\n\n# Validate model\nepmautomate validatepcmmodel\n</code></pre>"},{"location":"integration/cloud/pcmcs/#automation-scripts","title":"Automation Scripts","text":""},{"location":"integration/cloud/pcmcs/#deployment-script","title":"Deployment Script","text":"<pre><code>#!/bin/bash\n# deploy_pcmcs.sh\n\n# Configuration\nURL=\"https://pcmcs-instance.oraclecloud.com\"\nUSER=\"ServiceAdmin\"\nPASSWORD=\"password\"\nDIMENSION_FILE=\"dimensions.csv\"\n\n# Login\necho \"Logging into PCMCS...\"\nepmautomate login $USER $PASSWORD $URL || exit 1\n\n# Backup existing dimensions\necho \"Backing up dimensions...\"\nepmautomate exportdimension ALL backup_$(date +%Y%m%d).csv\n\n# Upload new dimensions\necho \"Uploading new dimensions...\"\nepmautomate uploadfile $DIMENSION_FILE\n\n# Import dimensions\necho \"Importing dimensions...\"\nepmautomate importdimension $DIMENSION_FILE\n\n# Validate\necho \"Validating...\"\nepmautomate validatedimension\n\n# Clean up\nepmautomate deletefile $DIMENSION_FILE\n\n# Logout\nepmautomate logout\n\necho \"Deployment complete!\"\n</code></pre>"},{"location":"integration/cloud/pcmcs/#backup-script","title":"Backup Script","text":"<pre><code>#!/bin/bash\n# backup_pcmcs.sh\n\nBACKUP_DIR=\"/backup/pcmcs/$(date +%Y%m%d)\"\nmkdir -p $BACKUP_DIR\n\n# Login\nepmautomate login $USER $PASSWORD $URL\n\n# Export dimensions\nepmautomate exportdimension ALL $BACKUP_DIR/dimensions.csv\n\n# Export rules\nepmautomate exportrules $BACKUP_DIR/rules.txt\n\n# Export model\nepmautomate exportpcmmodel $BACKUP_DIR/model.zip\n\n# Export data\nepmautomate exportpcmdata ALL $BACKUP_DIR/data.csv\n\n# Download all files\nfor file in dimensions.csv rules.txt model.zip data.csv; do\n    epmautomate downloadfile $file $BACKUP_DIR/$file\ndone\n\n# Logout\nepmautomate logout\n</code></pre>"},{"location":"integration/cloud/pcmcs/#testing-and-validation","title":"Testing and Validation","text":""},{"location":"integration/cloud/pcmcs/#connection-test","title":"Connection Test","text":"<pre><code>#!/bin/bash\n# test_pcmcs_connection.sh\n\necho \"Testing PCMCS connection...\"\n\n# Test login\nif epmautomate login $USER $PASSWORD $URL; then\n    echo \"\u2713 Login successful\"\n\n    # Test operations\n    epmautomate listfiles\n    echo \"\u2713 List files successful\"\n\n    epmautomate getpcmstatus\n    echo \"\u2713 Get status successful\"\n\n    # Logout\n    epmautomate logout\n    echo \"\u2713 Logout successful\"\nelse\n    echo \"\u2717 Login failed\"\n    exit 1\nfi\n</code></pre>"},{"location":"integration/cloud/pcmcs/#deployment-validation","title":"Deployment Validation","text":"<pre><code># Validate dimension import\nepmautomate validatedimension\n\n# Check for errors\nepmautomate getjoberrors\n\n# Review import log\nepmautomate downloadfile import.log\n</code></pre>"},{"location":"integration/cloud/pcmcs/#performance-optimization","title":"Performance Optimization","text":""},{"location":"integration/cloud/pcmcs/#batch-processing","title":"Batch Processing","text":"<pre><code># Process multiple files\nfor file in *.csv; do\n    epmautomate uploadfile \"$file\"\n    epmautomate importdimension \"$file\"\n    epmautomate deletefile \"$file\"\ndone\n</code></pre>"},{"location":"integration/cloud/pcmcs/#compression","title":"Compression","text":"<pre><code># Compress before upload\ngzip -9 large_data.csv\nepmautomate uploadfile large_data.csv.gz\n\n# PCMCS automatically handles .gz files\nepmautomate importpcmdata large_data.csv.gz\n</code></pre>"},{"location":"integration/cloud/pcmcs/#parallel-processing","title":"Parallel Processing","text":"<pre><code># Upload files in parallel\nls *.csv | xargs -P 4 -I {} epmautomate uploadfile {}\n</code></pre>"},{"location":"integration/cloud/pcmcs/#troubleshooting","title":"Troubleshooting","text":""},{"location":"integration/cloud/pcmcs/#common-pcmcs-issues","title":"Common PCMCS Issues","text":"Issue Cause Solution Login fails Wrong URL format Verify full URL including https:// Import fails Invalid data format Check CSV format and encoding Timeout errors Large data sets Increase timeout or split files Permission denied Insufficient role Verify Service Administrator role Connection reset Proxy issues Configure proxy settings"},{"location":"integration/cloud/pcmcs/#debug-logging","title":"Debug Logging","text":"<pre><code># Enable debug mode\nexport EPM_AUTOMATE_LOG_LEVEL=DEBUG\n\n# Run with verbose output\nepmautomate login $USER $PASSWORD $URL -v\n\n# Check logs\ntail -f ~/epmautomate/logs/epmautomate.log\n</code></pre>"},{"location":"integration/cloud/pcmcs/#error-recovery","title":"Error Recovery","text":"<pre><code>#!/bin/bash\n# recover_failed_import.sh\n\n# Check for failed jobs\nepmautomate listjobs | grep FAILED\n\n# Get error details\nepmautomate getjoberrors &gt; errors.log\n\n# Retry failed imports\nif grep -q \"dimension import failed\" errors.log; then\n    echo \"Retrying dimension import...\"\n    epmautomate importdimension dimensions.csv\nfi\n</code></pre>"},{"location":"integration/cloud/pcmcs/#security-considerations","title":"Security Considerations","text":""},{"location":"integration/cloud/pcmcs/#password-management","title":"Password Management","text":"<pre><code># Use encrypted password file\nopenssl enc -aes-256-cbc -salt -in password.txt -out password.enc\n\n# Use in script\nPASSWORD=$(openssl enc -aes-256-cbc -d -in password.enc)\nepmautomate login $USER $PASSWORD $URL\n</code></pre>"},{"location":"integration/cloud/pcmcs/#audit-logging","title":"Audit Logging","text":"<pre><code># Enable audit logging\npcmcs.audit.enabled=true\npcmcs.audit.operations=true\npcmcs.audit.data.changes=true\n</code></pre>"},{"location":"integration/cloud/pcmcs/#secure-communication","title":"Secure Communication","text":"<pre><code># Verify TLS version\nopenssl s_client -connect pcmcs-instance.oraclecloud.com:443 -tls1_2\n\n# Check certificate\nopenssl s_client -connect pcmcs-instance.oraclecloud.com:443 -showcerts\n</code></pre>"},{"location":"integration/cloud/pcmcs/#maintenance-tasks","title":"Maintenance Tasks","text":""},{"location":"integration/cloud/pcmcs/#regular-maintenance","title":"Regular Maintenance","text":"<pre><code>#!/bin/bash\n# maintenance_pcmcs.sh\n\n# Login\nepmautomate login $USER $PASSWORD $URL\n\n# Clean up old files\nepmautomate listfiles | grep \"backup_\" | while read file; do\n    FILE_DATE=$(echo $file | grep -oE '[0-9]{8}')\n    if [[ $FILE_DATE &lt; $(date -d '30 days ago' +%Y%m%d) ]]; then\n        epmautomate deletefile \"$file\"\n    fi\ndone\n\n# Optimize application\nepmautomate optimizepcmapplication\n\n# Logout\nepmautomate logout\n</code></pre>"},{"location":"integration/cloud/pcmcs/#epm-automate-updates","title":"EPM Automate Updates","text":"<pre><code># Check for updates\nepmautomate upgrade\n\n# Auto-upgrade\nepmautomate upgrade -f\n\n# Verify version after upgrade\nepmautomate --version\n</code></pre>"},{"location":"integration/cloud/pcmcs/#best-practices","title":"Best Practices","text":""},{"location":"integration/cloud/pcmcs/#pcmcs-specific-guidelines","title":"PCMCS-Specific Guidelines","text":"<ol> <li>Always backup before changes - Export dimensions and data</li> <li>Use validation mode - Test imports before applying</li> <li>Monitor job status - Check for failures immediately</li> <li>Implement retry logic - Handle transient failures</li> <li>Clean up files - Delete uploaded files after processing</li> </ol>"},{"location":"integration/cloud/pcmcs/#performance-tips","title":"Performance Tips","text":"<ol> <li>Batch small changes - Group related updates</li> <li>Split large files - Files over 100MB</li> <li>Schedule off-hours - Reduce user impact</li> <li>Use compression - For large data files</li> <li>Monitor execution time - Track performance trends</li> </ol>"},{"location":"integration/cloud/pcmcs/#integration-checklist","title":"Integration Checklist","text":"<p>Before production deployment:</p> <ul> <li>[ ] EPM Automate installed and updated</li> <li>[ ] Connection to PCMCS verified</li> <li>[ ] Service Administrator role assigned</li> <li>[ ] Backup procedures implemented</li> <li>[ ] Error handling in scripts</li> <li>[ ] Monitoring configured</li> <li>[ ] Documentation updated</li> <li>[ ] Recovery procedures tested</li> <li>[ ] Security measures in place</li> <li>[ ] Performance benchmarked</li> </ul> <p>Version Management</p> <p>Keep EPM Automate updated to ensure compatibility with the latest PCMCS features. Oracle releases updates monthly.</p> <p>Data Validation</p> <p>Always validate dimension and data files before importing to prevent application corruption. Use VALIDATEONLY=true for testing.</p>"},{"location":"integration/cloud/pcmcs/#next-steps","title":"Next Steps","text":"<ul> <li>EPM Automate Setup - Detailed utility configuration</li> <li>Upgrade Process - Keep tools current</li> <li>Cloud Integration Overview - Other cloud services</li> <li>Troubleshooting - Resolve issues</li> </ul>"},{"location":"integration/cloud/upgrade/","title":"Upgrade Process","text":""},{"location":"integration/cloud/upgrade/#epm-automate-upgrade-process","title":"EPM Automate Upgrade Process","text":"<p>This guide covers the upgrade process for EPM Automate utility and maintaining compatibility with Oracle Cloud EPM services.</p>"},{"location":"integration/cloud/upgrade/#overview","title":"Overview","text":"<p>Oracle releases EPM Automate updates monthly with: - New features and commands - Bug fixes and performance improvements - Security patches - Compatibility updates for cloud services</p>"},{"location":"integration/cloud/upgrade/#upgrade-strategy","title":"Upgrade Strategy","text":""},{"location":"integration/cloud/upgrade/#why-upgrade-regularly","title":"Why Upgrade Regularly","text":"<ol> <li>Compatibility - Cloud services evolve, requiring client updates</li> <li>Security - Critical security patches</li> <li>Features - New functionality and improvements</li> <li>Performance - Optimization and bug fixes</li> <li>Support - Oracle only supports recent versions</li> </ol>"},{"location":"integration/cloud/upgrade/#upgrade-frequency","title":"Upgrade Frequency","text":"Environment Recommended Frequency Notes Production Monthly After testing in non-prod UAT/Test Monthly Before production Development As available Test new features"},{"location":"integration/cloud/upgrade/#pre-upgrade-checklist","title":"Pre-Upgrade Checklist","text":""},{"location":"integration/cloud/upgrade/#before-you-upgrade","title":"Before You Upgrade","text":"<ul> <li>[ ] Check current version</li> <li>[ ] Review release notes</li> <li>[ ] Backup current installation</li> <li>[ ] Document custom configurations</li> <li>[ ] Test in non-production</li> <li>[ ] Schedule maintenance window</li> <li>[ ] Notify stakeholders</li> <li>[ ] Prepare rollback plan</li> </ul>"},{"location":"integration/cloud/upgrade/#version-check","title":"Version Check","text":"<pre><code># Check current version\nepmautomate --version\n\n# Sample output\nEPM Automate version 23.11.75\nBuild: 2023-11-15 10:30:00\n</code></pre>"},{"location":"integration/cloud/upgrade/#upgrade-methods","title":"Upgrade Methods","text":""},{"location":"integration/cloud/upgrade/#method-1-auto-upgrade-recommended","title":"Method 1: Auto-Upgrade (Recommended)","text":""},{"location":"integration/cloud/upgrade/#check-for-updates","title":"Check for Updates","text":"<pre><code># Check if update available\nepmautomate upgrade -c\n\n# Output if update available\nA new version of EPM Automate is available: 23.11.76\nCurrent version: 23.11.75\n</code></pre>"},{"location":"integration/cloud/upgrade/#perform-auto-upgrade","title":"Perform Auto-Upgrade","text":"<pre><code># Auto-upgrade with confirmation\nepmautomate upgrade\n\n# Force upgrade without confirmation\nepmautomate upgrade -f\n\n# Upgrade with proxy\nepmautomate upgrade -f ProxyHost=proxy.company.com ProxyPort=8080\n</code></pre>"},{"location":"integration/cloud/upgrade/#method-2-manual-download-and-install","title":"Method 2: Manual Download and Install","text":""},{"location":"integration/cloud/upgrade/#windows-manual-upgrade","title":"Windows Manual Upgrade","text":"<pre><code># 1. Download new version from Oracle Cloud\n# 2. Backup current installation\nCopy-Item \"C:\\Oracle\\EPM Automate\" \"C:\\Oracle\\EPM Automate_backup\" -Recurse\n\n# 3. Run new installer\n.\\EPMAutomate.exe\n\n# 4. Verify upgrade\nepmautomate --version\n</code></pre>"},{"location":"integration/cloud/upgrade/#linux-manual-upgrade","title":"Linux Manual Upgrade","text":"<pre><code># 1. Download new version\nwget https://download-url/EPMAutomate.tar\n\n# 2. Backup current installation\ncp -r ~/epmautomate ~/epmautomate_backup_$(date +%Y%m%d)\n\n# 3. Extract new version\ntar xf EPMAutomate.tar -C ~/\n\n# 4. Verify upgrade\n~/epmautomate/bin/epmautomate.sh --version\n</code></pre>"},{"location":"integration/cloud/upgrade/#method-3-scripted-upgrade","title":"Method 3: Scripted Upgrade","text":"<pre><code>#!/bin/bash\n# upgrade_epm_automate.sh\n\n# Configuration\nEPM_HOME=\"/opt/epmware/epmautomate\"\nBACKUP_DIR=\"/opt/backup/epmautomate\"\nLOG_FILE=\"/var/log/epm_upgrade_$(date +%Y%m%d).log\"\n\n# Logging\nexec 1&gt; &gt;(tee -a \"$LOG_FILE\")\nexec 2&gt;&amp;1\n\necho \"=== EPM Automate Upgrade Started: $(date) ===\"\n\n# Check current version\nCURRENT_VERSION=$(epmautomate --version | head -1)\necho \"Current version: $CURRENT_VERSION\"\n\n# Check for updates\nif epmautomate upgrade -c | grep -q \"new version\"; then\n    echo \"Update available\"\n\n    # Backup current installation\n    echo \"Creating backup...\"\n    mkdir -p $BACKUP_DIR\n    cp -r $EPM_HOME $BACKUP_DIR/epmautomate_$(date +%Y%m%d_%H%M%S)\n\n    # Perform upgrade\n    echo \"Upgrading EPM Automate...\"\n    epmautomate upgrade -f\n\n    # Verify upgrade\n    NEW_VERSION=$(epmautomate --version | head -1)\n    echo \"New version: $NEW_VERSION\"\n\n    # Test basic functionality\n    echo \"Testing upgraded version...\"\n    epmautomate help &gt; /dev/null 2&gt;&amp;1\n    if [ $? -eq 0 ]; then\n        echo \"Upgrade successful\"\n    else\n        echo \"Upgrade failed - rolling back\"\n        # Rollback logic here\n    fi\nelse\n    echo \"No updates available\"\nfi\n\necho \"=== Upgrade Process Completed: $(date) ===\"\n</code></pre>"},{"location":"integration/cloud/upgrade/#post-upgrade-validation","title":"Post-Upgrade Validation","text":""},{"location":"integration/cloud/upgrade/#validation-steps","title":"Validation Steps","text":""},{"location":"integration/cloud/upgrade/#step-1-version-verification","title":"Step 1: Version Verification","text":"<pre><code># Verify version updated\nepmautomate --version\n\n# Check build date\nepmautomate --version | grep Build\n</code></pre>"},{"location":"integration/cloud/upgrade/#step-2-functionality-test","title":"Step 2: Functionality Test","text":"<pre><code>#!/bin/bash\n# test_epm_automate.sh\n\necho \"Testing EPM Automate functionality...\"\n\n# Test help command\nif epmautomate help &gt; /dev/null 2&gt;&amp;1; then\n    echo \"\u2713 Help command works\"\nelse\n    echo \"\u2717 Help command failed\"\nfi\n\n# Test login (if credentials available)\nif [ -f .credentials ]; then\n    source .credentials\n    if epmautomate login $USER $PASSWORD $URL $DOMAIN; then\n        echo \"\u2713 Login successful\"\n        epmautomate logout\n    else\n        echo \"\u2717 Login failed\"\n    fi\nfi\n</code></pre>"},{"location":"integration/cloud/upgrade/#step-3-script-compatibility","title":"Step 3: Script Compatibility","text":"<pre><code># Test existing scripts\nfor script in scripts/*.sh; do\n    echo \"Testing $script...\"\n    bash -n $script  # Syntax check\n    if [ $? -eq 0 ]; then\n        echo \"\u2713 $script syntax OK\"\n    else\n        echo \"\u2717 $script has syntax errors\"\n    fi\ndone\n</code></pre>"},{"location":"integration/cloud/upgrade/#integration-testing","title":"Integration Testing","text":"<pre><code>#!/bin/bash\n# integration_test.sh\n\n# Test with EPMware Agent\necho \"Testing EPMware Agent integration...\"\n\n# Check if agent can find EPM Automate\nif $AGENT_HOME/ew_target_service.sh test-epm; then\n    echo \"\u2713 Agent integration successful\"\nelse\n    echo \"\u2717 Agent integration failed\"\nfi\n\n# Test deployment\nif $AGENT_HOME/test_deployment.sh; then\n    echo \"\u2713 Test deployment successful\"\nelse\n    echo \"\u2717 Test deployment failed\"\nfi\n</code></pre>"},{"location":"integration/cloud/upgrade/#rollback-procedure","title":"Rollback Procedure","text":""},{"location":"integration/cloud/upgrade/#when-to-rollback","title":"When to Rollback","text":"<ul> <li>Upgrade fails to complete</li> <li>Critical functionality broken</li> <li>Integration issues with EPMware Agent</li> <li>Performance degradation</li> </ul>"},{"location":"integration/cloud/upgrade/#rollback-steps","title":"Rollback Steps","text":"<pre><code>#!/bin/bash\n# rollback_epm_automate.sh\n\nBACKUP_DIR=\"/opt/backup/epmautomate\"\nEPM_HOME=\"/opt/epmware/epmautomate\"\n\necho \"Starting EPM Automate rollback...\"\n\n# Find most recent backup\nLATEST_BACKUP=$(ls -t $BACKUP_DIR | head -1)\n\nif [ -z \"$LATEST_BACKUP\" ]; then\n    echo \"No backup found!\"\n    exit 1\nfi\n\necho \"Rolling back to: $LATEST_BACKUP\"\n\n# Remove current installation\nrm -rf $EPM_HOME\n\n# Restore backup\ncp -r $BACKUP_DIR/$LATEST_BACKUP $EPM_HOME\n\n# Verify rollback\nepmautomate --version\n\necho \"Rollback completed\"\n</code></pre>"},{"location":"integration/cloud/upgrade/#automated-upgrade-management","title":"Automated Upgrade Management","text":""},{"location":"integration/cloud/upgrade/#scheduled-upgrade-script","title":"Scheduled Upgrade Script","text":"<pre><code>#!/bin/bash\n# scheduled_upgrade.sh\n# Run monthly via cron\n\n# Configuration\nNOTIFICATION_EMAIL=\"admin@company.com\"\nTEST_FIRST=true\n\n# Function to send notification\nnotify() {\n    local subject=$1\n    local message=$2\n    echo \"$message\" | mail -s \"$subject\" $NOTIFICATION_EMAIL\n}\n\n# Check for updates\nUPDATE_CHECK=$(epmautomate upgrade -c 2&gt;&amp;1)\n\nif echo \"$UPDATE_CHECK\" | grep -q \"new version\"; then\n    notify \"EPM Automate Update Available\" \"$UPDATE_CHECK\"\n\n    if [ \"$TEST_FIRST\" = true ]; then\n        # Test in development first\n        ssh dev-server \"/opt/scripts/upgrade_epm_automate.sh\"\n\n        if [ $? -eq 0 ]; then\n            notify \"EPM Automate Upgrade\" \"Dev upgrade successful, proceeding with production\"\n            # Proceed with production upgrade\n            /opt/scripts/upgrade_epm_automate.sh\n        else\n            notify \"EPM Automate Upgrade Failed\" \"Dev upgrade failed, skipping production\"\n        fi\n    else\n        # Direct upgrade\n        /opt/scripts/upgrade_epm_automate.sh\n    fi\nfi\n</code></pre>"},{"location":"integration/cloud/upgrade/#cron-configuration","title":"Cron Configuration","text":"<pre><code># Add to crontab\n# Check for updates weekly, upgrade monthly\n\n# Weekly update check (Mondays at 9 AM)\n0 9 * * 1 /opt/scripts/check_epm_updates.sh\n\n# Monthly upgrade (First Sunday at 2 AM)\n0 2 1-7 * 0 /opt/scripts/scheduled_upgrade.sh\n</code></pre>"},{"location":"integration/cloud/upgrade/#version-compatibility-matrix","title":"Version Compatibility Matrix","text":""},{"location":"integration/cloud/upgrade/#epm-automate-vs-cloud-services","title":"EPM Automate vs Cloud Services","text":"EPM Automate Version Compatible Cloud Versions Notes 23.11.x 23.10 - 23.12 Current 23.10.x 23.09 - 23.11 Supported 23.09.x 23.08 - 23.10 Limited support &lt; 23.09 Various Upgrade required"},{"location":"integration/cloud/upgrade/#feature-availability","title":"Feature Availability","text":"<pre><code>#!/bin/bash\n# check_features.sh\n\nVERSION=$(epmautomate --version | grep -oE '[0-9]+\\.[0-9]+\\.[0-9]+')\nMAJOR=$(echo $VERSION | cut -d. -f1)\nMINOR=$(echo $VERSION | cut -d. -f2)\n\necho \"Version: $VERSION\"\n\n# Check feature availability\nif [ $MAJOR -ge 23 ] &amp;&amp; [ $MINOR -ge 11 ]; then\n    echo \"\u2713 OAuth 2.0 support\"\n    echo \"\u2713 Parallel processing\"\n    echo \"\u2713 Enhanced encryption\"\nelse\n    echo \"\u2717 Missing latest features - upgrade recommended\"\nfi\n</code></pre>"},{"location":"integration/cloud/upgrade/#troubleshooting-upgrade-issues","title":"Troubleshooting Upgrade Issues","text":""},{"location":"integration/cloud/upgrade/#common-upgrade-problems","title":"Common Upgrade Problems","text":"Issue Cause Solution Upgrade fails Network issues Check proxy/firewall settings Version mismatch Partial upgrade Clean install Scripts break API changes Review release notes Performance issues Configuration reset Restore custom settings Connection errors TLS version Update Java/certificates"},{"location":"integration/cloud/upgrade/#debug-upgrade-process","title":"Debug Upgrade Process","text":"<pre><code># Enable debug logging\nexport EPM_AUTOMATE_LOG_LEVEL=DEBUG\n\n# Verbose upgrade\nepmautomate upgrade -f -v\n\n# Check upgrade logs\ntail -f ~/epmautomate/logs/upgrade.log\n</code></pre>"},{"location":"integration/cloud/upgrade/#fix-corrupted-installation","title":"Fix Corrupted Installation","text":"<pre><code>#!/bin/bash\n# fix_installation.sh\n\necho \"Fixing EPM Automate installation...\"\n\n# Remove corrupted installation\nrm -rf ~/epmautomate\n\n# Download fresh copy\nwget https://download-url/EPMAutomate.tar\n\n# Extract\ntar xf EPMAutomate.tar\n\n# Configure\nexport JAVA_HOME=/usr/java/latest\nexport PATH=$PATH:~/epmautomate/bin\n\n# Verify\nepmautomate --version\n</code></pre>"},{"location":"integration/cloud/upgrade/#best-practices","title":"Best Practices","text":""},{"location":"integration/cloud/upgrade/#upgrade-guidelines","title":"Upgrade Guidelines","text":"<ol> <li>Test First - Always test in non-production</li> <li>Backup Always - Keep installation backups</li> <li>Document Changes - Track version history</li> <li>Review Notes - Read release notes carefully</li> <li>Plan Rollback - Have recovery plan ready</li> </ol>"},{"location":"integration/cloud/upgrade/#version-management","title":"Version Management","text":"<pre><code># Track version history\necho \"$(date),$(epmautomate --version)\" &gt;&gt; /var/log/epm_versions.csv\n\n# Maintain version documentation\ncat &gt; version_history.md &lt;&lt; EOF\n# EPM Automate Version History\n\n| Date | Version | Changes | Issues |\n|------|---------|---------|--------|\n| $(date +%Y-%m-%d) | $(epmautomate --version | head -1) | Upgraded | None |\nEOF\n</code></pre>"},{"location":"integration/cloud/upgrade/#testing-framework","title":"Testing Framework","text":"<pre><code>#!/bin/bash\n# test_framework.sh\n\n# Test suite for EPM Automate\nrun_tests() {\n    local status=0\n\n    # Basic tests\n    test_command \"help\"\n    test_command \"listcommands\"\n\n    # Connection tests\n    if [ -f .test_credentials ]; then\n        source .test_credentials\n        test_login\n        test_operations\n    fi\n\n    return $status\n}\n\ntest_command() {\n    local cmd=$1\n    if epmautomate $cmd &gt; /dev/null 2&gt;&amp;1; then\n        echo \"\u2713 Command '$cmd' passed\"\n    else\n        echo \"\u2717 Command '$cmd' failed\"\n        status=1\n    fi\n}\n\n# Run tests\nrun_tests\nexit $status\n</code></pre>"},{"location":"integration/cloud/upgrade/#monitoring-upgrade-status","title":"Monitoring Upgrade Status","text":""},{"location":"integration/cloud/upgrade/#health-check-script","title":"Health Check Script","text":"<pre><code>#!/bin/bash\n# health_check_post_upgrade.sh\n\necho \"=== Post-Upgrade Health Check ===\"\n\n# Version info\necho \"Version: $(epmautomate --version | head -1)\"\n\n# Check core functionality\nCHECKS_PASSED=0\nCHECKS_TOTAL=0\n\n# Check 1: Help command\n((CHECKS_TOTAL++))\nif epmautomate help &gt; /dev/null 2&gt;&amp;1; then\n    echo \"\u2713 Help command\"\n    ((CHECKS_PASSED++))\nelse\n    echo \"\u2717 Help command\"\nfi\n\n# Check 2: List commands\n((CHECKS_TOTAL++))\nif epmautomate listcommands &gt; /dev/null 2&gt;&amp;1; then\n    echo \"\u2713 List commands\"\n    ((CHECKS_PASSED++))\nelse\n    echo \"\u2717 List commands\"\nfi\n\n# Summary\necho \"Health Check: $CHECKS_PASSED/$CHECKS_TOTAL passed\"\n\nif [ $CHECKS_PASSED -eq $CHECKS_TOTAL ]; then\n    echo \"Status: HEALTHY\"\n    exit 0\nelse\n    echo \"Status: DEGRADED\"\n    exit 1\nfi\n</code></pre> <p>Staging Upgrades</p> <p>Maintain separate EPM Automate installations for different environments to test upgrades progressively through dev \u2192 test \u2192 production.</p> <p>Breaking Changes</p> <p>Always review release notes for breaking changes. Oracle occasionally deprecates commands or changes syntax.</p>"},{"location":"integration/cloud/upgrade/#next-steps","title":"Next Steps","text":"<ul> <li>EPM Automate Configuration - Detailed setup</li> <li>PCMCS Configuration - PCMCS integration</li> <li>Cloud Integration - Cloud services overview</li> <li>Troubleshooting - Resolve issues</li> </ul>"},{"location":"integration/hfm/","title":"Hyperion HFM Integration","text":""},{"location":"integration/hfm/#hyperion-hfm-integration","title":"Hyperion HFM Integration","text":"<p>This section covers the configuration and integration of the EPMware Agent with Oracle Hyperion Financial Management (HFM) applications.</p>"},{"location":"integration/hfm/#overview","title":"Overview","text":"<p>HFM integration enables EPMware to: - Import metadata from HFM applications - Deploy dimension changes - Manage calculation rules - Load and extract data - Execute consolidations</p>"},{"location":"integration/hfm/#integration-components","title":"Integration Components","text":"<ul> <li> <p> Configuration   HFM-specific agent configuration</p> </li> <li> <p> Registry Properties   Registry file setup and management</p> </li> </ul>"},{"location":"integration/hfm/#hfm-architecture","title":"HFM Architecture","text":"<pre><code>graph LR\n    A[EPMware Agent] --&gt; B[HFM Utilities]\n    B --&gt; C[LoadMetadata]\n    B --&gt; D[ExtractMetadata]\n    B --&gt; E[LoadRules]\n    B --&gt; F[LoadData]\n    C --&gt; G[HFM Application]\n    G --&gt; H[HFM Database]\n</code></pre>"},{"location":"integration/hfm/#prerequisites","title":"Prerequisites","text":""},{"location":"integration/hfm/#software-requirements","title":"Software Requirements","text":"Component Version Location HFM 11.1.2.4+ Application server Java 1.8+ System PATH HFM Utilities Matching HFM version <code>$EPM_ORACLE_HOME/products/FinancialManagement/bin</code> Registry Properties HFM version Foundation config directory"},{"location":"integration/hfm/#user-requirements","title":"User Requirements","text":"<p>The HFM user account needs: - Application Administrator role - Metadata Load privileges - Dimension Editor access - Rules Administrator (if managing rules) - Data Load privileges (if loading data)</p>"},{"location":"integration/hfm/#quick-setup-guide","title":"Quick Setup Guide","text":""},{"location":"integration/hfm/#step-1-verify-hfm-installation","title":"Step 1: Verify HFM Installation","text":"<pre><code># Check HFM utilities location\nls $EPM_ORACLE_HOME/products/FinancialManagement/bin/\n\n# Key utilities needed:\n# - LoadMetadata.exe/sh\n# - ExtractMetadata.exe/sh\n# - LoadRules.exe/sh\n# - LoadData.exe/sh\n</code></pre>"},{"location":"integration/hfm/#step-2-configure-registry-properties","title":"Step 2: Configure Registry Properties","text":"<pre><code># Copy registry file (Critical for HFM)\ncp $MIDDLEWARE/user_projects/config/foundation/11.1.2.0/reg.properties \\\n   $MIDDLEWARE/user_projects/epmsystem1/config/foundation/11.1.2.0/\n\n# Verify copy\nls -la $MIDDLEWARE/user_projects/epmsystem1/config/foundation/11.1.2.0/reg.properties\n</code></pre>"},{"location":"integration/hfm/#step-3-configure-epmware","title":"Step 3: Configure EPMware","text":"<ol> <li>Navigate to Configuration \u2192 Applications</li> <li>Select HFM application</li> <li>Configure connection parameters:</li> <li>Server name</li> <li>Cluster name</li> <li>Application name</li> <li>Credentials</li> </ol>"},{"location":"integration/hfm/#step-4-test-connection","title":"Step 4: Test Connection","text":"<pre><code>REM Windows test\nLoadMetadata.exe -a:HFMAPP -u:admin -p:password -test\n\n# Linux test\nLoadMetadata.sh -a:HFMAPP -u:admin -p:password -test\n</code></pre>"},{"location":"integration/hfm/#configuration-in-epmware","title":"Configuration in EPMware","text":""},{"location":"integration/hfm/#application-settings","title":"Application Settings","text":"<p>Configure these settings in EPMware for HFM:</p> Parameter Description Example Application Name HFM application name HFMPROD Server HFM server hostname hfm.company.com Cluster HFM cluster name Cluster1 Port HFM port 19000 User HFM admin user admin Password Encrypted password {encrypted}xxx Database HFM database HFMDB"},{"location":"integration/hfm/#agent-configuration","title":"Agent Configuration","text":"<p>Add to <code>agent.properties</code>:</p> <pre><code># HFM configuration\nhfm.enabled=true\nhfm.server=hfm.company.com\nhfm.cluster=Cluster1\nhfm.port=19000\nhfm.timeout=3600\n\n# Utility paths\nhfm.loadmetadata.path=/opt/Oracle/products/FinancialManagement/bin/LoadMetadata.sh\nhfm.extractmetadata.path=/opt/Oracle/products/FinancialManagement/bin/ExtractMetadata.sh\nhfm.loadrules.path=/opt/Oracle/products/FinancialManagement/bin/LoadRules.sh\n\n# Deployment options\nhfm.deployment.backup=true\nhfm.deployment.validate=true\nhfm.deployment.clearAll=false\n</code></pre>"},{"location":"integration/hfm/#deployment-operations","title":"Deployment Operations","text":""},{"location":"integration/hfm/#metadata-import-from-hfm","title":"Metadata Import from HFM","text":"<pre><code># Extract all metadata\nExtractMetadata.exe -a:HFMAPP -u:admin -p:password \\\n    -e:All -f:backup.xml\n\n# Extract specific dimensions\nExtractMetadata.exe -a:HFMAPP -u:admin -p:password \\\n    -e:Entity,Account -f:dimensions.xml\n\n# Extract with options\nExtractMetadata.exe -a:HFMAPP -u:admin -p:password \\\n    -e:Entity -f:entity.xml -l:logfile.log\n</code></pre>"},{"location":"integration/hfm/#metadata-export-to-hfm","title":"Metadata Export to HFM","text":"<pre><code># Load metadata (merge mode)\nLoadMetadata.exe -a:HFMAPP -u:admin -p:password \\\n    -f:metadata.xml -m:Merge\n\n# Load metadata (replace mode)\nLoadMetadata.exe -a:HFMAPP -u:admin -p:password \\\n    -f:metadata.xml -m:Replace\n\n# Load with validation\nLoadMetadata.exe -a:HFMAPP -u:admin -p:password \\\n    -f:metadata.xml -m:Validate\n</code></pre>"},{"location":"integration/hfm/#supported-operations","title":"Supported Operations","text":"Operation Command Description Merge <code>-m:Merge</code> Add/update members Replace <code>-m:Replace</code> Replace entire dimension Validate <code>-m:Validate</code> Validate without loading Clear <code>-m:Clear</code> Clear dimension first"},{"location":"integration/hfm/#hfm-dimensions","title":"HFM Dimensions","text":""},{"location":"integration/hfm/#standard-hfm-dimensions","title":"Standard HFM Dimensions","text":"Dimension Type Description Entity Hierarchy Organization structure Account Hierarchy Chart of accounts Scenario Flat Budget/Actual/Forecast Period System Time periods Year System Fiscal years Value System Currency/adjustments Custom1-4 User-defined Custom dimensions ICP Flat Intercompany partners"},{"location":"integration/hfm/#metadata-file-format","title":"Metadata File Format","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;HFM&gt;\n  &lt;Dimension name=\"Entity\"&gt;\n    &lt;Member name=\"E1000\" description=\"North America\"&gt;\n      &lt;Property name=\"Currency\" value=\"USD\"/&gt;\n      &lt;Property name=\"SecurityClass\" value=\"Default\"/&gt;\n      &lt;Member name=\"E1100\" description=\"United States\"/&gt;\n      &lt;Member name=\"E1200\" description=\"Canada\"/&gt;\n    &lt;/Member&gt;\n  &lt;/Dimension&gt;\n&lt;/HFM&gt;\n</code></pre>"},{"location":"integration/hfm/#rules-management","title":"Rules Management","text":""},{"location":"integration/hfm/#load-calculation-rules","title":"Load Calculation Rules","text":"<pre><code># Load rules file\nLoadRules.exe -a:HFMAPP -u:admin -p:password \\\n    -f:calc_rules.txt -m:Replace\n\n# Load with backup\nLoadRules.exe -a:HFMAPP -u:admin -p:password \\\n    -f:calc_rules.txt -m:Replace -b:backup_rules.txt\n</code></pre>"},{"location":"integration/hfm/#extract-rules","title":"Extract Rules","text":"<pre><code># Extract all rules\nExtractRules.exe -a:HFMAPP -u:admin -p:password \\\n    -f:rules_backup.txt\n\n# Extract specific rule type\nExtractRules.exe -a:HFMAPP -u:admin -p:password \\\n    -f:calc_rules.txt -t:Calculation\n</code></pre>"},{"location":"integration/hfm/#data-operations","title":"Data Operations","text":""},{"location":"integration/hfm/#load-data","title":"Load Data","text":"<pre><code># Load data file\nLoadData.exe -a:HFMAPP -u:admin -p:password \\\n    -f:data.dat -m:Replace\n\n# Load with POV\nLoadData.exe -a:HFMAPP -u:admin -p:password \\\n    -f:data.dat -s:Actual -y:2023 -p:January\n</code></pre>"},{"location":"integration/hfm/#extract-data","title":"Extract Data","text":"<pre><code># Extract data\nExtractData.exe -a:HFMAPP -u:admin -p:password \\\n    -f:data_export.dat -s:Actual -y:2023\n</code></pre>"},{"location":"integration/hfm/#security-configuration","title":"Security Configuration","text":""},{"location":"integration/hfm/#user-provisioning","title":"User Provisioning","text":"<p>Required HFM roles: </p><pre><code>- Application Administrator\n- Metadata Manager\n- Rules Manager\n- Load System\n</code></pre><p></p>"},{"location":"integration/hfm/#secure-credentials","title":"Secure Credentials","text":"<pre><code># Encrypted password in agent.properties\nhfm.password={encrypted}AES256:abcd1234...\n\n# Or use external credential store\nhfm.password.provider=vault\nhfm.password.key=hfm/prod/admin\n</code></pre>"},{"location":"integration/hfm/#performance-optimization","title":"Performance Optimization","text":""},{"location":"integration/hfm/#batch-processing","title":"Batch Processing","text":"<pre><code># Batch configuration\nhfm.batch.enabled=true\nhfm.batch.size=5000\nhfm.batch.threads=4\n</code></pre>"},{"location":"integration/hfm/#connection-pooling","title":"Connection Pooling","text":"<pre><code># Connection pool settings\nhfm.pool.enabled=true\nhfm.pool.min=2\nhfm.pool.max=10\nhfm.pool.timeout=30000\n</code></pre>"},{"location":"integration/hfm/#memory-settings","title":"Memory Settings","text":"<pre><code># Set heap size for HFM utilities\nexport HFM_JVM_OPTIONS=\"-Xms2048m -Xmx4096m\"\n</code></pre>"},{"location":"integration/hfm/#troubleshooting","title":"Troubleshooting","text":""},{"location":"integration/hfm/#common-issues","title":"Common Issues","text":"Issue Cause Solution Registry not found reg.properties missing Copy to EPM instance folder Connection failed Wrong cluster/server Verify HFM configuration Load fails Invalid XML format Validate XML structure Permission denied Insufficient privileges Grant required HFM roles Timeout Large metadata file Increase timeout setting"},{"location":"integration/hfm/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging:</p> <pre><code># Set environment variables\nexport HFM_DEBUG=true\nexport HFM_LOG_LEVEL=TRACE\n\n# Run with debug\nLoadMetadata.exe -a:HFMAPP -u:admin -p:password \\\n    -f:metadata.xml -l:debug.log -v\n</code></pre>"},{"location":"integration/hfm/#log-files","title":"Log Files","text":"<p>Check these logs for issues:</p> <pre><code># HFM logs\n$EPM_ORACLE_INSTANCE/diagnostics/logs/FinancialManagement/HFM.log\n\n# Agent logs\ntail -f /home/epmware/logs/agent.log | grep -i hfm\n\n# Windows Event Log\neventvwr.msc \u2192 Applications and Services \u2192 HFM\n</code></pre>"},{"location":"integration/hfm/#best-practices","title":"Best Practices","text":""},{"location":"integration/hfm/#deployment-strategy","title":"Deployment Strategy","text":"<ol> <li>Always backup first - Extract before loading</li> <li>Validate before load - Use validation mode</li> <li>Test in non-production - Never test in prod</li> <li>Schedule off-hours - Minimize user impact</li> <li>Monitor closely - Check logs during deployment</li> </ol>"},{"location":"integration/hfm/#metadata-standards","title":"Metadata Standards","text":"<ol> <li>Naming conventions - Consistent member names</li> <li>Description standards - Meaningful descriptions</li> <li>Security classes - Proper assignments</li> <li>Currency settings - Correct for entities</li> <li>Custom properties - Document usage</li> </ol>"},{"location":"integration/hfm/#maintenance","title":"Maintenance","text":"<ol> <li>Regular backups - Daily metadata extracts</li> <li>Archive old files - Compress and store</li> <li>Clean temp files - Remove after processing</li> <li>Update documentation - Keep current</li> <li>Review logs - Check for warnings</li> </ol>"},{"location":"integration/hfm/#monitoring","title":"Monitoring","text":""},{"location":"integration/hfm/#health-checks","title":"Health Checks","text":"<pre><code>#!/bin/bash\n# check_hfm.sh\n\n# Check HFM process\nps aux | grep -i hfm\n\n# Test connection\ntimeout 10 LoadMetadata.exe -test\n\n# Check port\nnc -zv hfm-server 19000\n</code></pre>"},{"location":"integration/hfm/#deployment-metrics","title":"Deployment Metrics","text":"<p>Track these metrics: - Deployment duration - Success rate - Error frequency - Metadata size - Rule complexity</p>"},{"location":"integration/hfm/#integration-checklist","title":"Integration Checklist","text":"<p>Before production:</p> <ul> <li>[ ] HFM utilities accessible</li> <li>[ ] Registry properties copied</li> <li>[ ] User has required roles</li> <li>[ ] Network connectivity verified</li> <li>[ ] Test deployment successful</li> <li>[ ] Backup procedures in place</li> <li>[ ] Monitoring configured</li> <li>[ ] Documentation updated</li> <li>[ ] Rollback plan prepared</li> <li>[ ] Change control approved</li> </ul>"},{"location":"integration/hfm/#sample-scripts","title":"Sample Scripts","text":""},{"location":"integration/hfm/#backup-script","title":"Backup Script","text":"<pre><code>#!/bin/bash\n# backup_hfm.sh\n\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/backup/hfm/$DATE\"\nmkdir -p $BACKUP_DIR\n\n# Extract all metadata\nExtractMetadata.exe -a:HFMAPP -u:admin -p:password \\\n    -e:All -f:$BACKUP_DIR/metadata.xml\n\n# Extract rules\nExtractRules.exe -a:HFMAPP -u:admin -p:password \\\n    -f:$BACKUP_DIR/rules.txt\n\n# Compress\ntar -czf $BACKUP_DIR.tar.gz $BACKUP_DIR\nrm -rf $BACKUP_DIR\n</code></pre>"},{"location":"integration/hfm/#deployment-script","title":"Deployment Script","text":"<pre><code>#!/bin/bash\n# deploy_hfm.sh\n\n# Validate first\nLoadMetadata.exe -a:HFMAPP -u:admin -p:password \\\n    -f:metadata.xml -m:Validate\n\nif [ $? -eq 0 ]; then\n    # Load if validation passes\n    LoadMetadata.exe -a:HFMAPP -u:admin -p:password \\\n        -f:metadata.xml -m:Merge\nelse\n    echo \"Validation failed\"\n    exit 1\nfi\n</code></pre> <p>Version Matching</p> <p>Always ensure HFM utilities version matches your HFM application version to avoid compatibility issues.</p> <p>Registry Properties Critical</p> <p>The reg.properties file MUST be copied to the EPM instance folder or HFM operations will fail with cryptic errors.</p>"},{"location":"integration/hfm/#next-steps","title":"Next Steps","text":"<ul> <li>HFM Configuration Details - Detailed setup</li> <li>Registry Properties - Registry file management</li> <li>Planning Integration - Planning setup</li> <li>Cloud Integration - Cloud services</li> </ul>"},{"location":"integration/hfm/configuration/","title":"Configuration","text":""},{"location":"integration/hfm/configuration/#hyperion-hfm-configuration","title":"Hyperion HFM Configuration","text":""},{"location":"integration/hfm/configuration/#overview","title":"Overview","text":"<p>This section provides specific configuration steps for integrating the EPMware Agent with Oracle Hyperion Financial Management (HFM) applications. HFM requires additional configuration beyond the standard agent setup.</p>"},{"location":"integration/hfm/configuration/#prerequisites","title":"Prerequisites","text":"<p>Before configuring HFM integration:</p> <ul> <li>[ ] EPMware Agent is installed and configured</li> <li>[ ] HFM application server access is available</li> <li>[ ] HFM user account with appropriate permissions exists</li> <li>[ ] Registry properties file location is known</li> </ul>"},{"location":"integration/hfm/configuration/#registry-properties-configuration","title":"Registry Properties Configuration","text":""},{"location":"integration/hfm/configuration/#understanding-registry-properties","title":"Understanding Registry Properties","text":"<p>The <code>reg.properties</code> file contains HFM instance configuration that the agent needs to communicate with HFM applications. This file must be copied to a specific location for the agent to function properly.</p>"},{"location":"integration/hfm/configuration/#locating-the-registry-file","title":"Locating the Registry File","text":"<p>The <code>reg.properties</code> file is located in the Foundation configuration directory:</p> <p>Standard Location: </p><pre><code>[MIDDLEWARE]\\user_projects\\config\\foundation\\11.1.2.0\\reg.properties\n</code></pre><p></p> <p>Example Paths: - Windows: <code>D:\\Oracle\\Middleware\\user_projects\\config\\foundation\\11.1.2.0\\</code> - Linux: <code>/opt/Oracle/Middleware/user_projects/config/foundation/11.1.2.0/</code></p> <p> Location of reg.properties in the Foundation directory</p>"},{"location":"integration/hfm/configuration/#copying-registry-properties","title":"Copying Registry Properties","text":"<p>Critical Step</p> <p>This step is mandatory for HFM integration. The agent will fail to communicate with HFM without the registry file in the correct location.</p>"},{"location":"integration/hfm/configuration/#step-1-identify-source-and-destination","title":"Step 1: Identify Source and Destination","text":"<p>Source Path: </p><pre><code>[MIDDLEWARE]\\user_projects\\config\\foundation\\11.1.2.0\\reg.properties\n</code></pre><p></p> <p>Destination Path: </p><pre><code>[MIDDLEWARE]\\user_projects\\[EPM_INSTANCE]\\config\\foundation\\11.1.2.0\\\n</code></pre><p></p> <p>Where <code>[EPM_INSTANCE]</code> is typically <code>epmsystem1</code> or your custom instance name.</p>"},{"location":"integration/hfm/configuration/#step-2-copy-the-file","title":"Step 2: Copy the File","text":"<p>Windows Command: </p><pre><code>copy D:\\Oracle\\Middleware\\user_projects\\config\\foundation\\11.1.2.0\\reg.properties ^\n     D:\\Oracle\\Middleware\\user_projects\\epmsystem1\\config\\foundation\\11.1.2.0\\\n</code></pre><p></p> <p>Linux Command: </p><pre><code>cp /opt/Oracle/Middleware/user_projects/config/foundation/11.1.2.0/reg.properties \\\n   /opt/Oracle/Middleware/user_projects/epmsystem1/config/foundation/11.1.2.0/\n</code></pre><p></p>"},{"location":"integration/hfm/configuration/#step-3-verify-file-permissions","title":"Step 3: Verify File Permissions","text":"<p>Ensure the agent user has read access to the copied file:</p> <p>Windows: </p><pre><code>icacls D:\\Oracle\\Middleware\\user_projects\\epmsystem1\\config\\foundation\\11.1.2.0\\reg.properties\n</code></pre><p></p> <p>Linux: </p><pre><code>ls -la /opt/Oracle/Middleware/user_projects/epmsystem1/config/foundation/11.1.2.0/reg.properties\n</code></pre><p></p>"},{"location":"integration/hfm/configuration/#hfm-application-configuration-in-epmware","title":"HFM Application Configuration in EPMware","text":""},{"location":"integration/hfm/configuration/#adding-hfm-application","title":"Adding HFM Application","text":"<ol> <li>Navigate to Configuration \u2192 Applications in EPMware</li> <li>Click Add Application</li> <li>Configure HFM-specific settings:</li> </ol> Field Value Application Name Your HFM application name Application Type HFM Server Select configured HFM server Cluster HFM cluster name (if applicable) Database HFM application database <p> HFM application configuration in EPMware</p>"},{"location":"integration/hfm/configuration/#hfm-connection-parameters","title":"HFM Connection Parameters","text":"<p>Configure the following connection parameters:</p> Parameter Description Example HFM_SERVER HFM application server hostname <code>hfmserver.domain.com</code> HFM_CLUSTER HFM cluster name <code>Cluster1</code> HFM_APP HFM application name <code>HFMPROD</code> HFM_USER Service account username <code>hfm_admin</code> HFM_PASSWORD Encrypted password <code>{encrypted}...</code>"},{"location":"integration/hfm/configuration/#hfm-user-configuration","title":"HFM User Configuration","text":""},{"location":"integration/hfm/configuration/#creating-hfm-service-account","title":"Creating HFM Service Account","text":"<p>Create a dedicated service account for EPMware operations:</p> <ol> <li>In HFM Shared Services:</li> <li>Create new user (e.g., <code>svc_epmware</code>)</li> <li> <p>Assign to appropriate groups</p> </li> <li> <p>Required Roles:</p> </li> <li>Application Administrator</li> <li>Metadata Load</li> <li>Dimension Editor</li> <li>Rules Load (if managing rules)</li> </ol>"},{"location":"integration/hfm/configuration/#provisioning-user-access","title":"Provisioning User Access","text":"<pre><code>-- Example provisioning in Shared Services\nGRANT HFM_APPLICATION_ADMIN TO svc_epmware;\nGRANT HFM_METADATA_LOAD TO svc_epmware;\nGRANT HFM_DIMENSION_EDITOR TO svc_epmware;\n</code></pre>"},{"location":"integration/hfm/configuration/#hfm-specific-agent-properties","title":"HFM-Specific Agent Properties","text":"<p>Add HFM-specific settings to <code>agent.properties</code>:</p> <pre><code># HFM Configuration\nhfm.timeout.seconds=3600\nhfm.batch.size=1000\nhfm.validation.enabled=true\nhfm.backup.before.deploy=true\nhfm.log.verbose=false\n</code></pre>"},{"location":"integration/hfm/configuration/#configuration-options","title":"Configuration Options","text":"Property Description Default <code>hfm.timeout.seconds</code> Maximum time for HFM operations 3600 <code>hfm.batch.size</code> Records per batch for large deployments 1000 <code>hfm.validation.enabled</code> Validate metadata before deployment true <code>hfm.backup.before.deploy</code> Create backup before deployment true <code>hfm.log.verbose</code> Enable detailed HFM logging false"},{"location":"integration/hfm/configuration/#hfm-utilities-configuration","title":"HFM Utilities Configuration","text":""},{"location":"integration/hfm/configuration/#required-hfm-utilities","title":"Required HFM Utilities","text":"<p>The agent uses these HFM utilities:</p> Utility Purpose Location LoadMetadata.bat Load metadata files <code>[EPM_ORACLE_HOME]/products/FinancialManagement/bin</code> ExtractMetadata.bat Extract metadata <code>[EPM_ORACLE_HOME]/products/FinancialManagement/bin</code> LoadRules.bat Load calculation rules <code>[EPM_ORACLE_HOME]/products/FinancialManagement/bin</code>"},{"location":"integration/hfm/configuration/#path-configuration","title":"Path Configuration","text":"<p>Ensure utilities are accessible:</p> <pre><code># Add to system PATH\nexport PATH=$PATH:/opt/Oracle/Middleware/EPMSystem11R1/products/FinancialManagement/bin\n\n# Or specify in agent.properties\nhfm.utility.path=/opt/Oracle/Middleware/EPMSystem11R1/products/FinancialManagement/bin\n</code></pre>"},{"location":"integration/hfm/configuration/#testing-hfm-integration","title":"Testing HFM Integration","text":""},{"location":"integration/hfm/configuration/#step-1-test-utility-access","title":"Step 1: Test Utility Access","text":"<p>Verify the agent can access HFM utilities:</p> <pre><code># From agent directory\ncd /home/epmware_agent\n./test_hfm_utilities.sh\n</code></pre>"},{"location":"integration/hfm/configuration/#step-2-test-hfm-connection","title":"Step 2: Test HFM Connection","text":"<p>Test connection to HFM application:</p> <pre><code># Using EPMware test script\njava -jar epmware-agent.jar --test-hfm \\\n  --app HFMPROD \\\n  --user svc_epmware \\\n  --server hfmserver.domain.com\n</code></pre>"},{"location":"integration/hfm/configuration/#step-3-test-metadata-extract","title":"Step 3: Test Metadata Extract","text":"<p>Perform a test metadata extraction:</p> <pre><code># Extract sample metadata\nExtractMetadata.bat -a:HFMPROD -u:svc_epmware -p:password \\\n  -e:Entity -f:entity_test.xml\n</code></pre> <p>Expected output: </p><pre><code>Connecting to HFM application...\nExtracting Entity dimension...\nExtract completed successfully\nFile created: entity_test.xml\n</code></pre><p></p>"},{"location":"integration/hfm/configuration/#step-4-verify-in-epmware","title":"Step 4: Verify in EPMware","text":"<ol> <li>Navigate to Infrastructure \u2192 Servers in EPMware</li> <li>Right-click on HFM server</li> <li>Select Test Connection</li> </ol> <p> Testing HFM connection from EPMware</p>"},{"location":"integration/hfm/configuration/#hfm-deployment-configuration","title":"HFM Deployment Configuration","text":""},{"location":"integration/hfm/configuration/#deployment-options","title":"Deployment Options","text":"<p>Configure HFM deployment preferences in EPMware:</p> Option Description Recommended Replace Mode Replace entire dimension Use with caution Merge Mode Merge changes only \u2713 Recommended Validate Only Test without deployment For testing Zero Base Load Clear before loading Special cases only"},{"location":"integration/hfm/configuration/#metadata-file-formats","title":"Metadata File Formats","text":"<p>HFM supports these metadata formats:</p> Format Extension Use Case XML <code>.xml</code> Standard metadata loads APP <code>.app</code> Application definitions RLE <code>.rle</code> Calculation rules SEC <code>.sec</code> Security classes"},{"location":"integration/hfm/configuration/#troubleshooting-hfm-integration","title":"Troubleshooting HFM Integration","text":""},{"location":"integration/hfm/configuration/#common-issues","title":"Common Issues","text":"Issue Cause Solution Registry file not found File not copied to EPM instance Copy reg.properties to correct location Connection timeout Network or firewall issues Check port 19000 (default HFM port) Permission denied Insufficient HFM privileges Review user provisioning Utility not found Path not configured Add HFM bin to system PATH"},{"location":"integration/hfm/configuration/#hfm-specific-log-files","title":"HFM-Specific Log Files","text":"<p>Check these logs for HFM issues:</p> <pre><code># Agent logs\ntail -f /home/epmware_agent/logs/agent.log | grep HFM\n\n# HFM logs\ntail -f $EPM_ORACLE_INSTANCE/diagnostics/logs/FinancialManagement/HFM.log\n\n# Windows Event Log (Windows only)\neventvwr.msc \u2192 Applications and Services \u2192 HFM\n</code></pre>"},{"location":"integration/hfm/configuration/#debug-mode","title":"Debug Mode","text":"<p>Enable HFM debug logging:</p> <pre><code># In agent.properties\nhfm.log.verbose=true\nhfm.debug.enabled=true\nhfm.trace.operations=true\n</code></pre>"},{"location":"integration/hfm/configuration/#performance-optimization","title":"Performance Optimization","text":""},{"location":"integration/hfm/configuration/#batch-processing","title":"Batch Processing","text":"<p>Optimize large deployments:</p> <pre><code># Batch configuration\nhfm.batch.enabled=true\nhfm.batch.size=5000\nhfm.batch.parallel=false\nhfm.batch.commit.interval=1000\n</code></pre>"},{"location":"integration/hfm/configuration/#memory-configuration","title":"Memory Configuration","text":"<p>For large HFM applications:</p> <pre><code># JVM memory for HFM operations\nhfm.jvm.xms=2048m\nhfm.jvm.xmx=4096m\nhfm.jvm.maxpermsize=512m\n</code></pre>"},{"location":"integration/hfm/configuration/#connection-pooling","title":"Connection Pooling","text":"<p>Configure connection pooling:</p> <pre><code># Connection pool settings\nhfm.pool.enabled=true\nhfm.pool.min=1\nhfm.pool.max=5\nhfm.pool.timeout=30000\n</code></pre>"},{"location":"integration/hfm/configuration/#security-considerations","title":"Security Considerations","text":""},{"location":"integration/hfm/configuration/#encrypted-passwords","title":"Encrypted Passwords","text":"<p>Never store plain text passwords:</p> <ol> <li> <p>Generate encrypted password: </p><pre><code>java -jar epmware-agent.jar --encrypt-password\n</code></pre><p></p> </li> <li> <p>Store in configuration: </p><pre><code>hfm.password={encrypted}AES256:1a2b3c4d...\n</code></pre><p></p> </li> </ol>"},{"location":"integration/hfm/configuration/#secure-file-transfer","title":"Secure File Transfer","text":"<p>For metadata files: - Use secure protocols (SFTP/SCP) - Implement file encryption - Clean up temporary files</p>"},{"location":"integration/hfm/configuration/#audit-configuration","title":"Audit Configuration","text":"<p>Enable comprehensive auditing:</p> <pre><code># Audit settings\nhfm.audit.enabled=true\nhfm.audit.detailed=true\nhfm.audit.include.data=false\nhfm.audit.retention.days=90\n</code></pre>"},{"location":"integration/hfm/configuration/#best-practices","title":"Best Practices","text":""},{"location":"integration/hfm/configuration/#regular-maintenance","title":"Regular Maintenance","text":"<ol> <li>Weekly Tasks:</li> <li>Review deployment logs</li> <li>Check error rates</li> <li> <p>Monitor performance metrics</p> </li> <li> <p>Monthly Tasks:</p> </li> <li>Clean up temporary files</li> <li>Archive old logs</li> <li> <p>Review user permissions</p> </li> <li> <p>Quarterly Tasks:</p> </li> <li>Update HFM utilities if needed</li> <li>Review security settings</li> <li>Performance tuning</li> </ol>"},{"location":"integration/hfm/configuration/#backup-strategy","title":"Backup Strategy","text":"<p>Implement automated backups:</p> <pre><code>#!/bin/bash\n# Backup before deployment\nBACKUP_DIR=\"/backups/hfm/$(date +%Y%m%d)\"\nmkdir -p $BACKUP_DIR\nExtractMetadata.bat -a:$HFM_APP -all -f:$BACKUP_DIR/backup.xml\n</code></pre>"},{"location":"integration/hfm/configuration/#monitoring-setup","title":"Monitoring Setup","text":"<p>Configure monitoring alerts:</p> Metric Threshold Action Deployment failure rate &gt;5% Alert administrators Connection timeout &gt;3 in 1 hour Check network/server Deployment duration &gt;2x average Review performance Log file size &gt;1GB Archive and rotate"},{"location":"integration/hfm/configuration/#next-steps","title":"Next Steps","text":"<p>After configuring HFM integration:</p> <ol> <li>Configure Planning Integration if using Planning</li> <li>Set up Cloud EPM for cloud applications</li> <li>Configure Monitoring</li> <li>Review Troubleshooting Guide</li> </ol>"},{"location":"integration/hfm/registry/","title":"Registry Properties","text":""},{"location":"integration/hfm/registry/#hfm-registry-properties-configuration","title":"HFM Registry Properties Configuration","text":"<p>This guide covers the critical configuration of the registry properties file (<code>reg.properties</code>) required for HFM integration with EPMware Agent.</p>"},{"location":"integration/hfm/registry/#overview","title":"Overview","text":"<p>The <code>reg.properties</code> file contains HFM instance configuration that enables: - Communication between HFM utilities and the HFM application - Registry information for HFM clusters - Connection details for HFM services - Security and authentication settings</p> <p>Critical Requirement</p> <p>HFM operations WILL FAIL without proper registry properties configuration. This is the most common cause of HFM integration failures.</p>"},{"location":"integration/hfm/registry/#registry-file-location","title":"Registry File Location","text":""},{"location":"integration/hfm/registry/#source-location","title":"Source Location","text":"<p>The registry file is created during HFM configuration:</p> <pre><code>[MIDDLEWARE]/user_projects/config/foundation/11.1.2.0/reg.properties\n</code></pre> <p>Examples: - Windows: <code>D:\\Oracle\\Middleware\\user_projects\\config\\foundation\\11.1.2.0\\reg.properties</code> - Linux: <code>/opt/Oracle/Middleware/user_projects/config/foundation/11.1.2.0/reg.properties</code></p>"},{"location":"integration/hfm/registry/#required-destination","title":"Required Destination","text":"<p>The file MUST be copied to the EPM instance directory:</p> <pre><code>[MIDDLEWARE]/user_projects/[EPM_INSTANCE]/config/foundation/11.1.2.0/reg.properties\n</code></pre> <p>Examples: - Windows: <code>D:\\Oracle\\Middleware\\user_projects\\epmsystem1\\config\\foundation\\11.1.2.0\\reg.properties</code> - Linux: <code>/opt/Oracle/Middleware/user_projects/epmsystem1/config/foundation/11.1.2.0/reg.properties</code></p>"},{"location":"integration/hfm/registry/#copy-registry-properties","title":"Copy Registry Properties","text":""},{"location":"integration/hfm/registry/#windows-copy-process","title":"Windows Copy Process","text":"<pre><code>REM Check if source exists\ndir \"D:\\Oracle\\Middleware\\user_projects\\config\\foundation\\11.1.2.0\\reg.properties\"\n\nREM Create destination directory if needed\nmkdir \"D:\\Oracle\\Middleware\\user_projects\\epmsystem1\\config\\foundation\\11.1.2.0\"\n\nREM Copy the file\ncopy \"D:\\Oracle\\Middleware\\user_projects\\config\\foundation\\11.1.2.0\\reg.properties\" ^\n     \"D:\\Oracle\\Middleware\\user_projects\\epmsystem1\\config\\foundation\\11.1.2.0\\\"\n\nREM Verify copy\ndir \"D:\\Oracle\\Middleware\\user_projects\\epmsystem1\\config\\foundation\\11.1.2.0\\reg.properties\"\n</code></pre>"},{"location":"integration/hfm/registry/#linux-copy-process","title":"Linux Copy Process","text":"<pre><code># Check if source exists\nls -la /opt/Oracle/Middleware/user_projects/config/foundation/11.1.2.0/reg.properties\n\n# Create destination directory if needed\nsudo mkdir -p /opt/Oracle/Middleware/user_projects/epmsystem1/config/foundation/11.1.2.0\n\n# Copy the file\nsudo cp /opt/Oracle/Middleware/user_projects/config/foundation/11.1.2.0/reg.properties \\\n        /opt/Oracle/Middleware/user_projects/epmsystem1/config/foundation/11.1.2.0/\n\n# Set permissions\nsudo chmod 644 /opt/Oracle/Middleware/user_projects/epmsystem1/config/foundation/11.1.2.0/reg.properties\nsudo chown oracle:dba /opt/Oracle/Middleware/user_projects/epmsystem1/config/foundation/11.1.2.0/reg.properties\n\n# Verify copy\nls -la /opt/Oracle/Middleware/user_projects/epmsystem1/config/foundation/11.1.2.0/reg.properties\n</code></pre>"},{"location":"integration/hfm/registry/#automated-copy-script","title":"Automated Copy Script","text":"<pre><code>#!/bin/bash\n# copy_registry.sh - Automate registry file copy\n\n# Configuration\nORACLE_MW=\"/opt/Oracle/Middleware\"\nEPM_INSTANCE=\"epmsystem1\"\nFOUNDATION_VER=\"11.1.2.0\"\n\n# Paths\nSOURCE_DIR=\"$ORACLE_MW/user_projects/config/foundation/$FOUNDATION_VER\"\nDEST_DIR=\"$ORACLE_MW/user_projects/$EPM_INSTANCE/config/foundation/$FOUNDATION_VER\"\nREG_FILE=\"reg.properties\"\n\necho \"=== HFM Registry Properties Copy Script ===\"\n\n# Check source\nif [ ! -f \"$SOURCE_DIR/$REG_FILE\" ]; then\n    echo \"ERROR: Source file not found: $SOURCE_DIR/$REG_FILE\"\n    exit 1\nfi\n\necho \"Source file found: $SOURCE_DIR/$REG_FILE\"\n\n# Create destination directory\nif [ ! -d \"$DEST_DIR\" ]; then\n    echo \"Creating destination directory: $DEST_DIR\"\n    sudo mkdir -p \"$DEST_DIR\"\nfi\n\n# Copy file\necho \"Copying registry properties...\"\nsudo cp \"$SOURCE_DIR/$REG_FILE\" \"$DEST_DIR/\"\n\n# Set permissions\necho \"Setting permissions...\"\nsudo chmod 644 \"$DEST_DIR/$REG_FILE\"\nsudo chown oracle:dba \"$DEST_DIR/$REG_FILE\"\n\n# Verify\nif [ -f \"$DEST_DIR/$REG_FILE\" ]; then\n    echo \"\u2713 Registry properties copied successfully\"\n    echo \"Location: $DEST_DIR/$REG_FILE\"\n    ls -la \"$DEST_DIR/$REG_FILE\"\nelse\n    echo \"\u2717 Copy failed!\"\n    exit 1\nfi\n\necho \"=== Registry Properties Copy Complete ===\"\n</code></pre>"},{"location":"integration/hfm/registry/#registry-file-contents","title":"Registry File Contents","text":""},{"location":"integration/hfm/registry/#sample-registry-properties","title":"Sample Registry Properties","text":"<pre><code># reg.properties - HFM Registry Configuration\n# DO NOT EDIT MANUALLY - Generated by EPM Configurator\n\n# Foundation Services\nfoundation.services.url=http://foundation-server:28080/workspace\n\n# HFM Cluster Configuration\nhfm.cluster.name=Cluster1\nhfm.cluster.servers=hfm-server1:19000,hfm-server2:19000\n\n# HFM Application Registry\nhfm.application.HFMPROD.cluster=Cluster1\nhfm.application.HFMPROD.server=hfm-server1\nhfm.application.HFMPROD.database=HFMPROD_DB\n\n# Security Configuration\nhfm.security.provider=Native\nhfm.security.authentication=LDAP\n\n# Database Connections\nhfm.database.type=ORACLE\nhfm.database.server=db-server:1521\nhfm.database.service=HFMDB\n\n# Communication Settings\nhfm.rmi.port=19000\nhfm.http.port=80\nhfm.https.port=443\n</code></pre>"},{"location":"integration/hfm/registry/#key-registry-parameters","title":"Key Registry Parameters","text":"Parameter Description Example <code>foundation.services.url</code> Workspace URL <code>http://server:28080/workspace</code> <code>hfm.cluster.name</code> HFM cluster identifier <code>Cluster1</code> <code>hfm.cluster.servers</code> Cluster member servers <code>server1:19000,server2:19000</code> <code>hfm.application.[NAME]</code> Application-specific settings Application registry entries <code>hfm.database.type</code> Database platform <code>ORACLE</code> or <code>SQLSERVER</code> <code>hfm.rmi.port</code> RMI registry port <code>19000</code>"},{"location":"integration/hfm/registry/#verification-steps","title":"Verification Steps","text":""},{"location":"integration/hfm/registry/#step-1-verify-file-exists","title":"Step 1: Verify File Exists","text":"<pre><code>#!/bin/bash\n# verify_registry.sh\n\nREG_FILE=\"/opt/Oracle/Middleware/user_projects/epmsystem1/config/foundation/11.1.2.0/reg.properties\"\n\nif [ -f \"$REG_FILE\" ]; then\n    echo \"\u2713 Registry file exists\"\n\n    # Check size\n    SIZE=$(stat -c%s \"$REG_FILE\")\n    if [ $SIZE -gt 0 ]; then\n        echo \"\u2713 File size: $SIZE bytes\"\n    else\n        echo \"\u2717 File is empty!\"\n    fi\n\n    # Check permissions\n    PERMS=$(stat -c%a \"$REG_FILE\")\n    echo \"Permissions: $PERMS\"\n\n    # Check content\n    if grep -q \"hfm.cluster\" \"$REG_FILE\"; then\n        echo \"\u2713 HFM configuration found\"\n    else\n        echo \"\u2717 HFM configuration missing\"\n    fi\nelse\n    echo \"\u2717 Registry file not found!\"\n    echo \"Expected location: $REG_FILE\"\nfi\n</code></pre>"},{"location":"integration/hfm/registry/#step-2-test-hfm-connection","title":"Step 2: Test HFM Connection","text":"<pre><code># Test with LoadMetadata utility\nLoadMetadata.exe -test\n\n# If successful, you'll see:\n# \"Registry properties loaded successfully\"\n# \"HFM connection test passed\"\n\n# If failed, you might see:\n# \"Cannot load registry properties\"\n# \"File not found: reg.properties\"\n</code></pre>"},{"location":"integration/hfm/registry/#step-3-validate-registry-content","title":"Step 3: Validate Registry Content","text":"<pre><code>#!/bin/bash\n# validate_registry.sh\n\nREG_FILE=\"/path/to/reg.properties\"\n\necho \"=== Registry Properties Validation ===\"\n\n# Required entries\nREQUIRED=(\n    \"foundation.services.url\"\n    \"hfm.cluster.name\"\n    \"hfm.database.type\"\n)\n\nfor entry in \"${REQUIRED[@]}\"; do\n    if grep -q \"^$entry=\" \"$REG_FILE\"; then\n        VALUE=$(grep \"^$entry=\" \"$REG_FILE\" | cut -d'=' -f2)\n        echo \"\u2713 $entry = $VALUE\"\n    else\n        echo \"\u2717 Missing: $entry\"\n    fi\ndone\n</code></pre>"},{"location":"integration/hfm/registry/#multiple-environment-configuration","title":"Multiple Environment Configuration","text":""},{"location":"integration/hfm/registry/#managing-multiple-hfm-environments","title":"Managing Multiple HFM Environments","text":"<p>When working with multiple HFM environments (Dev, Test, Prod):</p> <pre><code>#!/bin/bash\n# multi_env_registry.sh\n\n# Environment-specific directories\nENVIRONMENTS=(\n    \"dev:/opt/Oracle/MW_DEV/user_projects/epmsystem1\"\n    \"test:/opt/Oracle/MW_TEST/user_projects/epmsystem1\"\n    \"prod:/opt/Oracle/MW_PROD/user_projects/epmsystem1\"\n)\n\nfor env in \"${ENVIRONMENTS[@]}\"; do\n    ENV_NAME=$(echo $env | cut -d: -f1)\n    ENV_PATH=$(echo $env | cut -d: -f2)\n\n    echo \"Processing $ENV_NAME environment...\"\n\n    SOURCE=\"/opt/Oracle/MW_$ENV_NAME/user_projects/config/foundation/11.1.2.0/reg.properties\"\n    DEST=\"$ENV_PATH/config/foundation/11.1.2.0/reg.properties\"\n\n    if [ -f \"$SOURCE\" ]; then\n        cp \"$SOURCE\" \"$DEST\"\n        echo \"\u2713 Copied registry for $ENV_NAME\"\n    else\n        echo \"\u2717 Source not found for $ENV_NAME\"\n    fi\ndone\n</code></pre>"},{"location":"integration/hfm/registry/#environment-specific-agent-configuration","title":"Environment-Specific Agent Configuration","text":"<pre><code># agent.properties for different environments\n\n# Development\nhfm.dev.registry=/opt/Oracle/MW_DEV/user_projects/epmsystem1/config/foundation/11.1.2.0\nhfm.dev.cluster=DevCluster\n\n# Test\nhfm.test.registry=/opt/Oracle/MW_TEST/user_projects/epmsystem1/config/foundation/11.1.2.0\nhfm.test.cluster=TestCluster\n\n# Production\nhfm.prod.registry=/opt/Oracle/MW_PROD/user_projects/epmsystem1/config/foundation/11.1.2.0\nhfm.prod.cluster=ProdCluster\n</code></pre>"},{"location":"integration/hfm/registry/#troubleshooting-registry-issues","title":"Troubleshooting Registry Issues","text":""},{"location":"integration/hfm/registry/#common-registry-problems","title":"Common Registry Problems","text":"Problem Symptom Solution File not found \"Cannot load registry properties\" Copy reg.properties to correct location Wrong location HFM utilities fail to connect Verify EPM_INSTANCE path Corrupted file \"Invalid registry format\" Re-copy from source Permissions \"Access denied\" Fix file permissions Version mismatch \"Incompatible registry version\" Use registry from same HFM version"},{"location":"integration/hfm/registry/#debug-registry-loading","title":"Debug Registry Loading","text":"<pre><code># Enable debug logging for registry\nexport HFM_REGISTRY_DEBUG=true\nexport HFM_LOG_LEVEL=TRACE\n\n# Run HFM utility with debug\nLoadMetadata.exe -test -debug &gt; registry_debug.log 2&gt;&amp;1\n\n# Check debug output\ngrep -i \"registry\" registry_debug.log\n</code></pre>"},{"location":"integration/hfm/registry/#registry-not-found-error","title":"Registry Not Found Error","text":"<p>Error Message: </p><pre><code>ERROR: Cannot find registry properties file\nERROR: File not found: /path/to/reg.properties\nHFM initialization failed\n</code></pre><p></p> <p>Solution Steps:</p> <ol> <li> <p>Verify source exists: </p><pre><code>find /opt/Oracle -name \"reg.properties\" 2&gt;/dev/null\n</code></pre><p></p> </li> <li> <p>Copy to all possible locations: </p><pre><code># Sometimes HFM looks in multiple places\ncp reg.properties $EPM_ORACLE_INSTANCE/config/foundation/11.1.2.0/\ncp reg.properties $EPM_ORACLE_HOME/user_projects/$EPM_INSTANCE/config/foundation/11.1.2.0/\ncp reg.properties $HYPERION_HOME/common/config/11.1.2.0/\n</code></pre><p></p> </li> <li> <p>Set environment variable: </p><pre><code>export HFM_REGISTRY_PATH=/path/to/reg.properties\n</code></pre><p></p> </li> </ol>"},{"location":"integration/hfm/registry/#registry-maintenance","title":"Registry Maintenance","text":""},{"location":"integration/hfm/registry/#backup-registry-file","title":"Backup Registry File","text":"<pre><code>#!/bin/bash\n# backup_registry.sh\n\nBACKUP_DIR=\"/backup/hfm/registry\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Find all registry files\nfind /opt/Oracle -name \"reg.properties\" 2&gt;/dev/null | while read reg; do\n    echo \"Backing up: $reg\"\n    cp \"$reg\" \"$BACKUP_DIR/reg.properties.$DATE\"\ndone\n\n# Compress backups\ntar -czf \"$BACKUP_DIR/registry_backup_$DATE.tar.gz\" \"$BACKUP_DIR\"/*.properties.*\n</code></pre>"},{"location":"integration/hfm/registry/#monitor-registry-changes","title":"Monitor Registry Changes","text":"<pre><code>#!/bin/bash\n# monitor_registry.sh\n\nREG_FILE=\"/path/to/reg.properties\"\nCHECKSUM_FILE=\"/var/lib/hfm/registry.md5\"\n\n# Calculate current checksum\nCURRENT_SUM=$(md5sum \"$REG_FILE\" | cut -d' ' -f1)\n\n# Compare with stored checksum\nif [ -f \"$CHECKSUM_FILE\" ]; then\n    STORED_SUM=$(cat \"$CHECKSUM_FILE\")\n\n    if [ \"$CURRENT_SUM\" != \"$STORED_SUM\" ]; then\n        echo \"WARNING: Registry file has changed!\"\n        echo \"Previous: $STORED_SUM\"\n        echo \"Current: $CURRENT_SUM\"\n\n        # Alert administrators\n        mail -s \"HFM Registry Changed\" admin@company.com\n    fi\nfi\n\n# Store current checksum\necho \"$CURRENT_SUM\" &gt; \"$CHECKSUM_FILE\"\n</code></pre>"},{"location":"integration/hfm/registry/#best-practices","title":"Best Practices","text":""},{"location":"integration/hfm/registry/#registry-management-guidelines","title":"Registry Management Guidelines","text":"<ol> <li>Always backup before changes - Keep copy of working registry</li> <li>Document locations - Track where files are copied</li> <li>Version control - Store registry in version control</li> <li>Automate copying - Use scripts for consistency</li> <li>Verify after updates - Test HFM connection after changes</li> </ol>"},{"location":"integration/hfm/registry/#security-considerations","title":"Security Considerations","text":"<ol> <li>Restrict access - Limit who can modify registry</li> <li>Audit changes - Log all registry modifications</li> <li>Encrypt sensitive data - If registry contains passwords</li> <li>Regular reviews - Check for unauthorized changes</li> </ol>"},{"location":"integration/hfm/registry/#integration-checklist","title":"Integration Checklist","text":"<p>Registry configuration checklist:</p> <ul> <li>[ ] Source reg.properties located</li> <li>[ ] Destination directory created</li> <li>[ ] File copied to EPM instance folder</li> <li>[ ] Permissions set correctly</li> <li>[ ] File not empty or corrupted</li> <li>[ ] HFM utilities can load registry</li> <li>[ ] Connection test successful</li> <li>[ ] Backup created</li> <li>[ ] Documentation updated</li> <li>[ ] Monitoring configured</li> </ul> <p>Critical Path</p> <p>The registry properties file is on the critical path for HFM operations. No HFM utilities will work without it properly configured.</p> <p>Multiple Instances</p> <p>If you have multiple EPM instances (epmsystem1, epmsystem2), you may need to copy the registry file to each instance directory.</p>"},{"location":"integration/hfm/registry/#next-steps","title":"Next Steps","text":"<ul> <li>HFM Configuration - Complete HFM setup</li> <li>HFM Integration Overview - HFM integration guide</li> <li>Planning Integration - Planning setup</li> <li>Troubleshooting - Resolve issues</li> </ul>"},{"location":"integration/planning/","title":"Hyperion Planning Integration","text":""},{"location":"integration/planning/#hyperion-planning-integration","title":"Hyperion Planning Integration","text":"<p>This section covers the configuration and integration of the EPMware Agent with Oracle Hyperion Planning applications.</p>"},{"location":"integration/planning/#overview","title":"Overview","text":"<p>Hyperion Planning integration enables EPMware to: - Import metadata from Planning applications - Deploy dimension changes - Manage hierarchies - Update member properties - Synchronize with Essbase outlines</p>"},{"location":"integration/planning/#integration-components","title":"Integration Components","text":"<ul> <li> <p> Password Encryption   Generate and manage encrypted password files</p> </li> <li> <p> Application Properties   Configure Planning-specific settings</p> </li> </ul>"},{"location":"integration/planning/#planning-architecture","title":"Planning Architecture","text":"<pre><code>graph LR\n    A[EPMware Agent] --&gt; B[Planning Utilities]\n    B --&gt; C[OutlineLoad]\n    B --&gt; D[FormBatch]\n    B --&gt; E[CalcMgrCmdLineLauncher]\n    C --&gt; F[Planning Application]\n    F --&gt; G[Essbase Cube]\n</code></pre>"},{"location":"integration/planning/#prerequisites","title":"Prerequisites","text":""},{"location":"integration/planning/#software-requirements","title":"Software Requirements","text":"Component Version Location Planning 11.1.2.4+ Application server Java 1.8+ System PATH Planning Utilities Matching Planning version <code>$EPM_ORACLE_HOME/products/Planning/bin</code>"},{"location":"integration/planning/#user-requirements","title":"User Requirements","text":"<p>The Planning user account needs: - Planning Administrator role - Dimension Editor privileges - Business Rule Administrator (if managing rules) - Essbase Application Manager access</p>"},{"location":"integration/planning/#quick-setup-guide","title":"Quick Setup Guide","text":""},{"location":"integration/planning/#step-1-verify-planning-installation","title":"Step 1: Verify Planning Installation","text":"<pre><code># Check Planning utilities\nls $EPM_ORACLE_HOME/products/Planning/bin/\n\n# Key utilities needed:\n# - OutlineLoad.sh/cmd\n# - PasswordEncryption.sh/cmd\n# - FormBatch.sh/cmd\n</code></pre>"},{"location":"integration/planning/#step-2-generate-encrypted-password","title":"Step 2: Generate Encrypted Password","text":"<pre><code>cd $EPM_ORACLE_HOME/products/Planning/bin\n./PasswordEncryption.sh /path/to/password_file.txt\n\n# Enter password when prompted\n# File will be created with encrypted password\n</code></pre>"},{"location":"integration/planning/#step-3-configure-epmware","title":"Step 3: Configure EPMware","text":"<ol> <li>Navigate to Configuration \u2192 Applications</li> <li>Select Planning application</li> <li>Add password file path:    <pre><code>PASSWORD_FILE=/path/to/password_file.txt\n</code></pre></li> </ol>"},{"location":"integration/planning/#step-4-test-connection","title":"Step 4: Test Connection","text":"<pre><code># Test with OutlineLoad\n./OutlineLoad.sh -f:password_file.txt /A:AppName /U:admin /I:test.csv /D:Entity /L\n</code></pre>"},{"location":"integration/planning/#configuration-in-epmware","title":"Configuration in EPMware","text":""},{"location":"integration/planning/#application-settings","title":"Application Settings","text":"<p>Configure these settings in EPMware for Planning:</p> Parameter Description Example Application Name Planning application name PLANAPP Server Planning server hostname planning.company.com Port RMI Registry port 11333 User Planning admin user admin Password File Encrypted password file path /opt/oracle/pwd.txt Essbase Server Associated Essbase server essbase.company.com Essbase Application Essbase app name PLANAPP"},{"location":"integration/planning/#agent-configuration","title":"Agent Configuration","text":"<p>Add to <code>agent.properties</code>:</p> <pre><code># Planning configuration\nplanning.enabled=true\nplanning.server=planning.company.com\nplanning.port=11333\nplanning.timeout=3600\n\n# Utility paths\nplanning.outlineload.path=/opt/Oracle/products/Planning/bin/OutlineLoad.sh\nplanning.formbatch.path=/opt/Oracle/products/Planning/bin/FormBatch.sh\n\n# Deployment options\nplanning.deployment.backup=true\nplanning.deployment.validate=true\nplanning.deployment.refreshDatabase=true\n</code></pre>"},{"location":"integration/planning/#deployment-operations","title":"Deployment Operations","text":""},{"location":"integration/planning/#metadata-import","title":"Metadata Import","text":"<p>EPMware can import metadata from Planning:</p> <pre><code># Import dimension members\n./OutlineLoad.sh -f:password_file.txt /A:AppName /U:admin /E:Entity.csv /D:Entity\n\n# Import with parent-child format\n./OutlineLoad.sh -f:password_file.txt /A:AppName /U:admin /I:hierarchy.csv\n</code></pre>"},{"location":"integration/planning/#metadata-export","title":"Metadata Export","text":"<p>Deploy metadata changes to Planning:</p> <pre><code># Deploy dimension updates\n./OutlineLoad.sh -f:password_file.txt /A:AppName /U:admin /I:updates.csv /D:Account /L\n\n# Options:\n# /L - Load mode\n# /A:AppName - Application name\n# /D:Dimension - Target dimension\n# /R - Replace mode\n</code></pre>"},{"location":"integration/planning/#supported-operations","title":"Supported Operations","text":"Operation Command Description Load Members <code>/L</code> Add new members Replace Dimension <code>/R</code> Replace entire dimension Update Properties <code>/M</code> Modify member properties Delete Members <code>/D</code> Remove members Build Hierarchies <code>/H</code> Create parent-child relationships"},{"location":"integration/planning/#integration-with-essbase","title":"Integration with Essbase","text":"<p>Planning dimensions sync with Essbase:</p>"},{"location":"integration/planning/#refresh-database","title":"Refresh Database","text":"<pre><code># Refresh Essbase outline after Planning changes\n./OutlineLoad.sh -f:password_file.txt /A:AppName /U:admin /RD\n\n# Refresh specific cube\n./OutlineLoad.sh -f:password_file.txt /A:AppName /U:admin /RC:CubeName\n</code></pre>"},{"location":"integration/planning/#database-options","title":"Database Options","text":"<pre><code># Essbase refresh options\nplanning.essbase.refresh=true\nplanning.essbase.restructure=true\nplanning.essbase.clearData=false\nplanning.essbase.runCalc=true\n</code></pre>"},{"location":"integration/planning/#form-and-business-rule-management","title":"Form and Business Rule Management","text":""},{"location":"integration/planning/#form-management","title":"Form Management","text":"<pre><code># Export forms\n./FormBatch.sh -f:password_file.txt /A:AppName /U:admin /E:forms.xml\n\n# Import forms\n./FormBatch.sh -f:password_file.txt /A:AppName /U:admin /I:forms.xml\n</code></pre>"},{"location":"integration/planning/#business-rule-deployment","title":"Business Rule Deployment","text":"<pre><code># Deploy business rules\n./CalcMgrCmdLineLauncher.sh -f:password_file.txt /A:AppName /U:admin /D:deploy\n</code></pre>"},{"location":"integration/planning/#security-configuration","title":"Security Configuration","text":""},{"location":"integration/planning/#user-provisioning","title":"User Provisioning","text":"<p>Required Planning roles: </p><pre><code>- Administrator\n- Power User (minimum for metadata operations)\n- Interactive User (read-only)\n</code></pre><p></p>"},{"location":"integration/planning/#password-file-security","title":"Password File Security","text":"<pre><code># Secure password file\nchmod 600 password_file.txt\nchown planning_user:planning_group password_file.txt\n\n# Store in secure location\nmkdir -p /opt/secure/planning\nmv password_file.txt /opt/secure/planning/\n</code></pre>"},{"location":"integration/planning/#performance-optimization","title":"Performance Optimization","text":""},{"location":"integration/planning/#batch-processing","title":"Batch Processing","text":"<pre><code># Batch configuration\nplanning.batch.enabled=true\nplanning.batch.size=1000\nplanning.batch.commitInterval=5000\n</code></pre>"},{"location":"integration/planning/#connection-pooling","title":"Connection Pooling","text":"<pre><code># Connection pool settings\nplanning.pool.enabled=true\nplanning.pool.minSize=1\nplanning.pool.maxSize=5\nplanning.pool.timeout=30000\n</code></pre>"},{"location":"integration/planning/#memory-settings","title":"Memory Settings","text":"<pre><code># Set heap size for OutlineLoad\nexport EPM_ORACLE_HOME=/opt/Oracle/Middleware/EPMSystem11R1\nexport JAVA_OPTIONS=\"-Xms2048m -Xmx4096m\"\n</code></pre>"},{"location":"integration/planning/#troubleshooting","title":"Troubleshooting","text":""},{"location":"integration/planning/#common-issues","title":"Common Issues","text":"Issue Cause Solution OutlineLoad fails Invalid password file Regenerate password file Connection timeout Network/firewall Check port 11333 Permission denied Insufficient privileges Grant Planning Administrator role Essbase not refreshing Sync disabled Enable database refresh"},{"location":"integration/planning/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging:</p> <pre><code># Set debug environment\nexport ODL_LOG_LEVEL=TRACE\nexport EPM_ORACLE_HOME_LOG_LEVEL=TRACE\n\n# Run with debug\n./OutlineLoad.sh -debug -f:password_file.txt /A:AppName /U:admin /L\n</code></pre>"},{"location":"integration/planning/#log-files","title":"Log Files","text":"<p>Check these logs for issues:</p> <pre><code># Planning logs\n$EPM_ORACLE_INSTANCE/diagnostics/logs/Planning/planning_0.log\n\n# OutlineLoad logs\n$EPM_ORACLE_INSTANCE/diagnostics/logs/Planning/outlineload.log\n\n# Agent logs\ntail -f /home/epmware/logs/agent.log | grep -i planning\n</code></pre>"},{"location":"integration/planning/#best-practices","title":"Best Practices","text":""},{"location":"integration/planning/#deployment-strategy","title":"Deployment Strategy","text":"<ol> <li>Test First - Always test in non-production</li> <li>Backup - Create backups before deployment</li> <li>Validate - Use validation mode first</li> <li>Incremental - Deploy changes incrementally</li> <li>Off-Hours - Schedule during maintenance windows</li> </ol>"},{"location":"integration/planning/#metadata-standards","title":"Metadata Standards","text":"<ol> <li>Naming Conventions - Consistent member naming</li> <li>Alias Management - Maintain unique aliases</li> <li>Property Standards - Standardize UDAs and attributes</li> <li>Hierarchy Rules - Define parent-child rules</li> <li>Documentation - Document all customizations</li> </ol>"},{"location":"integration/planning/#security-guidelines","title":"Security Guidelines","text":"<ol> <li>Rotate Passwords - Regular password changes</li> <li>Encrypt Files - Always use encrypted passwords</li> <li>Audit Access - Log all operations</li> <li>Restrict Permissions - Minimum required access</li> <li>Monitor Activity - Track deployment activities</li> </ol>"},{"location":"integration/planning/#monitoring","title":"Monitoring","text":""},{"location":"integration/planning/#health-checks","title":"Health Checks","text":"<pre><code>#!/bin/bash\n# check_planning.sh\n\n# Check Planning process\nps aux | grep -i planning\n\n# Test connection\ntimeout 10 $PLANNING_HOME/bin/OutlineLoad.sh -f:pwd.txt /A:App /U:admin /V\n\n# Check port\nnc -zv planning-server 11333\n</code></pre>"},{"location":"integration/planning/#deployment-metrics","title":"Deployment Metrics","text":"<p>Track these metrics: - Deployment duration - Success rate - Error frequency - Database refresh time - Member count changes</p>"},{"location":"integration/planning/#integration-checklist","title":"Integration Checklist","text":"<p>Before going to production:</p> <ul> <li>[ ] Planning utilities accessible</li> <li>[ ] Password file generated and secured</li> <li>[ ] User has required permissions</li> <li>[ ] Network connectivity verified</li> <li>[ ] Test deployment successful</li> <li>[ ] Essbase refresh configured</li> <li>[ ] Backup procedures in place</li> <li>[ ] Monitoring configured</li> <li>[ ] Documentation updated</li> <li>[ ] Rollback plan prepared</li> </ul>"},{"location":"integration/planning/#sample-configuration-files","title":"Sample Configuration Files","text":""},{"location":"integration/planning/#outlineload-configuration","title":"OutlineLoad Configuration","text":"<pre><code># outlineload.properties\nApplication=PLANAPP\nUser=admin\nPasswordFile=/opt/secure/pwd.txt\nDelimiter=,\nLoadMethod=/L\nRefreshDatabase=true\nLogLevel=INFO\n</code></pre>"},{"location":"integration/planning/#dimension-load-file-format","title":"Dimension Load File Format","text":"<pre><code>Parent,Member,Alias,DataStorage,TwoPassCalc,Description\nEntity,E1000,North America,StoreData,,North America Region\nE1000,E1100,United States,StoreData,,USA Operations\nE1000,E1200,Canada,StoreData,,Canadian Operations\n</code></pre>"},{"location":"integration/planning/#next-steps","title":"Next Steps","text":"<ul> <li>Password Encryption - Set up password files</li> <li>Application Properties - Configure Planning settings</li> <li>HFM Integration - Configure HFM if needed</li> <li>Cloud EPM - Cloud application setup</li> </ul> <p>Version Compatibility</p> <p>Always ensure your Planning utilities version matches your Planning application version to avoid compatibility issues.</p> <p>Production Deployments</p> <p>Never test new configurations directly in production. Always validate in a development or test environment first.</p>"},{"location":"integration/planning/password-encryption/","title":"Password Encryption","text":""},{"location":"integration/planning/password-encryption/#planning-password-encryption","title":"Planning Password Encryption","text":"<p>This guide covers the generation and management of encrypted password files required for Hyperion Planning integration with EPMware Agent.</p>"},{"location":"integration/planning/password-encryption/#overview","title":"Overview","text":"<p>Planning requires encrypted password files for: - Secure authentication without exposing passwords - Automated deployments without hardcoding credentials - Compliance with security policies - Integration with EPMware Agent</p>"},{"location":"integration/planning/password-encryption/#password-encryption-utility","title":"Password Encryption Utility","text":""},{"location":"integration/planning/password-encryption/#locating-the-utility","title":"Locating the Utility","text":"<p>The PasswordEncryption utility is located in the Planning installation:</p> <p>Windows: </p><pre><code>D:\\Oracle\\Middleware\\user_projects\\epmsystem1\\Planning\\planning1\\PasswordEncryption.cmd\n</code></pre><p></p> <p>Linux: </p><pre><code>/opt/Oracle/Middleware/user_projects/epmsystem1/Planning/planning1/PasswordEncryption.sh\n</code></pre><p></p>"},{"location":"integration/planning/password-encryption/#utility-syntax","title":"Utility Syntax","text":"<pre><code># Basic syntax\nPasswordEncryption.[cmd|sh] [passwordFile]\n\n# Parameters:\n# passwordFile - Path where encrypted file will be created\n</code></pre>"},{"location":"integration/planning/password-encryption/#generating-encrypted-password-files","title":"Generating Encrypted Password Files","text":""},{"location":"integration/planning/password-encryption/#windows-process","title":"Windows Process","text":"<pre><code>REM Navigate to Planning directory\ncd D:\\Oracle\\Middleware\\user_projects\\epmsystem1\\Planning\\planning1\n\nREM Run encryption utility\nPasswordEncryption.cmd D:\\secure\\planning_pwd.txt\n\nREM You will be prompted:\nEnter password to encrypt:\n\nREM Type password (not visible) and press Enter\nREM Output:\nPassword has been encrypted and written to the file D:\\secure\\planning_pwd.txt successfully!\n</code></pre>"},{"location":"integration/planning/password-encryption/#linux-process","title":"Linux Process","text":"<pre><code># Navigate to Planning directory\ncd /opt/Oracle/Middleware/user_projects/epmsystem1/Planning/planning1\n\n# Run encryption utility\n./PasswordEncryption.sh /opt/secure/planning_pwd.txt\n\n# You will be prompted:\n# Enter password to encrypt:\n\n# Type password (not visible) and press Enter\n# Output:\n# Password has been encrypted and written to the file /opt/secure/planning_pwd.txt successfully!\n</code></pre>"},{"location":"integration/planning/password-encryption/#automated-generation-script","title":"Automated Generation Script","text":"<pre><code>#!/bin/bash\n# generate_planning_password.sh\n\n# Configuration\nPLANNING_HOME=\"/opt/Oracle/Middleware/user_projects/epmsystem1/Planning/planning1\"\nPASSWORD_DIR=\"/opt/secure/planning\"\nPASSWORD_FILE=\"$PASSWORD_DIR/planning_pwd.txt\"\n\n# Create secure directory\nmkdir -p $PASSWORD_DIR\nchmod 700 $PASSWORD_DIR\n\n# Navigate to Planning directory\ncd $PLANNING_HOME\n\n# Generate password file\necho \"Generating encrypted password file...\"\necho \"Enter Planning admin password when prompted:\"\n\n./PasswordEncryption.sh $PASSWORD_FILE\n\n# Secure the file\nif [ -f \"$PASSWORD_FILE\" ]; then\n    chmod 600 $PASSWORD_FILE\n    chown oracle:dba $PASSWORD_FILE\n    echo \"\u2713 Password file created: $PASSWORD_FILE\"\n    ls -la $PASSWORD_FILE\nelse\n    echo \"\u2717 Password file generation failed!\"\n    exit 1\nfi\n</code></pre>"},{"location":"integration/planning/password-encryption/#password-file-management","title":"Password File Management","text":""},{"location":"integration/planning/password-encryption/#file-location-best-practices","title":"File Location Best Practices","text":"<pre><code># Recommended directory structure\n/opt/secure/\n\u251c\u2500\u2500 planning/\n\u2502   \u251c\u2500\u2500 prod_pwd.txt       # Production password\n\u2502   \u251c\u2500\u2500 uat_pwd.txt        # UAT password\n\u2502   \u2514\u2500\u2500 dev_pwd.txt        # Development password\n\u251c\u2500\u2500 backup/\n\u2502   \u2514\u2500\u2500 pwd_backup_[date].txt\n\u2514\u2500\u2500 archive/\n    \u2514\u2500\u2500 old_passwords/\n</code></pre>"},{"location":"integration/planning/password-encryption/#securing-password-files","title":"Securing Password Files","text":""},{"location":"integration/planning/password-encryption/#linux-security","title":"Linux Security","text":"<pre><code># Set restrictive permissions\nchmod 600 /opt/secure/planning/planning_pwd.txt\n\n# Set ownership\nchown oracle:dba /opt/secure/planning/planning_pwd.txt\n\n# Prevent modification\nchattr +i /opt/secure/planning/planning_pwd.txt  # Immutable flag\n\n# SELinux context (if applicable)\nchcon -t oracle_secure_t /opt/secure/planning/planning_pwd.txt\n</code></pre>"},{"location":"integration/planning/password-encryption/#windows-security","title":"Windows Security","text":"<pre><code># Remove inheritance\nicacls \"D:\\secure\\planning_pwd.txt\" /inheritance:r\n\n# Grant specific permissions\nicacls \"D:\\secure\\planning_pwd.txt\" /grant \"DOMAIN\\svc_planning:R\"\nicacls \"D:\\secure\\planning_pwd.txt\" /grant \"DOMAIN\\Administrators:F\"\n\n# Remove Everyone group\nicacls \"D:\\secure\\planning_pwd.txt\" /remove \"Everyone\"\n\n# Audit access\nauditpol /set /subcategory:\"File System\" /success:enable /failure:enable\n</code></pre>"},{"location":"integration/planning/password-encryption/#multiple-environment-configuration","title":"Multiple Environment Configuration","text":""},{"location":"integration/planning/password-encryption/#environment-specific-passwords","title":"Environment-Specific Passwords","text":"<pre><code>#!/bin/bash\n# multi_env_passwords.sh\n\nENVIRONMENTS=(\"dev\" \"test\" \"uat\" \"prod\")\nPLANNING_HOME=\"/opt/Oracle/Middleware/user_projects/epmsystem1/Planning/planning1\"\n\nfor ENV in \"${ENVIRONMENTS[@]}\"; do\n    echo \"=== Generating password for $ENV environment ===\"\n\n    PASSWORD_FILE=\"/opt/secure/planning/${ENV}_pwd.txt\"\n\n    cd $PLANNING_HOME\n    echo \"Enter password for $ENV:\"\n    ./PasswordEncryption.sh $PASSWORD_FILE\n\n    # Secure the file\n    chmod 600 $PASSWORD_FILE\n    echo \"Created: $PASSWORD_FILE\"\ndone\n</code></pre>"},{"location":"integration/planning/password-encryption/#agent-configuration-for-multiple-environments","title":"Agent Configuration for Multiple Environments","text":"<pre><code># agent.properties\n\n# Development\nplanning.dev.passwordFile=/opt/secure/planning/dev_pwd.txt\nplanning.dev.application=PLANDEV\n\n# Test\nplanning.test.passwordFile=/opt/secure/planning/test_pwd.txt\nplanning.test.application=PLANTEST\n\n# Production\nplanning.prod.passwordFile=/opt/secure/planning/prod_pwd.txt\nplanning.prod.application=PLANPROD\n</code></pre>"},{"location":"integration/planning/password-encryption/#using-password-files","title":"Using Password Files","text":""},{"location":"integration/planning/password-encryption/#with-outlineload-utility","title":"With OutlineLoad Utility","text":"<pre><code># Use password file with OutlineLoad\nOutlineLoad.sh -f:/opt/secure/planning/planning_pwd.txt \\\n    /A:PlanApp /U:admin /I:metadata.csv /D:Entity /L\n\n# Windows\nOutlineLoad.cmd -f:D:\\secure\\planning_pwd.txt ^\n    /A:PlanApp /U:admin /I:metadata.csv /D:Entity /L\n</code></pre>"},{"location":"integration/planning/password-encryption/#in-epmware-configuration","title":"In EPMware Configuration","text":"<ol> <li>Navigate to Configuration \u2192 Applications</li> <li>Select Planning application</li> <li>Edit properties:</li> <li>Parameter: <code>PASSWORD_FILE</code></li> <li>Value: <code>/opt/secure/planning/planning_pwd.txt</code></li> </ol> <p> Configuring password file path in EPMware</p>"},{"location":"integration/planning/password-encryption/#in-scripts","title":"In Scripts","text":"<pre><code>#!/bin/bash\n# deploy_planning.sh\n\n# Configuration\nPASSWORD_FILE=\"/opt/secure/planning/planning_pwd.txt\"\nUSER=\"admin\"\nAPP=\"PLANPROD\"\n\n# Verify password file exists\nif [ ! -f \"$PASSWORD_FILE\" ]; then\n    echo \"Error: Password file not found: $PASSWORD_FILE\"\n    exit 1\nfi\n\n# Use password file\nOutlineLoad.sh -f:$PASSWORD_FILE /A:$APP /U:$USER /I:data.csv /L\n</code></pre>"},{"location":"integration/planning/password-encryption/#password-rotation","title":"Password Rotation","text":""},{"location":"integration/planning/password-encryption/#rotation-process","title":"Rotation Process","text":"<pre><code>#!/bin/bash\n# rotate_planning_password.sh\n\n# Configuration\nPLANNING_HOME=\"/opt/Oracle/Middleware/user_projects/epmsystem1/Planning/planning1\"\nPASSWORD_DIR=\"/opt/secure/planning\"\nBACKUP_DIR=\"/opt/secure/backup\"\n\n# Backup current password\nDATE=$(date +%Y%m%d_%H%M%S)\ncp $PASSWORD_DIR/planning_pwd.txt $BACKUP_DIR/planning_pwd_$DATE.txt\n\n# Generate new password file\ncd $PLANNING_HOME\necho \"Enter new Planning password:\"\n./PasswordEncryption.sh $PASSWORD_DIR/planning_pwd_new.txt\n\n# Test new password\nif OutlineLoad.sh -f:$PASSWORD_DIR/planning_pwd_new.txt /A:PLANAPP /U:admin /V; then\n    echo \"\u2713 New password verified\"\n\n    # Replace old with new\n    mv $PASSWORD_DIR/planning_pwd.txt $PASSWORD_DIR/planning_pwd_old.txt\n    mv $PASSWORD_DIR/planning_pwd_new.txt $PASSWORD_DIR/planning_pwd.txt\n\n    echo \"\u2713 Password rotation complete\"\nelse\n    echo \"\u2717 New password validation failed\"\n    rm $PASSWORD_DIR/planning_pwd_new.txt\n    exit 1\nfi\n</code></pre>"},{"location":"integration/planning/password-encryption/#scheduled-rotation","title":"Scheduled Rotation","text":"<pre><code># Crontab entry for quarterly rotation\n0 2 1 */3 * /opt/scripts/rotate_planning_password.sh\n\n# Or use systemd timer\n[Unit]\nDescription=Rotate Planning Password\n\n[Timer]\nOnCalendar=quarterly\nPersistent=true\n\n[Install]\nWantedBy=timers.target\n</code></pre>"},{"location":"integration/planning/password-encryption/#troubleshooting-password-issues","title":"Troubleshooting Password Issues","text":""},{"location":"integration/planning/password-encryption/#common-problems","title":"Common Problems","text":"Issue Symptom Solution Wrong password \"Invalid credentials\" Regenerate password file File not found \"Cannot read password file\" Check path and permissions Corrupted file \"Invalid password file format\" Regenerate file Permission denied \"Access denied\" Fix file permissions Encoding issues Special characters fail Use ASCII characters only"},{"location":"integration/planning/password-encryption/#password-file-validation","title":"Password File Validation","text":"<pre><code>#!/bin/bash\n# validate_password.sh\n\nPASSWORD_FILE=\"/opt/secure/planning/planning_pwd.txt\"\n\necho \"=== Password File Validation ===\"\n\n# Check file exists\nif [ ! -f \"$PASSWORD_FILE\" ]; then\n    echo \"\u2717 File not found: $PASSWORD_FILE\"\n    exit 1\nfi\necho \"\u2713 File exists\"\n\n# Check file size\nSIZE=$(stat -c%s \"$PASSWORD_FILE\")\nif [ $SIZE -gt 0 ]; then\n    echo \"\u2713 File size: $SIZE bytes\"\nelse\n    echo \"\u2717 File is empty\"\n    exit 1\nfi\n\n# Check permissions\nPERMS=$(stat -c%a \"$PASSWORD_FILE\")\nif [ \"$PERMS\" = \"600\" ]; then\n    echo \"\u2713 Permissions: $PERMS (secure)\"\nelse\n    echo \"\u26a0 Permissions: $PERMS (should be 600)\"\nfi\n\n# Test password file\necho \"Testing password file...\"\nif OutlineLoad.sh -f:$PASSWORD_FILE /A:PLANAPP /U:admin /V 2&gt;/dev/null; then\n    echo \"\u2713 Password file is valid\"\nelse\n    echo \"\u2717 Password file test failed\"\nfi\n</code></pre>"},{"location":"integration/planning/password-encryption/#debug-password-issues","title":"Debug Password Issues","text":"<pre><code># Enable debug logging\nexport ODL_LOG_LEVEL=TRACE\n\n# Test with verbose output\nOutlineLoad.sh -f:password.txt /A:App /U:user /V -debug\n\n# Check Planning logs\ntail -f $EPM_ORACLE_INSTANCE/diagnostics/logs/Planning/planning_0.log\n</code></pre>"},{"location":"integration/planning/password-encryption/#security-best-practices","title":"Security Best Practices","text":""},{"location":"integration/planning/password-encryption/#password-file-security-checklist","title":"Password File Security Checklist","text":"<ul> <li>[ ] File permissions set to 600 (read/write owner only)</li> <li>[ ] Ownership set to service account</li> <li>[ ] Stored outside web root</li> <li>[ ] Directory access restricted</li> <li>[ ] Regular rotation schedule</li> <li>[ ] Backup before rotation</li> <li>[ ] Audit file access</li> <li>[ ] Encrypt backups</li> <li>[ ] No passwords in scripts</li> <li>[ ] No passwords in version control</li> </ul>"},{"location":"integration/planning/password-encryption/#additional-security-measures","title":"Additional Security Measures","text":"<pre><code># Encrypt password file at rest\nopenssl enc -aes-256-cbc -salt -in planning_pwd.txt -out planning_pwd.enc\n\n# Decrypt when needed\nopenssl enc -aes-256-cbc -d -in planning_pwd.enc -out planning_pwd.txt\n\n# Use with script\ndecrypt_and_use() {\n    TEMP_PWD=$(mktemp)\n    openssl enc -aes-256-cbc -d -in planning_pwd.enc -out $TEMP_PWD\n    OutlineLoad.sh -f:$TEMP_PWD /A:App /U:user /I:data.csv\n    shred -u $TEMP_PWD  # Secure deletion\n}\n</code></pre>"},{"location":"integration/planning/password-encryption/#integration-with-epmware-agent","title":"Integration with EPMware Agent","text":""},{"location":"integration/planning/password-encryption/#agent-configuration","title":"Agent Configuration","text":"<pre><code># agent.properties\nplanning.passwordFile=/opt/secure/planning/planning_pwd.txt\nplanning.passwordFile.encrypted=false\nplanning.user=admin\nplanning.application=PLANPROD\n</code></pre>"},{"location":"integration/planning/password-encryption/#agent-script-integration","title":"Agent Script Integration","text":"<pre><code>#!/bin/bash\n# agent_planning_deploy.sh\n\n# Called by EPMware Agent\nMETADATA_FILE=$1\nPASSWORD_FILE=$(grep planning.passwordFile agent.properties | cut -d= -f2)\nUSER=$(grep planning.user agent.properties | cut -d= -f2)\nAPP=$(grep planning.application agent.properties | cut -d= -f2)\n\n# Validate password file\nif [ ! -f \"$PASSWORD_FILE\" ]; then\n    echo \"ERROR: Password file not found\"\n    exit 1\nfi\n\n# Deploy using password file\nOutlineLoad.sh -f:$PASSWORD_FILE /A:$APP /U:$USER /I:$METADATA_FILE /L\n</code></pre>"},{"location":"integration/planning/password-encryption/#password-file-monitoring","title":"Password File Monitoring","text":""},{"location":"integration/planning/password-encryption/#monitor-file-changes","title":"Monitor File Changes","text":"<pre><code>#!/bin/bash\n# monitor_password_file.sh\n\nPASSWORD_FILE=\"/opt/secure/planning/planning_pwd.txt\"\nCHECKSUM_FILE=\"/var/lib/planning/pwd.md5\"\n\n# Calculate checksum\nCURRENT_SUM=$(md5sum \"$PASSWORD_FILE\" | cut -d' ' -f1)\n\n# Compare with stored\nif [ -f \"$CHECKSUM_FILE\" ]; then\n    STORED_SUM=$(cat \"$CHECKSUM_FILE\")\n\n    if [ \"$CURRENT_SUM\" != \"$STORED_SUM\" ]; then\n        echo \"WARNING: Password file changed!\"\n        # Alert administrators\n        mail -s \"Planning Password File Modified\" admin@company.com\n    fi\nfi\n\n# Update checksum\necho \"$CURRENT_SUM\" &gt; \"$CHECKSUM_FILE\"\n</code></pre>"},{"location":"integration/planning/password-encryption/#audit-access","title":"Audit Access","text":"<pre><code># Linux audit rule\nauditctl -w /opt/secure/planning/planning_pwd.txt -p rwa -k planning_password\n\n# Check audit log\nausearch -k planning_password\n</code></pre> <p>Never Share Password Files</p> <p>Password files contain sensitive credentials. Never copy them to unsecured locations, email them, or commit them to version control.</p> <p>Test After Generation</p> <p>Always test the password file immediately after generation to ensure it works before deploying to production.</p>"},{"location":"integration/planning/password-encryption/#next-steps","title":"Next Steps","text":"<ul> <li>Application Properties - Configure Planning settings</li> <li>Planning Integration Overview - Complete Planning setup</li> <li>HFM Integration - HFM configuration</li> <li>Troubleshooting - Password issues</li> </ul>"},{"location":"integration/planning/planning-properties/","title":"Planning Application Properties","text":""},{"location":"integration/planning/planning-properties/#planning-application-properties","title":"Planning Application Properties","text":"<p>This guide covers the configuration of Planning-specific properties in EPMware for successful integration with Hyperion Planning applications.</p>"},{"location":"integration/planning/planning-properties/#overview","title":"Overview","text":"<p>Application properties define how EPMware interacts with Planning applications, including: - Connection parameters - Authentication settings - Deployment options - Performance tuning - Error handling</p>"},{"location":"integration/planning/planning-properties/#epmware-application-configuration","title":"EPMware Application Configuration","text":""},{"location":"integration/planning/planning-properties/#accessing-application-properties","title":"Accessing Application Properties","text":"<ol> <li>Log into EPMware</li> <li>Navigate to Configuration \u2192 Applications</li> <li>Select your Planning application</li> <li>Click Edit Properties or right-click \u2192 Properties</li> </ol> <p> Planning application properties in EPMware</p>"},{"location":"integration/planning/planning-properties/#core-properties","title":"Core Properties","text":"Property Description Example Required APPLICATION_NAME Planning application name PLANPROD Yes SERVER Planning server hostname planning.company.com Yes PORT RMI Registry port 11333 Yes USER Planning admin username admin Yes PASSWORD_FILE Encrypted password file path /opt/secure/planning_pwd.txt Yes ESSBASE_SERVER Associated Essbase server essbase.company.com Yes ESSBASE_APP Essbase application name PLANPROD Yes"},{"location":"integration/planning/planning-properties/#connection-properties","title":"Connection Properties","text":""},{"location":"integration/planning/planning-properties/#server-configuration","title":"Server Configuration","text":"<pre><code># Server connection properties\nplanning.server=planning.company.com\nplanning.port=11333\nplanning.protocol=RMI\nplanning.timeout=3600000\nplanning.retry.count=3\nplanning.retry.delay=5000\n</code></pre>"},{"location":"integration/planning/planning-properties/#authentication-properties","title":"Authentication Properties","text":"<pre><code># Authentication settings\nplanning.user=admin\nplanning.passwordFile=/opt/secure/planning/planning_pwd.txt\nplanning.authentication.type=NATIVE\nplanning.session.timeout=1800000\n</code></pre>"},{"location":"integration/planning/planning-properties/#essbase-integration","title":"Essbase Integration","text":"<pre><code># Essbase connection\nplanning.essbase.server=essbase.company.com\nplanning.essbase.port=1423\nplanning.essbase.application=PLANPROD\nplanning.essbase.database=Plan1\nplanning.essbase.refresh=true\n</code></pre>"},{"location":"integration/planning/planning-properties/#deployment-properties","title":"Deployment Properties","text":""},{"location":"integration/planning/planning-properties/#metadata-loading-options","title":"Metadata Loading Options","text":"<pre><code># OutlineLoad options\nplanning.outlineload.path=/opt/Oracle/products/Planning/bin/OutlineLoad.sh\nplanning.outlineload.logLevel=INFO\nplanning.outlineload.delimiter=,\nplanning.outlineload.loadMethod=/L\nplanning.outlineload.refreshDatabase=true\n</code></pre>"},{"location":"integration/planning/planning-properties/#load-methods","title":"Load Methods","text":"Method Property Value Description Load <code>/L</code> Add new members (default) Replace <code>/R</code> Replace entire dimension Update <code>/M</code> Update member properties Delete <code>/D</code> Remove members"},{"location":"integration/planning/planning-properties/#validation-settings","title":"Validation Settings","text":"<pre><code># Validation properties\nplanning.validation.enabled=true\nplanning.validation.stopOnError=true\nplanning.validation.logErrors=true\nplanning.validation.maxErrors=100\n</code></pre>"},{"location":"integration/planning/planning-properties/#performance-properties","title":"Performance Properties","text":""},{"location":"integration/planning/planning-properties/#batch-processing","title":"Batch Processing","text":"<pre><code># Batch configuration\nplanning.batch.enabled=true\nplanning.batch.size=1000\nplanning.batch.commitInterval=5000\nplanning.batch.parallel=false\nplanning.batch.threads=4\n</code></pre>"},{"location":"integration/planning/planning-properties/#memory-configuration","title":"Memory Configuration","text":"<pre><code># JVM settings for OutlineLoad\nplanning.jvm.xms=1024m\nplanning.jvm.xmx=2048m\nplanning.jvm.maxPermSize=256m\nplanning.jvm.gc=G1GC\n</code></pre>"},{"location":"integration/planning/planning-properties/#connection-pooling","title":"Connection Pooling","text":"<pre><code># Connection pool\nplanning.pool.enabled=true\nplanning.pool.minSize=2\nplanning.pool.maxSize=10\nplanning.pool.timeout=30000\nplanning.pool.validate=true\n</code></pre>"},{"location":"integration/planning/planning-properties/#advanced-properties","title":"Advanced Properties","text":""},{"location":"integration/planning/planning-properties/#custom-properties","title":"Custom Properties","text":"<pre><code># Custom dimension properties\nplanning.dimension.Entity.dataStorage=StoreData\nplanning.dimension.Account.twoPassCalc=true\nplanning.dimension.Version.securityEnabled=false\n\n# UDA assignments\nplanning.uda.Entity=CostCenter,Region\nplanning.uda.Account=Revenue,Expense\n</code></pre>"},{"location":"integration/planning/planning-properties/#business-rule-properties","title":"Business Rule Properties","text":"<pre><code># Business rule execution\nplanning.businessrule.enabled=true\nplanning.businessrule.runtime.prompts=true\nplanning.businessrule.sequence=Calculate,Aggregate,Allocate\nplanning.businessrule.timeout=7200000\n</code></pre>"},{"location":"integration/planning/planning-properties/#form-management","title":"Form Management","text":"<pre><code># Form properties\nplanning.forms.export.enabled=true\nplanning.forms.import.validate=true\nplanning.forms.backup.before.import=true\n</code></pre>"},{"location":"integration/planning/planning-properties/#environment-specific-properties","title":"Environment-Specific Properties","text":""},{"location":"integration/planning/planning-properties/#development-environment","title":"Development Environment","text":"<pre><code># Development settings\nplanning.dev.server=dev-planning.company.com\nplanning.dev.application=PLANDEV\nplanning.dev.passwordFile=/opt/secure/planning/dev_pwd.txt\nplanning.dev.debug=true\nplanning.dev.validation.stopOnError=false\n</code></pre>"},{"location":"integration/planning/planning-properties/#production-environment","title":"Production Environment","text":"<pre><code># Production settings\nplanning.prod.server=prod-planning.company.com\nplanning.prod.application=PLANPROD\nplanning.prod.passwordFile=/opt/secure/planning/prod_pwd.txt\nplanning.prod.debug=false\nplanning.prod.validation.stopOnError=true\nplanning.prod.backup.required=true\n</code></pre>"},{"location":"integration/planning/planning-properties/#property-management","title":"Property Management","text":""},{"location":"integration/planning/planning-properties/#setting-properties-via-ui","title":"Setting Properties via UI","text":"<pre><code>1. Navigate to Configuration \u2192 Applications\n2. Select Planning application\n3. Right-click \u2192 Edit Properties\n4. Add/Modify property:\n   - Name: planning.batch.size\n   - Value: 1000\n5. Click Save\n</code></pre>"},{"location":"integration/planning/planning-properties/#setting-properties-via-script","title":"Setting Properties via Script","text":"<pre><code>#!/bin/bash\n# set_planning_properties.sh\n\n# EPMware API endpoint\nAPI_URL=\"https://epmware.company.com/api/v1\"\nTOKEN=\"your-api-token\"\n\n# Set property\ncurl -X POST \"$API_URL/applications/PLANPROD/properties\" \\\n     -H \"Authorization: Bearer $TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"name\": \"planning.batch.size\",\n       \"value\": \"1000\"\n     }'\n</code></pre>"},{"location":"integration/planning/planning-properties/#bulk-property-import","title":"Bulk Property Import","text":"<pre><code># planning_properties.csv\nProperty,Value,Description\nplanning.server,planning.company.com,Planning server\nplanning.port,11333,RMI port\nplanning.user,admin,Admin user\nplanning.passwordFile,/opt/secure/pwd.txt,Password file\nplanning.batch.size,1000,Batch size\n</code></pre> <pre><code># Import properties\ncurl -X POST \"$API_URL/applications/PLANPROD/properties/import\" \\\n     -H \"Authorization: Bearer $TOKEN\" \\\n     -F \"file=@planning_properties.csv\"\n</code></pre>"},{"location":"integration/planning/planning-properties/#property-validation","title":"Property Validation","text":""},{"location":"integration/planning/planning-properties/#validation-script","title":"Validation Script","text":"<pre><code>#!/bin/bash\n# validate_planning_properties.sh\n\necho \"=== Planning Properties Validation ===\"\n\n# Required properties\nREQUIRED_PROPS=(\n    \"APPLICATION_NAME\"\n    \"SERVER\"\n    \"USER\"\n    \"PASSWORD_FILE\"\n)\n\n# Check each property\nfor prop in \"${REQUIRED_PROPS[@]}\"; do\n    VALUE=$(grep \"^$prop=\" application.properties | cut -d= -f2)\n\n    if [ -n \"$VALUE\" ]; then\n        echo \"\u2713 $prop = $VALUE\"\n    else\n        echo \"\u2717 Missing: $prop\"\n    fi\ndone\n\n# Validate password file\nPASSWORD_FILE=$(grep \"^PASSWORD_FILE=\" application.properties | cut -d= -f2)\nif [ -f \"$PASSWORD_FILE\" ]; then\n    echo \"\u2713 Password file exists\"\nelse\n    echo \"\u2717 Password file not found: $PASSWORD_FILE\"\nfi\n</code></pre>"},{"location":"integration/planning/planning-properties/#connection-test","title":"Connection Test","text":"<pre><code>#!/bin/bash\n# test_planning_connection.sh\n\n# Get properties\nsource application.properties\n\n# Test connection\nOutlineLoad.sh -f:$PASSWORD_FILE /A:$APPLICATION_NAME /U:$USER /V\n\nif [ $? -eq 0 ]; then\n    echo \"\u2713 Connection successful\"\nelse\n    echo \"\u2717 Connection failed\"\nfi\n</code></pre>"},{"location":"integration/planning/planning-properties/#property-templates","title":"Property Templates","text":""},{"location":"integration/planning/planning-properties/#standard-template","title":"Standard Template","text":"<pre><code># planning_template.properties\n# Standard Planning application configuration\n\n# Connection\nplanning.server=${PLANNING_SERVER}\nplanning.port=11333\nplanning.timeout=3600000\n\n# Authentication\nplanning.user=${PLANNING_USER}\nplanning.passwordFile=${PASSWORD_FILE}\n\n# Essbase\nplanning.essbase.server=${ESSBASE_SERVER}\nplanning.essbase.application=${APPLICATION_NAME}\nplanning.essbase.refresh=true\n\n# Deployment\nplanning.outlineload.loadMethod=/L\nplanning.validation.enabled=true\nplanning.backup.enabled=true\n\n# Performance\nplanning.batch.size=1000\nplanning.pool.maxSize=5\n</code></pre>"},{"location":"integration/planning/planning-properties/#high-performance-template","title":"High-Performance Template","text":"<pre><code># high_performance_template.properties\n# Optimized for large deployments\n\n# Batch processing\nplanning.batch.enabled=true\nplanning.batch.size=5000\nplanning.batch.parallel=true\nplanning.batch.threads=8\n\n# Memory\nplanning.jvm.xmx=4096m\nplanning.jvm.gc=G1GC\nplanning.jvm.gcThreads=4\n\n# Connection pool\nplanning.pool.maxSize=20\nplanning.pool.minSize=5\n\n# Timeouts\nplanning.timeout=7200000\nplanning.operation.timeout=3600000\n</code></pre>"},{"location":"integration/planning/planning-properties/#monitoring-properties","title":"Monitoring Properties","text":""},{"location":"integration/planning/planning-properties/#property-change-tracking","title":"Property Change Tracking","text":"<pre><code>#!/bin/bash\n# track_property_changes.sh\n\nPROP_FILE=\"application.properties\"\nHISTORY_FILE=\"property_history.log\"\n\n# Create snapshot\ncp $PROP_FILE ${PROP_FILE}.$(date +%Y%m%d_%H%M%S)\n\n# Log changes\necho \"=== Property Changes $(date) ===\" &gt;&gt; $HISTORY_FILE\ndiff ${PROP_FILE}.previous $PROP_FILE &gt;&gt; $HISTORY_FILE 2&gt;/dev/null\n\n# Update previous\ncp $PROP_FILE ${PROP_FILE}.previous\n</code></pre>"},{"location":"integration/planning/planning-properties/#property-usage-monitoring","title":"Property Usage Monitoring","text":"<pre><code># Monitor property usage in logs\ngrep -h \"Using property\" logs/*.log | \\\n    awk '{print $NF}' | \\\n    sort | uniq -c | \\\n    sort -rn\n</code></pre>"},{"location":"integration/planning/planning-properties/#troubleshooting-properties","title":"Troubleshooting Properties","text":""},{"location":"integration/planning/planning-properties/#common-property-issues","title":"Common Property Issues","text":"Issue Symptom Solution Missing property \"Property not found\" Add required property Invalid value \"Invalid property value\" Check value format Path not found \"File does not exist\" Verify file paths Connection timeout Operation times out Increase timeout value Memory issues OutOfMemory errors Increase JVM memory"},{"location":"integration/planning/planning-properties/#debug-property-loading","title":"Debug Property Loading","text":"<pre><code># Enable debug logging\nexport PLANNING_PROPERTY_DEBUG=true\n\n# Run with verbose output\njava -Dplanning.properties.debug=true \\\n     -jar epmware-agent.jar\n</code></pre>"},{"location":"integration/planning/planning-properties/#property-precedence","title":"Property Precedence","text":"<p>Properties are loaded in this order (later overrides earlier): 1. Default values 2. Application properties file 3. Environment variables 4. Command line arguments</p> <pre><code># Example precedence\n# 1. Default: planning.timeout=30000\n# 2. File: planning.timeout=60000\n# 3. Env: export PLANNING_TIMEOUT=90000\n# 4. Cmd: -Dplanning.timeout=120000\n# Final value: 120000\n</code></pre>"},{"location":"integration/planning/planning-properties/#best-practices","title":"Best Practices","text":""},{"location":"integration/planning/planning-properties/#property-management-guidelines","title":"Property Management Guidelines","text":"<ol> <li>Use descriptive names - Clear property naming</li> <li>Document properties - Include descriptions</li> <li>Version control - Track property changes</li> <li>Environment separation - Different configs per environment</li> <li>Regular review - Audit and update properties</li> </ol>"},{"location":"integration/planning/planning-properties/#security-practices","title":"Security Practices","text":"<ol> <li>No passwords in properties - Use password files</li> <li>Encrypt sensitive values - Use encryption for sensitive data</li> <li>Restrict access - Limit who can view/modify</li> <li>Audit changes - Log all modifications</li> <li>Regular rotation - Update credentials periodically</li> </ol>"},{"location":"integration/planning/planning-properties/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Tune batch sizes - Based on data volume</li> <li>Adjust timeouts - For network latency</li> <li>Configure pools - For concurrent operations</li> <li>Monitor usage - Track property effectiveness</li> <li>Regular testing - Validate optimal values</li> </ol> <p>Property Documentation</p> <p>Maintain a property reference document listing all custom properties, their purpose, and valid values for your team's reference.</p> <p>Production Changes</p> <p>Always test property changes in non-production environments first. Some properties require application restart to take effect.</p>"},{"location":"integration/planning/planning-properties/#next-steps","title":"Next Steps","text":"<ul> <li>Password Encryption - Set up password files</li> <li>Planning Integration Overview - Complete Planning setup</li> <li>HFM Integration - HFM configuration</li> <li>Troubleshooting - Resolve issues</li> </ul>"},{"location":"management/","title":"Agent Management Overview","text":""},{"location":"management/#agent-management-overview","title":"Agent Management Overview","text":"<p>This section covers the ongoing management, monitoring, and maintenance of the EPMware Agent after installation and configuration. Proper management ensures reliable operation and quick issue resolution.</p>"},{"location":"management/#management-components","title":"Management Components","text":"<ul> <li> <p> Windows Services   Managing agent as Windows scheduled task or service</p> </li> <li> <p> Linux Services   Managing agent as Linux background process or systemd service</p> </li> <li> <p> Agent Logs   Understanding and managing agent log files</p> </li> <li> <p> Monitoring   Implementing monitoring and alerting for agent health</p> </li> </ul>"},{"location":"management/#daily-management-tasks","title":"Daily Management Tasks","text":""},{"location":"management/#health-checks","title":"Health Checks","text":"<p>Regular checks to ensure agent health:</p> <pre><code># Quick health check\nps aux | grep epmware-agent  # Is it running?\ntail -n 20 logs/agent-poll.log  # Is it polling?\ngrep ERROR logs/agent.log | tail -n 10  # Any errors?\n</code></pre>"},{"location":"management/#log-review","title":"Log Review","text":"<p>Daily log review routine:</p> <ol> <li>Check for errors or warnings</li> <li>Verify successful deployments</li> <li>Monitor polling frequency</li> <li>Review resource usage</li> </ol>"},{"location":"management/#performance-monitoring","title":"Performance Monitoring","text":"<p>Track key metrics: - CPU usage - Memory consumption - Network connectivity - Deployment success rate</p>"},{"location":"management/#weekly-management-tasks","title":"Weekly Management Tasks","text":""},{"location":"management/#log-maintenance","title":"Log Maintenance","text":"<p>Manage log file growth:</p> <pre><code># Archive old logs\nfind logs/ -name \"*.log\" -mtime +7 -exec gzip {} \\;\n\n# Remove very old logs\nfind logs/ -name \"*.gz\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh logs/\n</code></pre>"},{"location":"management/#configuration-backup","title":"Configuration Backup","text":"<p>Weekly backup routine:</p> <pre><code>#!/bin/bash\n# Weekly backup script\nBACKUP_DIR=\"/backup/epmware/$(date +%Y-%W)\"\nmkdir -p $BACKUP_DIR\n\n# Backup configuration\ncp agent.properties $BACKUP_DIR/\ncp ew_target_service.sh $BACKUP_DIR/\n\n# Create archive\ntar -czf $BACKUP_DIR.tar.gz $BACKUP_DIR\n</code></pre>"},{"location":"management/#service-validation","title":"Service Validation","text":"<p>Verify service configuration: - Check scheduled task (Windows) - Verify systemd service (Linux) - Test auto-restart capability - Review service dependencies</p>"},{"location":"management/#monthly-management-tasks","title":"Monthly Management Tasks","text":""},{"location":"management/#security-review","title":"Security Review","text":"<p>Monthly security checks:</p> <ol> <li>Token Rotation - Consider refreshing REST tokens</li> <li>Permission Audit - Verify file permissions</li> <li>Access Review - Check user access levels</li> <li>Update Check - Look for security patches</li> </ol>"},{"location":"management/#performance-analysis","title":"Performance Analysis","text":"<p>Analyze monthly trends:</p> <pre><code># Deployment statistics\ngrep \"Deployment completed\" logs/agent.log | wc -l\n\n# Error frequency\ngrep ERROR logs/agent.log | awk '{print $1}' | uniq -c\n\n# Average response time\ngrep \"Response time\" logs/agent.log | awk '{sum+=$NF; count++} END {print sum/count}'\n</code></pre>"},{"location":"management/#capacity-planning","title":"Capacity Planning","text":"<p>Review resource usage: - Disk space trends - Memory usage patterns - Network bandwidth usage - Deployment volumes</p>"},{"location":"management/#service-management","title":"Service Management","text":""},{"location":"management/#starting-the-agent","title":"Starting the Agent","text":"<p>Platform-specific start procedures:</p> <p>Windows: - Task Scheduler \u2192 Run task - Or PowerShell command</p> <p>Linux: - systemctl start epmware-agent - Or background process start</p>"},{"location":"management/#stopping-the-agent","title":"Stopping the Agent","text":"<p>Graceful shutdown procedures:</p> <p>Windows: - Stop scheduled task - Kill Java process</p> <p>Linux: - systemctl stop epmware-agent - Or kill process</p>"},{"location":"management/#restarting-the-agent","title":"Restarting the Agent","text":"<p>When to restart: - After configuration changes - After agent updates - To resolve stuck processes - As part of maintenance</p>"},{"location":"management/#troubleshooting-management-issues","title":"Troubleshooting Management Issues","text":""},{"location":"management/#agent-not-starting","title":"Agent Not Starting","text":"<p>Common causes and solutions:</p> Issue Check Solution Java not found <code>java -version</code> Fix PATH or JAVA_HOME Port in use <code>netstat -an</code> Find and stop conflicting process Permission denied File ownership Fix with chown/chmod Configuration error agent.properties Validate configuration syntax"},{"location":"management/#agent-stops-unexpectedly","title":"Agent Stops Unexpectedly","text":"<p>Investigate unexpected stops:</p> <pre><code># Check system logs\njournalctl -u epmware-agent  # Linux systemd\neventvwr.msc  # Windows Event Viewer\n\n# Check agent logs\ntail -100 logs/agent.log | grep -E \"ERROR|FATAL\"\n\n# Check memory issues\ndmesg | grep -i \"out of memory\"\n</code></pre>"},{"location":"management/#performance-degradation","title":"Performance Degradation","text":"<p>Address performance issues:</p> <ol> <li> <p>Check Resources </p><pre><code>top  # Linux\ntaskmgr  # Windows\n</code></pre><p></p> </li> <li> <p>Review Logs</p> </li> <li>Large log files?</li> <li>Excessive errors?</li> <li> <p>Slow response times?</p> </li> <li> <p>Optimize Configuration</p> </li> <li>Adjust polling interval</li> <li>Tune JVM settings</li> <li>Clean temporary files</li> </ol>"},{"location":"management/#automation-scripts","title":"Automation Scripts","text":""},{"location":"management/#health-check-script","title":"Health Check Script","text":"<p>Automated health monitoring:</p> <pre><code>#!/bin/bash\n# health_check.sh\n\nSTATUS=0\nREPORT=\"\"\n\n# Check process\nif pgrep -f epmware-agent &gt; /dev/null; then\n    REPORT=\"\u2713 Agent running\\n\"\nelse\n    REPORT=\"\u2717 Agent NOT running\\n\"\n    STATUS=1\nfi\n\n# Check recent activity\nLAST_POLL=$(tail -1 logs/agent-poll.log | cut -d' ' -f1-2)\nREPORT=\"${REPORT}Last poll: $LAST_POLL\\n\"\n\n# Check errors\nERRORS=$(tail -1000 logs/agent.log | grep -c ERROR)\nREPORT=\"${REPORT}Recent errors: $ERRORS\\n\"\n\n# Send alert if issues\nif [ $STATUS -ne 0 ]; then\n    echo -e \"$REPORT\" | mail -s \"EPMware Agent Alert\" admin@company.com\nfi\n\necho -e \"$REPORT\"\nexit $STATUS\n</code></pre>"},{"location":"management/#maintenance-script","title":"Maintenance Script","text":"<p>Regular maintenance automation:</p> <pre><code>#!/bin/bash\n# maintenance.sh\n\n# Rotate logs\nfind logs/ -name \"*.log\" -size +100M -exec mv {} {}.old \\;\nfind logs/ -name \"*.log.old\" -mtime +7 -delete\n\n# Clean temp files\nfind temp/ -type f -mtime +7 -delete\n\n# Compact database (if applicable)\n# Add database maintenance here\n\n# Restart if needed\nif [ -f /tmp/agent_restart_required ]; then\n    systemctl restart epmware-agent\n    rm /tmp/agent_restart_required\nfi\n</code></pre>"},{"location":"management/#monitoring-setup","title":"Monitoring Setup","text":""},{"location":"management/#key-metrics-to-monitor","title":"Key Metrics to Monitor","text":"<p>Essential monitoring points:</p> Metric Warning Threshold Critical Threshold Agent Process - Not running Polling Frequency &gt;60 seconds &gt;300 seconds Error Rate &gt;5/hour &gt;20/hour Deployment Success &lt;95% &lt;80% Response Time &gt;5 seconds &gt;30 seconds Disk Usage &gt;80% &gt;90%"},{"location":"management/#alerting-configuration","title":"Alerting Configuration","text":"<p>Set up alerts for: - Agent process failure - Deployment failures - Connection timeouts - Disk space warnings - Memory exhaustion</p>"},{"location":"management/#best-practices","title":"Best Practices","text":""},{"location":"management/#operational-excellence","title":"Operational Excellence","text":"<ol> <li>Regular Monitoring - Check agent daily</li> <li>Proactive Maintenance - Schedule regular tasks</li> <li>Documentation - Keep runbooks updated</li> <li>Change Management - Track all changes</li> <li>Incident Response - Have procedures ready</li> </ol>"},{"location":"management/#security-management","title":"Security Management","text":"<ol> <li>Regular Updates - Apply security patches</li> <li>Access Control - Limit agent access</li> <li>Audit Logging - Monitor all activities</li> <li>Token Rotation - Refresh tokens periodically</li> <li>Backup Encryption - Secure backup files</li> </ol>"},{"location":"management/#performance-management","title":"Performance Management","text":"<ol> <li>Resource Monitoring - Track usage trends</li> <li>Capacity Planning - Plan for growth</li> <li>Performance Tuning - Optimize settings</li> <li>Load Distribution - Balance workloads</li> <li>Regular Reviews - Analyze metrics</li> </ol>"},{"location":"management/#documentation-requirements","title":"Documentation Requirements","text":"<p>Maintain documentation for:</p>"},{"location":"management/#operational-documentation","title":"Operational Documentation","text":"<ul> <li>Start/stop procedures</li> <li>Troubleshooting guides</li> <li>Contact information</li> <li>Escalation procedures</li> </ul>"},{"location":"management/#configuration-documentation","title":"Configuration Documentation","text":"<ul> <li>Current settings</li> <li>Change history</li> <li>Integration details</li> <li>Network diagrams</li> </ul>"},{"location":"management/#recovery-documentation","title":"Recovery Documentation","text":"<ul> <li>Backup procedures</li> <li>Restore procedures</li> <li>Disaster recovery plan</li> <li>Business continuity plan</li> </ul>"},{"location":"management/#management-tools","title":"Management Tools","text":""},{"location":"management/#built-in-tools","title":"Built-in Tools","text":"<p>EPMware provides: - Agent status in UI - Deployment history - Error reporting - Connection testing</p>"},{"location":"management/#external-tools","title":"External Tools","text":"<p>Consider integrating: - Monitoring systems (Nagios, Zabbix) - Log aggregators (ELK, Splunk) - Alerting systems (PagerDuty) - Automation tools (Ansible, Puppet)</p>"},{"location":"management/#upgrade-management","title":"Upgrade Management","text":""},{"location":"management/#planning-upgrades","title":"Planning Upgrades","text":"<p>Consider when upgrading: 1. Release notes review 2. Testing in non-production 3. Backup current version 4. Maintenance window scheduling 5. Rollback plan preparation</p>"},{"location":"management/#upgrade-process","title":"Upgrade Process","text":"<p>Standard upgrade steps: 1. Stop agent 2. Backup configuration 3. Deploy new version 4. Restore configuration 5. Test functionality 6. Monitor closely</p>"},{"location":"management/#next-steps","title":"Next Steps","text":"<p>Explore specific management topics:</p> <ol> <li>Windows Services - Windows-specific management</li> <li>Linux Services - Linux-specific management</li> <li>Agent Logs - Log management details</li> <li>Monitoring - Monitoring implementation</li> </ol> <p>Automation is Key</p> <p>Automate repetitive management tasks to ensure consistency and reduce manual effort. This improves reliability and frees time for strategic work.</p> <p>Regular Maintenance</p> <p>Neglecting regular maintenance can lead to performance degradation, disk space issues, and unexpected failures. Establish and follow a maintenance schedule.</p>"},{"location":"management/agent-logs/","title":"Agent Logs","text":""},{"location":"management/agent-logs/#agent-logs","title":"Agent Logs","text":"<p>The EPMware Agent generates comprehensive log files that track all agent activities, commands, and polling operations. These logs are essential for monitoring agent health, troubleshooting issues, and auditing deployment activities.</p>"},{"location":"management/agent-logs/#log-files-location","title":"Log Files Location","text":"<p>Agent log files are automatically created in the <code>logs</code> directory under the agent installation home directory:</p> <ul> <li>Windows: <code>C:\\cygwin64\\home\\[username]\\logs\\</code></li> <li>Linux: <code>/home/[username]/logs/</code></li> </ul>"},{"location":"management/agent-logs/#log-file-types","title":"Log File Types","text":"<p>The agent generates two primary log files:</p>"},{"location":"management/agent-logs/#agentlog","title":"agent.log","text":"<p>The main operational log that records: - All commands received from the EPMware application - Command execution details and results - Deployment activities and their outcomes - Error messages and exceptions - Connection establishment and termination events</p> <p>Example agent.log content: </p><pre><code>2023-11-15 10:30:45 INFO  - Agent started successfully\n2023-11-15 10:30:46 INFO  - Connected to EPMware server: epmware1.epmware.com\n2023-11-15 10:31:15 INFO  - Received deployment command for application: HFM_PROD\n2023-11-15 10:31:16 INFO  - Executing deployment task ID: 12345\n2023-11-15 10:32:30 INFO  - Deployment completed successfully\n2023-11-15 10:32:31 INFO  - Response sent to EPMware server\n</code></pre><p></p>"},{"location":"management/agent-logs/#agent-polllog","title":"agent-poll.log","text":"<p>The polling activity log that records: - Periodic polling checks (based on <code>agent.interval.millisecond</code> setting) - Connection status confirmations - Heartbeat messages to EPMware server - Network connectivity issues</p> <p>Example agent-poll.log content: </p><pre><code>2023-11-15 10:30:45 INFO  - Polling started - interval: 30000ms\n2023-11-15 10:31:15 INFO  - Poll check - Status: Connected\n2023-11-15 10:31:45 INFO  - Poll check - Status: Connected\n2023-11-15 10:32:15 INFO  - Poll check - Status: Connected\n</code></pre><p></p>"},{"location":"management/agent-logs/#log-rotation-and-management","title":"Log Rotation and Management","text":""},{"location":"management/agent-logs/#manual-log-rotation","title":"Manual Log Rotation","text":"<p>To manually rotate or archive log files:</p> <ol> <li>Stop the agent (see Start and Stop Guide)</li> <li>Navigate to the logs directory</li> <li>Archive or delete existing log files:    <pre><code># Archive logs with timestamp\ntar -czf agent-logs-$(date +%Y%m%d).tar.gz *.log\n\n# Remove old log files\nrm agent*.log\n</code></pre></li> <li>Restart the agent - new log files will be created automatically</li> </ol> <p>Active Process Check</p> <p>If you receive an error when trying to delete log files, the agent process is still running. Stop the agent before managing log files.</p>"},{"location":"management/agent-logs/#automatic-log-rotation","title":"Automatic Log Rotation","text":"<p>For production environments, configure automatic log rotation:</p> <p>Linux (using logrotate): Create <code>/etc/logrotate.d/epmware-agent</code>: </p><pre><code>/home/[username]/logs/agent*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 644 [username] [group]\n    postrotate\n        # No need to restart agent for log rotation\n    endscript\n}\n</code></pre><p></p> <p>Windows (using Task Scheduler): Create a PowerShell script for log rotation and schedule it to run daily.</p>"},{"location":"management/agent-logs/#log-level-configuration","title":"Log Level Configuration","text":"<p>The agent supports multiple log levels for different verbosity:</p> <ul> <li>ERROR - Only critical errors</li> <li>WARN - Warnings and errors</li> <li>INFO - Standard operational information (default)</li> <li>DEBUG - Detailed debugging information</li> </ul> <p>To change the log level, add to <code>agent.properties</code>: </p><pre><code>agent.log.level=DEBUG\n</code></pre><p></p>"},{"location":"management/agent-logs/#viewing-logs","title":"Viewing Logs","text":""},{"location":"management/agent-logs/#real-time-monitoring","title":"Real-time Monitoring","text":"<p>Linux: </p><pre><code># Monitor agent.log in real-time\ntail -f ~/logs/agent.log\n\n# Monitor both logs simultaneously\ntail -f ~/logs/agent*.log\n</code></pre><p></p> <p>Windows (Cygwin): </p><pre><code># Monitor agent.log\ntail -f /home/Administrator/logs/agent.log\n\n# Monitor polling log\ntail -f /home/Administrator/logs/agent-poll.log\n</code></pre><p></p>"},{"location":"management/agent-logs/#log-analysis","title":"Log Analysis","text":"<p>Common commands for log analysis:</p> <pre><code># View last 100 lines\ntail -n 100 agent.log\n\n# Search for errors\ngrep ERROR agent.log\n\n# Count deployments\ngrep \"Deployment completed\" agent.log | wc -l\n\n# View logs for specific date\ngrep \"2023-11-15\" agent.log\n\n# Find failed deployments\ngrep -E \"Deployment failed|ERROR.*deployment\" agent.log\n</code></pre>"},{"location":"management/agent-logs/#common-log-patterns","title":"Common Log Patterns","text":""},{"location":"management/agent-logs/#successful-operations","title":"Successful Operations","text":"<ul> <li><code>Connected to EPMware server</code> - Agent successfully connected</li> <li><code>Deployment completed successfully</code> - Deployment succeeded</li> <li><code>Import completed successfully</code> - Application import succeeded</li> <li><code>Response sent to EPMware server</code> - Command result sent back</li> </ul>"},{"location":"management/agent-logs/#warning-indicators","title":"Warning Indicators","text":"<ul> <li><code>Connection timeout</code> - Network issues</li> <li><code>Retry attempt</code> - Operation being retried</li> <li><code>Queue full</code> - Too many pending operations</li> <li><code>Slow response</code> - Performance issues</li> </ul>"},{"location":"management/agent-logs/#error-patterns","title":"Error Patterns","text":"<ul> <li><code>Connection refused</code> - Server not reachable</li> <li><code>Authentication failed</code> - Invalid token or credentials</li> <li><code>Deployment failed</code> - Deployment error occurred</li> <li><code>Command execution failed</code> - Command could not be executed</li> <li><code>OutOfMemoryError</code> - Java heap space issue</li> </ul>"},{"location":"management/agent-logs/#troubleshooting-with-logs","title":"Troubleshooting with Logs","text":""},{"location":"management/agent-logs/#connection-issues","title":"Connection Issues","text":"<p>Check <code>agent-poll.log</code> for connection patterns: </p><pre><code>grep -i \"connection\\|timeout\\|refused\" agent-poll.log\n</code></pre><p></p>"},{"location":"management/agent-logs/#deployment-failures","title":"Deployment Failures","text":"<p>Search <code>agent.log</code> for deployment details: </p><pre><code>grep -B5 -A5 \"Deployment failed\" agent.log\n</code></pre><p></p>"},{"location":"management/agent-logs/#performance-analysis","title":"Performance Analysis","text":"<p>Analyze command execution times: </p><pre><code>grep \"Executing\\|completed\" agent.log | grep \"task ID: 12345\"\n</code></pre><p></p>"},{"location":"management/agent-logs/#log-file-permissions","title":"Log File Permissions","text":"<p>Ensure proper permissions for log files:</p> <p>Linux: </p><pre><code>chmod 644 ~/logs/*.log\nchown [username]:[group] ~/logs/*.log\n</code></pre><p></p> <p>Windows: Logs inherit permissions from the Cygwin user's home directory.</p>"},{"location":"management/agent-logs/#best-practices","title":"Best Practices","text":"<ol> <li>Regular Monitoring</li> <li>Check logs daily for errors</li> <li>Set up alerts for critical errors</li> <li> <p>Monitor log file sizes</p> </li> <li> <p>Retention Policy</p> </li> <li>Keep logs for at least 30 days</li> <li>Archive older logs to separate storage</li> <li> <p>Compress archived logs to save space</p> </li> <li> <p>Security</p> </li> <li>Ensure logs don't contain sensitive passwords</li> <li>Restrict log file access to authorized users</li> <li> <p>Regularly review access permissions</p> </li> <li> <p>Disk Space Management</p> </li> <li>Monitor available disk space</li> <li>Implement automatic cleanup for old logs</li> <li>Set maximum log file sizes if needed</li> </ol>"},{"location":"management/agent-logs/#integration-with-monitoring-tools","title":"Integration with Monitoring Tools","text":"<p>The agent logs can be integrated with enterprise monitoring solutions:</p> <ul> <li>Splunk - Forward logs for centralized analysis</li> <li>ELK Stack - Use Filebeat to ship logs to Elasticsearch</li> <li>Nagios - Monitor log patterns for alerts</li> <li>Zabbix - Set up log monitoring items</li> </ul>"},{"location":"management/agent-logs/#related-topics","title":"Related Topics","text":"<ul> <li>Monitoring</li> <li>Troubleshooting</li> <li>Debug Mode</li> </ul>"},{"location":"management/monitoring/","title":"Monitoring","text":""},{"location":"management/monitoring/#agent-monitoring","title":"Agent Monitoring","text":"<p>Comprehensive monitoring of EPMware Agents ensures reliable metadata deployments and helps identify issues before they impact operations. This guide covers monitoring strategies, health checks, and alerting configurations.</p>"},{"location":"management/monitoring/#monitoring-overview","title":"Monitoring Overview","text":"<p>The EPMware Agent monitoring encompasses: - Agent availability and uptime - Connection status to EPMware server - Deployment success rates - Resource utilization - Response times and performance metrics</p>"},{"location":"management/monitoring/#agent-status-monitoring","title":"Agent Status Monitoring","text":""},{"location":"management/monitoring/#from-epmware-application","title":"From EPMware Application","text":"<p>Monitor agent status directly from the EPMware web interface:</p> <ol> <li>Navigate to Infrastructure \u2192 Servers</li> <li>View the Agent Status column for each server</li> <li>Right-click any server and select Test Connection</li> </ol> <p>Status indicators: - \ud83d\udfe2 Online - Agent is connected and responding - \ud83d\udfe1 Warning - Agent responding slowly or intermittently - \ud83d\udd34 Offline - Agent is not responding - \u26ab Unknown - No recent status update</p>"},{"location":"management/monitoring/#command-line-health-check","title":"Command Line Health Check","text":"<p>Linux: </p><pre><code>#!/bin/bash\n# Agent health check script\nPID=$(ps -ef | grep -i epmware-agent | grep -v grep | awk '{print $2}')\nif [ -z \"$PID\" ]; then\n    echo \"ERROR: Agent is not running\"\n    exit 1\nelse\n    echo \"OK: Agent is running (PID: $PID)\"\n    exit 0\nfi\n</code></pre><p></p> <p>Windows (PowerShell): </p><pre><code># Check if agent is running\n$agent = Get-Process java | Where-Object {$_.CommandLine -like \"*epmware-agent.jar*\"}\nif ($agent) {\n    Write-Host \"OK: Agent is running (PID: $($agent.Id))\"\n    exit 0\n} else {\n    Write-Host \"ERROR: Agent is not running\"\n    exit 1\n}\n</code></pre><p></p>"},{"location":"management/monitoring/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"management/monitoring/#resource-utilization","title":"Resource Utilization","text":"<p>Monitor CPU and memory usage of the agent process:</p> <p>Linux: </p><pre><code># Real-time monitoring\ntop -p $(pgrep -f epmware-agent)\n\n# Memory usage\nps aux | grep epmware-agent | grep -v grep | awk '{print \"Memory: \"$4\"%\"}'\n\n# CPU usage\nps aux | grep epmware-agent | grep -v grep | awk '{print \"CPU: \"$3\"%\"}'\n</code></pre><p></p> <p>Windows (Task Manager): 1. Open Task Manager 2. Find the java.exe process running epmware-agent.jar 3. Monitor CPU and Memory columns</p>"},{"location":"management/monitoring/#response-time-monitoring","title":"Response Time Monitoring","text":"<p>Track agent response times by analyzing logs:</p> <pre><code># Calculate average response time for deployments\ngrep \"Deployment.*completed\" agent.log | \\\n  awk '{print $1, $2}' | \\\n  while read start_time; do\n    # Calculate duration\n    echo \"Response time calculation...\"\n  done\n</code></pre>"},{"location":"management/monitoring/#automated-monitoring-scripts","title":"Automated Monitoring Scripts","text":""},{"location":"management/monitoring/#continuous-monitoring-script","title":"Continuous Monitoring Script","text":"<p>Create a monitoring script that runs continuously:</p> <p>monitor-agent.sh (Linux): </p><pre><code>#!/bin/bash\n\nAGENT_HOME=\"/home/[username]\"\nLOG_FILE=\"$AGENT_HOME/logs/agent-monitor.log\"\nALERT_EMAIL=\"admin@company.com\"\n\nwhile true; do\n    # Check if agent is running\n    PID=$(ps -ef | grep -i epmware-agent | grep -v grep | awk '{print $2}')\n\n    if [ -z \"$PID\" ]; then\n        echo \"$(date): Agent DOWN - Attempting restart\" &gt;&gt; $LOG_FILE\n        cd $AGENT_HOME\n        ./ew_target_service.sh &amp;\n\n        # Send alert\n        echo \"EPMware Agent down on $(hostname)\" | mail -s \"Agent Alert\" $ALERT_EMAIL\n    else\n        echo \"$(date): Agent UP - PID: $PID\" &gt;&gt; $LOG_FILE\n    fi\n\n    # Check every 5 minutes\n    sleep 300\ndone\n</code></pre><p></p>"},{"location":"management/monitoring/#windows-scheduled-task-monitoring","title":"Windows Scheduled Task Monitoring","text":"<p>Create a PowerShell script and schedule it to run every 5 minutes:</p> <p>Monitor-Agent.ps1: </p><pre><code>$agentProcess = Get-Process java -ErrorAction SilentlyContinue | \n    Where-Object {$_.CommandLine -like \"*epmware-agent.jar*\"}\n\nif (-not $agentProcess) {\n    # Agent is not running - restart it\n    Write-EventLog -LogName Application -Source \"EPMware Agent\" `\n        -EventId 1001 -EntryType Error `\n        -Message \"Agent not running - attempting restart\"\n\n    # Start the scheduled task\n    Start-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n    # Send email alert (requires configured SMTP)\n    Send-MailMessage -To \"admin@company.com\" `\n        -From \"epmware@company.com\" `\n        -Subject \"EPMware Agent Down\" `\n        -Body \"Agent was down on $env:COMPUTERNAME and has been restarted\" `\n        -SmtpServer \"smtp.company.com\"\n}\n</code></pre><p></p>"},{"location":"management/monitoring/#key-metrics-to-monitor","title":"Key Metrics to Monitor","text":""},{"location":"management/monitoring/#availability-metrics","title":"Availability Metrics","text":"<ul> <li>Uptime percentage - Target: &gt;99.5%</li> <li>Mean time between failures (MTBF)</li> <li>Mean time to recovery (MTTR)</li> <li>Number of restarts required</li> </ul>"},{"location":"management/monitoring/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Average response time - Target: &lt;2 seconds</li> <li>Deployment success rate - Target: &gt;98%</li> <li>Queue processing time</li> <li>Memory usage - Alert if &gt;1GB</li> <li>CPU usage - Alert if &gt;80% sustained</li> </ul>"},{"location":"management/monitoring/#business-metrics","title":"Business Metrics","text":"<ul> <li>Deployments per day/hour</li> <li>Failed deployments</li> <li>Deployment duration trends</li> <li>Peak usage times</li> </ul>"},{"location":"management/monitoring/#alerting-configuration","title":"Alerting Configuration","text":""},{"location":"management/monitoring/#log-based-alerts","title":"Log-based Alerts","text":"<p>Monitor specific patterns in log files:</p> <pre><code>#!/bin/bash\n# Alert on errors\ntail -F agent.log | while read line; do\n    if echo \"$line\" | grep -q \"ERROR\\|FATAL\"; then\n        echo \"$line\" | mail -s \"EPMware Agent Error\" admin@company.com\n    fi\ndone\n</code></pre>"},{"location":"management/monitoring/#threshold-alerts","title":"Threshold Alerts","text":"<p>Set up alerts for resource thresholds:</p> <pre><code># CPU usage alert\nCPU_USAGE=$(ps aux | grep epmware-agent | grep -v grep | awk '{print $3}')\nif (( $(echo \"$CPU_USAGE &gt; 80\" | bc -l) )); then\n    echo \"High CPU usage: $CPU_USAGE%\" | mail -s \"Agent CPU Alert\" admin@company.com\nfi\n</code></pre>"},{"location":"management/monitoring/#integration-with-monitoring-tools","title":"Integration with Monitoring Tools","text":""},{"location":"management/monitoring/#nagios-plugin","title":"Nagios Plugin","text":"<p>Create a custom Nagios plugin for agent monitoring:</p> <pre><code>#!/bin/bash\n# check_epmware_agent.sh\n\n# Check if agent is running\nPID=$(ps -ef | grep -i epmware-agent | grep -v grep | awk '{print $2}')\n\nif [ -z \"$PID\" ]; then\n    echo \"CRITICAL: EPMware Agent is not running\"\n    exit 2\nfi\n\n# Check last poll time (should be within last 60 seconds)\nLAST_POLL=$(tail -1 ~/logs/agent-poll.log | awk '{print $1, $2}')\n# Add logic to check if within threshold\n\necho \"OK: EPMware Agent is running (PID: $PID)\"\nexit 0\n</code></pre>"},{"location":"management/monitoring/#zabbix-monitoring","title":"Zabbix Monitoring","text":"<p>Configure Zabbix items for agent monitoring:</p> <ol> <li>Process monitoring:</li> <li>Key: <code>proc.num[java,,,epmware-agent.jar]</code></li> <li> <p>Trigger: Process count &lt; 1</p> </li> <li> <p>Log monitoring:</p> </li> <li>Key: <code>log[/home/username/logs/agent.log,\"ERROR\"]</code></li> <li> <p>Trigger: Error count &gt; 0</p> </li> <li> <p>Port monitoring:</p> </li> <li>Monitor agent communication port</li> <li>Alert on connection failures</li> </ol>"},{"location":"management/monitoring/#splunk-integration","title":"Splunk Integration","text":"<p>Forward agent logs to Splunk for advanced analytics:</p> <p>inputs.conf: </p><pre><code>[monitor:///home/*/logs/agent*.log]\nsourcetype = epmware_agent\nindex = epmware\n</code></pre><p></p> <p>Create Splunk alerts for: - Error patterns in logs - Deployment failures - Connection issues - Performance degradation</p>"},{"location":"management/monitoring/#dashboard-creation","title":"Dashboard Creation","text":""},{"location":"management/monitoring/#monitoring-dashboard-components","title":"Monitoring Dashboard Components","text":"<p>Create a comprehensive monitoring dashboard including:</p> <ol> <li>Agent Status Panel</li> <li>Current status (Up/Down)</li> <li>Uptime percentage</li> <li> <p>Last successful poll time</p> </li> <li> <p>Performance Metrics</p> </li> <li>Response time graph</li> <li>CPU/Memory usage trends</li> <li> <p>Queue size over time</p> </li> <li> <p>Deployment Statistics</p> </li> <li>Success/failure rates</li> <li>Average deployment duration</li> <li> <p>Deployments by application</p> </li> <li> <p>Alert Summary</p> </li> <li>Recent errors</li> <li>Critical alerts</li> <li>Warning notifications</li> </ol>"},{"location":"management/monitoring/#troubleshooting-monitoring-issues","title":"Troubleshooting Monitoring Issues","text":""},{"location":"management/monitoring/#agent-shows-offline-but-is-running","title":"Agent Shows Offline but Is Running","text":"<ol> <li> <p>Check network connectivity:    </p><pre><code>ping epmware-server.com\ntelnet epmware-server.com 443\n</code></pre><p></p> </li> <li> <p>Verify agent configuration:    </p><pre><code>grep \"ew.portal\" agent.properties\n</code></pre><p></p> </li> <li> <p>Check firewall rules:    </p><pre><code>sudo iptables -L | grep 443\n</code></pre><p></p> </li> </ol>"},{"location":"management/monitoring/#false-alerts","title":"False Alerts","text":"<ul> <li>Adjust polling intervals in monitoring scripts</li> <li>Increase timeout thresholds</li> <li>Implement alert suppression during maintenance</li> </ul>"},{"location":"management/monitoring/#missing-metrics","title":"Missing Metrics","text":"<ul> <li>Verify log file permissions</li> <li>Check disk space for log storage</li> <li>Ensure monitoring scripts have proper execution rights</li> </ul>"},{"location":"management/monitoring/#best-practices","title":"Best Practices","text":"<ol> <li>Establish Baselines</li> <li>Document normal performance metrics</li> <li>Set realistic thresholds based on baselines</li> <li> <p>Review and adjust thresholds quarterly</p> </li> <li> <p>Implement Redundancy</p> </li> <li>Use multiple monitoring methods</li> <li>Configure backup alerting channels</li> <li> <p>Test failover procedures regularly</p> </li> <li> <p>Document Procedures</p> </li> <li>Create runbooks for common issues</li> <li>Document escalation procedures</li> <li> <p>Maintain contact lists for alerts</p> </li> <li> <p>Regular Testing</p> </li> <li>Test monitoring scripts monthly</li> <li>Verify alert delivery</li> <li>Conduct failure scenario drills</li> </ol>"},{"location":"management/monitoring/#related-topics","title":"Related Topics","text":"<ul> <li>Agent Logs</li> <li>Start and Stop Procedures</li> <li>Troubleshooting</li> </ul>"},{"location":"management/linux/","title":"Linux Services Management","text":""},{"location":"management/linux/#linux-services-management","title":"Linux Services Management","text":"<p>This section covers managing the EPMware Agent on Linux servers, including systemd services, background processes, and Linux-specific considerations.</p>"},{"location":"management/linux/#linux-management-options","title":"Linux Management Options","text":"<p>The EPMware Agent can run on Linux as:</p> <ul> <li> <p> systemd Service   Modern Linux distributions (recommended)</p> </li> <li> <p> Background Process   Traditional approach using nohup</p> </li> <li> <p> Start/Stop Scripts   Manual control procedures</p> </li> </ul>"},{"location":"management/linux/#management-overview","title":"Management Overview","text":""},{"location":"management/linux/#systemd-service-recommended","title":"systemd Service (Recommended)","text":"<p>For modern Linux distributions: - Automatic startup on boot - Process supervision - Dependency management - Integrated logging</p>"},{"location":"management/linux/#background-process","title":"Background Process","text":"<p>Traditional Unix approach: - Simple to implement - Works on all systems - Manual management - Less robust</p>"},{"location":"management/linux/#initd-scripts","title":"Init.d Scripts","text":"<p>For older systems: - SysV init compatibility - Legacy system support - Manual dependency handling</p>"},{"location":"management/linux/#quick-management-commands","title":"Quick Management Commands","text":""},{"location":"management/linux/#check-agent-status","title":"Check Agent Status","text":"<pre><code># systemd status\nsystemctl status epmware-agent\n\n# Process check\nps aux | grep epmware-agent\n\n# Recent logs\ntail -n 20 /home/epmadmin/logs/agent.log\n</code></pre>"},{"location":"management/linux/#start-agent","title":"Start Agent","text":"<pre><code># Via systemd\nsudo systemctl start epmware-agent\n\n# Via background process\ncd /home/epmadmin\nnohup ./ew_target_service.sh &gt; agent.out 2&gt;&amp;1 &amp;\n</code></pre>"},{"location":"management/linux/#stop-agent","title":"Stop Agent","text":"<pre><code># Via systemd\nsudo systemctl stop epmware-agent\n\n# Via process kill\npkill -f epmware-agent\n</code></pre>"},{"location":"management/linux/#systemd-service-configuration","title":"systemd Service Configuration","text":""},{"location":"management/linux/#creating-service-file","title":"Creating Service File","text":"<p>Create <code>/etc/systemd/system/epmware-agent.service</code>:</p> <pre><code>[Unit]\nDescription=EPMware Agent Service\nAfter=network.target\nWants=network-online.target\n\n[Service]\nType=simple\nUser=epmadmin\nGroup=epmadmin\nWorkingDirectory=/home/epmadmin\nExecStart=/usr/bin/java -jar /home/epmadmin/epmware-agent.jar --spring.config.name=agent\nExecStop=/bin/kill -TERM $MAINPID\nRestart=always\nRestartSec=30\nStandardOutput=journal\nStandardError=journal\nSyslogIdentifier=epmware-agent\n\n# Environment variables\nEnvironment=\"JAVA_HOME=/usr/java/latest\"\nEnvironment=\"PATH=/usr/java/latest/bin:/usr/local/bin:/usr/bin:/bin\"\n\n# Resource limits\nLimitNOFILE=65536\nLimitNPROC=32768\n\n# Memory limits\nMemoryLimit=2G\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"management/linux/#enabling-service","title":"Enabling Service","text":"<pre><code># Reload systemd configuration\nsudo systemctl daemon-reload\n\n# Enable service for auto-start\nsudo systemctl enable epmware-agent\n\n# Start the service\nsudo systemctl start epmware-agent\n\n# Check status\nsystemctl status epmware-agent\n</code></pre>"},{"location":"management/linux/#process-management","title":"Process Management","text":""},{"location":"management/linux/#process-monitoring","title":"Process Monitoring","text":"<p>Monitor agent process:</p> <pre><code>#!/bin/bash\n# monitor_agent.sh\n\n# Check if running\nif pgrep -f \"epmware-agent\" &gt; /dev/null; then\n    echo \"Agent is running\"\n\n    # Get process details\n    ps aux | grep epmware-agent | grep -v grep\n\n    # Check resource usage\n    pid=$(pgrep -f \"epmware-agent\")\n    echo \"Memory usage:\"\n    ps -o pid,vsz,rss,comm -p $pid\n\n    echo \"CPU usage:\"\n    top -b -n 1 -p $pid | tail -1\nelse\n    echo \"Agent is NOT running\"\n    exit 1\nfi\n</code></pre>"},{"location":"management/linux/#process-limits","title":"Process Limits","text":"<p>Configure resource limits:</p> <pre><code># /etc/security/limits.d/epmware.conf\nepmadmin soft nofile 65536\nepmadmin hard nofile 65536\nepmadmin soft nproc 32768\nepmadmin hard nproc 32768\nepmadmin soft memlock unlimited\nepmadmin hard memlock unlimited\n</code></pre>"},{"location":"management/linux/#log-management","title":"Log Management","text":""},{"location":"management/linux/#systemd-journal","title":"systemd Journal","text":"<p>View logs with journalctl:</p> <pre><code># View all agent logs\njournalctl -u epmware-agent\n\n# Follow logs in real-time\njournalctl -u epmware-agent -f\n\n# View logs since boot\njournalctl -u epmware-agent -b\n\n# View last 100 lines\njournalctl -u epmware-agent -n 100\n\n# Export logs\njournalctl -u epmware-agent &gt; agent-systemd.log\n</code></pre>"},{"location":"management/linux/#rsyslog-integration","title":"rsyslog Integration","text":"<p>Configure rsyslog for agent:</p> <pre><code># /etc/rsyslog.d/epmware-agent.conf\nif $programname == 'epmware-agent' then /var/log/epmware/agent.log\n&amp; stop\n</code></pre>"},{"location":"management/linux/#logrotate-configuration","title":"logrotate Configuration","text":"<p>Manage log rotation:</p> <pre><code># /etc/logrotate.d/epmware-agent\n/home/epmadmin/logs/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 644 epmadmin epmadmin\n    sharedscripts\n    postrotate\n        systemctl reload epmware-agent\n    endscript\n}\n</code></pre>"},{"location":"management/linux/#initd-script-legacy-systems","title":"Init.d Script (Legacy Systems)","text":"<p>For older Linux distributions:</p> <pre><code>#!/bin/bash\n# /etc/init.d/epmware-agent\n### BEGIN INIT INFO\n# Provides:          epmware-agent\n# Required-Start:    $network $syslog\n# Required-Stop:     $network $syslog\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: EPMware Agent\n# Description:       EPMware metadata deployment agent\n### END INIT INFO\n\nAGENT_USER=epmadmin\nAGENT_HOME=/home/$AGENT_USER\nAGENT_SCRIPT=$AGENT_HOME/ew_target_service.sh\nPID_FILE=/var/run/epmware-agent.pid\n\ncase \"$1\" in\n    start)\n        echo \"Starting EPMware Agent...\"\n        su - $AGENT_USER -c \"cd $AGENT_HOME &amp;&amp; nohup $AGENT_SCRIPT &gt; /dev/null 2&gt;&amp;1 &amp;\"\n        echo $! &gt; $PID_FILE\n        echo \"Agent started.\"\n        ;;\n    stop)\n        echo \"Stopping EPMware Agent...\"\n        if [ -f $PID_FILE ]; then\n            kill $(cat $PID_FILE)\n            rm $PID_FILE\n        fi\n        echo \"Agent stopped.\"\n        ;;\n    restart)\n        $0 stop\n        sleep 2\n        $0 start\n        ;;\n    status)\n        if [ -f $PID_FILE ] &amp;&amp; ps -p $(cat $PID_FILE) &gt; /dev/null; then\n            echo \"Agent is running (PID: $(cat $PID_FILE))\"\n        else\n            echo \"Agent is not running\"\n        fi\n        ;;\n    *)\n        echo \"Usage: $0 {start|stop|restart|status}\"\n        exit 1\n        ;;\nesac\nexit 0\n</code></pre>"},{"location":"management/linux/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"management/linux/#health-check-script","title":"Health Check Script","text":"<p>Automated health monitoring:</p> <pre><code>#!/bin/bash\n# health_check.sh\n\n# Configuration\nAGENT_USER=\"epmadmin\"\nAGENT_HOME=\"/home/$AGENT_USER\"\nALERT_EMAIL=\"admin@company.com\"\nMAX_MEMORY=2048  # MB\nMAX_CPU=80       # Percent\n\n# Check process\nif ! pgrep -f \"epmware-agent\" &gt; /dev/null; then\n    echo \"CRITICAL: Agent not running\" | mail -s \"EPMware Agent Down\" $ALERT_EMAIL\n    exit 2\nfi\n\n# Check memory usage\nPID=$(pgrep -f \"epmware-agent\")\nMEMORY=$(ps -o rss= -p $PID | awk '{print int($1/1024)}')\nif [ $MEMORY -gt $MAX_MEMORY ]; then\n    echo \"WARNING: High memory usage: ${MEMORY}MB\" | mail -s \"EPMware Agent Memory Alert\" $ALERT_EMAIL\nfi\n\n# Check CPU usage\nCPU=$(top -b -n 1 -p $PID | tail -1 | awk '{print int($9)}')\nif [ $CPU -gt $MAX_CPU ]; then\n    echo \"WARNING: High CPU usage: ${CPU}%\" | mail -s \"EPMware Agent CPU Alert\" $ALERT_EMAIL\nfi\n\n# Check last poll time\nLAST_POLL=$(tail -1 $AGENT_HOME/logs/agent-poll.log | awk '{print $1\" \"$2}')\nLAST_EPOCH=$(date -d \"$LAST_POLL\" +%s)\nNOW_EPOCH=$(date +%s)\nDIFF=$((NOW_EPOCH - LAST_EPOCH))\n\nif [ $DIFF -gt 300 ]; then  # More than 5 minutes\n    echo \"WARNING: No polling for $DIFF seconds\" | mail -s \"EPMware Agent Polling Alert\" $ALERT_EMAIL\nfi\n\necho \"Agent health check completed\"\n</code></pre>"},{"location":"management/linux/#integration-with-monitoring-systems","title":"Integration with Monitoring Systems","text":""},{"location":"management/linux/#nagiosicinga","title":"Nagios/Icinga","text":"<pre><code>#!/bin/bash\n# check_epmware_agent.sh - Nagios plugin\n\nSTATE_OK=0\nSTATE_WARNING=1\nSTATE_CRITICAL=2\nSTATE_UNKNOWN=3\n\n# Check if process is running\nif pgrep -f \"epmware-agent\" &gt; /dev/null; then\n    # Check last poll time\n    LAST_POLL=$(stat -c %Y /home/epmadmin/logs/agent-poll.log)\n    NOW=$(date +%s)\n    DIFF=$((NOW - LAST_POLL))\n\n    if [ $DIFF -lt 60 ]; then\n        echo \"OK - Agent running and polling\"\n        exit $STATE_OK\n    elif [ $DIFF -lt 300 ]; then\n        echo \"WARNING - Agent running but slow polling ($DIFF seconds)\"\n        exit $STATE_WARNING\n    else\n        echo \"CRITICAL - Agent running but not polling ($DIFF seconds)\"\n        exit $STATE_CRITICAL\n    fi\nelse\n    echo \"CRITICAL - Agent not running\"\n    exit $STATE_CRITICAL\nfi\n</code></pre>"},{"location":"management/linux/#zabbix","title":"Zabbix","text":"<pre><code>{\n    \"zabbix_export\": {\n        \"version\": \"5.0\",\n        \"templates\": [{\n            \"template\": \"EPMware Agent\",\n            \"name\": \"EPMware Agent Monitoring\",\n            \"items\": [{\n                \"name\": \"Agent process running\",\n                \"key\": \"proc.num[java,epmadmin,,epmware-agent]\",\n                \"value_type\": \"UNSIGNED\",\n                \"triggers\": [{\n                    \"expression\": \"{last()}=0\",\n                    \"name\": \"EPMware Agent is down\",\n                    \"priority\": \"HIGH\"\n                }]\n            }]\n        }]\n    }\n}\n</code></pre>"},{"location":"management/linux/#performance-tuning","title":"Performance Tuning","text":""},{"location":"management/linux/#jvm-options","title":"JVM Options","text":"<p>Optimize Java settings:</p> <pre><code># In ew_target_service.sh or systemd service\nJAVA_OPTS=\"-server\"\nJAVA_OPTS=\"$JAVA_OPTS -Xms1024m -Xmx2048m\"\nJAVA_OPTS=\"$JAVA_OPTS -XX:+UseG1GC\"\nJAVA_OPTS=\"$JAVA_OPTS -XX:MaxGCPauseMillis=200\"\nJAVA_OPTS=\"$JAVA_OPTS -XX:+HeapDumpOnOutOfMemoryError\"\nJAVA_OPTS=\"$JAVA_OPTS -XX:HeapDumpPath=/var/log/epmware\"\n\njava $JAVA_OPTS -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"management/linux/#system-tuning","title":"System Tuning","text":"<p>Kernel parameters for performance:</p> <pre><code># /etc/sysctl.d/epmware.conf\n# Network tuning\nnet.core.rmem_max = 134217728\nnet.core.wmem_max = 134217728\nnet.ipv4.tcp_rmem = 4096 87380 134217728\nnet.ipv4.tcp_wmem = 4096 65536 134217728\n\n# File handles\nfs.file-max = 2097152\n\n# Process limits\nkernel.pid_max = 4194304\n\n# Apply settings\nsudo sysctl -p /etc/sysctl.d/epmware.conf\n</code></pre>"},{"location":"management/linux/#troubleshooting","title":"Troubleshooting","text":""},{"location":"management/linux/#common-linux-issues","title":"Common Linux Issues","text":"Issue Diagnosis Solution Service won't start Check systemctl status Review journal logs Permission denied ls -la file permissions Fix ownership/permissions Cannot find Java which java Update PATH or JAVA_HOME Out of memory dmesg | grep -i memory Increase heap size or system RAM"},{"location":"management/linux/#debug-mode","title":"Debug Mode","text":"<p>Enable detailed debugging:</p> <pre><code># Add to systemd service or script\nexport LOGGING_LEVEL_ROOT=DEBUG\nexport LOGGING_LEVEL_COM_EPMWARE=TRACE\n\n# Or in service file\nEnvironment=\"LOGGING_LEVEL_ROOT=DEBUG\"\nEnvironment=\"LOGGING_LEVEL_COM_EPMWARE=TRACE\"\n</code></pre>"},{"location":"management/linux/#security-hardening","title":"Security Hardening","text":""},{"location":"management/linux/#selinux-configuration","title":"SELinux Configuration","text":"<p>For Red Hat/CentOS with SELinux:</p> <pre><code># Create custom policy\ncat &gt; epmware_agent.te &lt;&lt; EOF\nmodule epmware_agent 1.0;\n\nrequire {\n    type java_exec_t;\n    type user_home_t;\n    class file { read write execute };\n    class process { transition };\n}\n\nallow java_exec_t user_home_t:file { read write execute };\nEOF\n\n# Compile and install policy\ncheckmodule -M -m -o epmware_agent.mod epmware_agent.te\nsemodule_package -o epmware_agent.pp -m epmware_agent.mod\nsemodule -i epmware_agent.pp\n</code></pre>"},{"location":"management/linux/#apparmor-profile","title":"AppArmor Profile","text":"<p>For Ubuntu/Debian with AppArmor:</p> <pre><code># /etc/apparmor.d/epmware-agent\n#include &lt;tunables/global&gt;\n\n/home/epmadmin/epmware-agent.jar {\n  #include &lt;abstractions/base&gt;\n  #include &lt;abstractions/java&gt;\n\n  /home/epmadmin/ r,\n  /home/epmadmin/** rw,\n  /var/log/epmware/** rw,\n\n  network inet stream,\n  network inet6 stream,\n}\n</code></pre>"},{"location":"management/linux/#best-practices","title":"Best Practices","text":""},{"location":"management/linux/#linux-specific-recommendations","title":"Linux-Specific Recommendations","text":"<ol> <li>Use systemd - For modern distributions</li> <li>Monitor with journalctl - Centralized logging</li> <li>Configure limits - Set appropriate resource limits</li> <li>Regular updates - Keep system packages updated</li> <li>Security hardening - Implement SELinux/AppArmor</li> </ol>"},{"location":"management/linux/#maintenance-guidelines","title":"Maintenance Guidelines","text":"<ol> <li>Log rotation - Configure logrotate</li> <li>Resource monitoring - Track memory and CPU</li> <li>Backup configurations - Regular config backups</li> <li>Update documentation - Keep runbooks current</li> <li>Test recovery - Verify restart procedures</li> </ol>"},{"location":"management/linux/#next-steps","title":"Next Steps","text":"<ul> <li>Background Process Setup - Traditional process management</li> <li>Start and Stop Procedures - Operation procedures</li> <li>Agent Logs - Log management</li> <li>Monitoring - Monitoring setup</li> </ul>"},{"location":"management/linux/background-process/","title":"Background Process","text":""},{"location":"management/linux/background-process/#running-agent-as-background-process","title":"Running Agent as Background Process","text":"<p>This guide covers methods to run the EPMware Agent as a background process on Linux servers, ensuring continuous operation even after terminal sessions end.</p>"},{"location":"management/linux/background-process/#background-execution-methods","title":"Background Execution Methods","text":""},{"location":"management/linux/background-process/#method-1-using-ampersand","title":"Method 1: Using Ampersand (&amp;)","text":"<p>The simplest method to run the agent in the background:</p> <pre><code>cd /home/[username]\n./ew_target_service.sh &amp;\n</code></pre> <p>The <code>&amp;</code> symbol runs the process in the background, returning control to the terminal immediately.</p> <p>Advantages: - Simple and quick - No additional tools required</p> <p>Disadvantages: - Process may terminate when terminal session ends - No automatic restart on failure - Limited process management capabilities</p>"},{"location":"management/linux/background-process/#method-2-using-nohup","title":"Method 2: Using nohup","text":"<p>Run the agent immune to hangups (terminal closure):</p> <pre><code>cd /home/[username]\nnohup ./ew_target_service.sh &gt; /dev/null 2&gt;&amp;1 &amp;\n</code></pre> <p>Breaking down the command: - <code>nohup</code> - Prevents process termination on terminal logout - <code>&gt; /dev/null</code> - Redirects standard output to null device - <code>2&gt;&amp;1</code> - Redirects error output to standard output - <code>&amp;</code> - Runs in background</p> <p>Save output to log file: </p><pre><code>nohup ./ew_target_service.sh &gt; agent-nohup.log 2&gt;&amp;1 &amp;\necho $! &gt; agent.pid  # Save process ID for later reference\n</code></pre><p></p>"},{"location":"management/linux/background-process/#method-3-using-screen","title":"Method 3: Using screen","text":"<p>Screen provides a virtual terminal that persists after disconnection:</p> <p>Install screen (if needed): </p><pre><code># RHEL/CentOS\nsudo yum install screen\n\n# Ubuntu/Debian\nsudo apt-get install screen\n</code></pre><p></p> <p>Start agent in screen session: </p><pre><code># Create new screen session named 'epmware-agent'\nscreen -S epmware-agent\n\n# Inside screen session, start the agent\ncd /home/[username]\n./ew_target_service.sh\n\n# Detach from screen (Ctrl+A, then D)\n</code></pre><p></p> <p>Screen session management: </p><pre><code># List active sessions\nscreen -ls\n\n# Reattach to session\nscreen -r epmware-agent\n\n# Kill a session\nscreen -X -S epmware-agent quit\n</code></pre><p></p>"},{"location":"management/linux/background-process/#method-4-using-tmux","title":"Method 4: Using tmux","text":"<p>Tmux is a modern alternative to screen:</p> <p>Install tmux: </p><pre><code># RHEL/CentOS\nsudo yum install tmux\n\n# Ubuntu/Debian\nsudo apt-get install tmux\n</code></pre><p></p> <p>Start agent in tmux: </p><pre><code># Create new tmux session\ntmux new -s epmware-agent\n\n# Start the agent\ncd /home/[username]\n./ew_target_service.sh\n\n# Detach from tmux (Ctrl+B, then D)\n</code></pre><p></p> <p>Tmux session management: </p><pre><code># List sessions\ntmux ls\n\n# Attach to session\ntmux attach -t epmware-agent\n\n# Kill session\ntmux kill-session -t epmware-agent\n</code></pre><p></p>"},{"location":"management/linux/background-process/#system-service-configuration","title":"System Service Configuration","text":""},{"location":"management/linux/background-process/#creating-a-systemd-service-recommended","title":"Creating a systemd Service (Recommended)","text":"<p>For production environments, configure the agent as a systemd service:</p> <p>Create service file: </p><pre><code>sudo nano /etc/systemd/system/epmware-agent.service\n</code></pre><p></p> <p>Service file content: </p><pre><code>[Unit]\nDescription=EPMware Agent Service\nAfter=network.target\nStartLimitIntervalSec=0\n\n[Service]\nType=simple\nRestart=always\nRestartSec=30\nUser=[username]\nWorkingDirectory=/home/[username]\nExecStart=/usr/bin/java -jar /home/[username]/epmware-agent.jar --spring.config.name=agent\nStandardOutput=append:/home/[username]/logs/agent-service.log\nStandardError=append:/home/[username]/logs/agent-service-error.log\n\n# Environment variables\nEnvironment=\"JAVA_HOME=/usr/lib/jvm/java-1.8.0\"\nEnvironment=\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin\"\n\n# Resource limits\nLimitNOFILE=65536\nLimitNPROC=32768\n\n[Install]\nWantedBy=multi-user.target\n</code></pre><p></p> <p>Enable and start service: </p><pre><code># Reload systemd configuration\nsudo systemctl daemon-reload\n\n# Enable service to start on boot\nsudo systemctl enable epmware-agent\n\n# Start the service\nsudo systemctl start epmware-agent\n\n# Check service status\nsudo systemctl status epmware-agent\n</code></pre><p></p> <p>Service management commands: </p><pre><code># Stop service\nsudo systemctl stop epmware-agent\n\n# Restart service\nsudo systemctl restart epmware-agent\n\n# View logs\nsudo journalctl -u epmware-agent -f\n\n# Disable auto-start\nsudo systemctl disable epmware-agent\n</code></pre><p></p>"},{"location":"management/linux/background-process/#creating-an-initd-script-legacy-systems","title":"Creating an init.d Script (Legacy Systems)","text":"<p>For older systems without systemd:</p> <p>Create init script: </p><pre><code>sudo nano /etc/init.d/epmware-agent\n</code></pre><p></p> <p>Script content: </p><pre><code>#!/bin/bash\n# chkconfig: 2345 95 05\n# description: EPMware Agent Service\n\nAGENT_USER=\"[username]\"\nAGENT_HOME=\"/home/$AGENT_USER\"\nPIDFILE=\"$AGENT_HOME/agent.pid\"\nLOGFILE=\"$AGENT_HOME/logs/agent-init.log\"\n\nstart() {\n    if [ -f $PIDFILE ]; then\n        echo \"Agent already running (PID: $(cat $PIDFILE))\"\n        exit 1\n    fi\n\n    echo \"Starting EPMware Agent...\"\n    su - $AGENT_USER -c \"cd $AGENT_HOME &amp;&amp; nohup ./ew_target_service.sh &gt; $LOGFILE 2&gt;&amp;1 &amp; echo \\$! &gt; $PIDFILE\"\n    echo \"Agent started (PID: $(cat $PIDFILE))\"\n}\n\nstop() {\n    if [ ! -f $PIDFILE ]; then\n        echo \"Agent is not running\"\n        exit 1\n    fi\n\n    echo \"Stopping EPMware Agent...\"\n    kill $(cat $PIDFILE)\n    rm -f $PIDFILE\n    echo \"Agent stopped\"\n}\n\nstatus() {\n    if [ -f $PIDFILE ]; then\n        PID=$(cat $PIDFILE)\n        if ps -p $PID &gt; /dev/null; then\n            echo \"Agent is running (PID: $PID)\"\n        else\n            echo \"Agent is not running (stale PID file)\"\n            rm -f $PIDFILE\n        fi\n    else\n        echo \"Agent is not running\"\n    fi\n}\n\ncase \"$1\" in\n    start)\n        start\n        ;;\n    stop)\n        stop\n        ;;\n    restart)\n        stop\n        sleep 2\n        start\n        ;;\n    status)\n        status\n        ;;\n    *)\n        echo \"Usage: $0 {start|stop|restart|status}\"\n        exit 1\n        ;;\nesac\n</code></pre><p></p> <p>Make script executable and enable: </p><pre><code># Make executable\nsudo chmod +x /etc/init.d/epmware-agent\n\n# Add to startup\nsudo chkconfig --add epmware-agent\nsudo chkconfig epmware-agent on\n\n# Start service\nsudo service epmware-agent start\n</code></pre><p></p>"},{"location":"management/linux/background-process/#process-management","title":"Process Management","text":""},{"location":"management/linux/background-process/#finding-the-agent-process","title":"Finding the Agent Process","text":"<pre><code># Find by process name\nps -ef | grep -i epmware-agent | grep -v grep\n\n# Find by user\nps -u [username] | grep java\n\n# Get detailed information\nps aux | grep epmware-agent\n\n# Using pgrep\npgrep -f epmware-agent\n</code></pre>"},{"location":"management/linux/background-process/#monitoring-process-status","title":"Monitoring Process Status","text":"<pre><code># Check if process is running\nif pgrep -f epmware-agent &gt; /dev/null; then\n    echo \"Agent is running\"\nelse\n    echo \"Agent is not running\"\nfi\n\n# Monitor in real-time\ntop -p $(pgrep -f epmware-agent)\n\n# Check process tree\npstree -p $(pgrep -f epmware-agent)\n</code></pre>"},{"location":"management/linux/background-process/#managing-process-priority","title":"Managing Process Priority","text":"<pre><code># Run with lower priority (nice value 10)\nnice -n 10 ./ew_target_service.sh &amp;\n\n# Change priority of running process\nrenice -n 5 -p $(pgrep -f epmware-agent)\n\n# Run with real-time priority (requires root)\nsudo chrt -f 50 ./ew_target_service.sh\n</code></pre>"},{"location":"management/linux/background-process/#auto-restart-configuration","title":"Auto-Restart Configuration","text":""},{"location":"management/linux/background-process/#using-supervisor","title":"Using Supervisor","text":"<p>Install and configure Supervisor for process management:</p> <p>Install Supervisor: </p><pre><code># RHEL/CentOS\nsudo yum install supervisor\n\n# Ubuntu/Debian\nsudo apt-get install supervisor\n</code></pre><p></p> <p>Configure agent in Supervisor: </p><pre><code># /etc/supervisor/conf.d/epmware-agent.conf\n[program:epmware-agent]\ncommand=/home/[username]/ew_target_service.sh\ndirectory=/home/[username]\nuser=[username]\nautostart=true\nautorestart=true\nstartsecs=10\nstartretries=3\nstdout_logfile=/home/[username]/logs/agent-supervisor.log\nstderr_logfile=/home/[username]/logs/agent-supervisor-error.log\nenvironment=JAVA_HOME=\"/usr/lib/jvm/java-1.8.0\",PATH=\"/usr/bin:/usr/local/bin\"\n</code></pre><p></p> <p>Manage with Supervisor: </p><pre><code># Reload configuration\nsudo supervisorctl reread\nsudo supervisorctl update\n\n# Start/stop/restart\nsudo supervisorctl start epmware-agent\nsudo supervisorctl stop epmware-agent\nsudo supervisorctl restart epmware-agent\n\n# Check status\nsudo supervisorctl status epmware-agent\n</code></pre><p></p>"},{"location":"management/linux/background-process/#using-a-watchdog-script","title":"Using a Watchdog Script","text":"<p>Create a custom watchdog to monitor and restart the agent:</p> <pre><code>#!/bin/bash\n# /home/[username]/agent-watchdog.sh\n\nAGENT_HOME=\"/home/[username]\"\nPIDFILE=\"$AGENT_HOME/agent.pid\"\nLOGFILE=\"$AGENT_HOME/logs/watchdog.log\"\n\nwhile true; do\n    if [ -f $PIDFILE ]; then\n        PID=$(cat $PIDFILE)\n        if ! ps -p $PID &gt; /dev/null; then\n            echo \"$(date): Agent died, restarting...\" &gt;&gt; $LOGFILE\n            cd $AGENT_HOME\n            ./ew_target_service.sh &amp;\n            echo $! &gt; $PIDFILE\n        fi\n    else\n        echo \"$(date): No PID file, starting agent...\" &gt;&gt; $LOGFILE\n        cd $AGENT_HOME\n        ./ew_target_service.sh &amp;\n        echo $! &gt; $PIDFILE\n    fi\n    sleep 60\ndone\n</code></pre> <p>Run watchdog in background: </p><pre><code>nohup ./agent-watchdog.sh &gt; /dev/null 2&gt;&amp;1 &amp;\n</code></pre><p></p>"},{"location":"management/linux/background-process/#resource-limits-and-tuning","title":"Resource Limits and Tuning","text":""},{"location":"management/linux/background-process/#setting-resource-limits","title":"Setting Resource Limits","text":"<p>Configure system limits for the agent process:</p> <p>Edit limits configuration: </p><pre><code># /etc/security/limits.d/epmware-agent.conf\n[username] soft nofile 65536\n[username] hard nofile 65536\n[username] soft nproc 32768\n[username] hard nproc 32768\n[username] soft memlock unlimited\n[username] hard memlock unlimited\n</code></pre><p></p>"},{"location":"management/linux/background-process/#jvm-tuning-for-background-operation","title":"JVM Tuning for Background Operation","text":"<p>Optimize Java settings in the service script:</p> <pre><code># Modified ew_target_service.sh\nJAVA_OPTS=\"-Xms512m -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=100\"\njava $JAVA_OPTS -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"management/linux/background-process/#troubleshooting-background-processes","title":"Troubleshooting Background Processes","text":""},{"location":"management/linux/background-process/#process-wont-stay-running","title":"Process Won't Stay Running","text":"<ol> <li> <p>Check for errors in logs: </p><pre><code>tail -100 logs/agent.log\n</code></pre><p></p> </li> <li> <p>Verify Java is in PATH: </p><pre><code>which java\necho $JAVA_HOME\n</code></pre><p></p> </li> <li> <p>Check file permissions: </p><pre><code>ls -la ew_target_service.sh\nls -la epmware-agent.jar\n</code></pre><p></p> </li> </ol>"},{"location":"management/linux/background-process/#process-consumes-too-many-resources","title":"Process Consumes Too Many Resources","text":"<ol> <li> <p>Limit CPU usage: </p><pre><code>cpulimit -p $(pgrep -f epmware-agent) -l 50\n</code></pre><p></p> </li> <li> <p>Limit memory in service file: </p><pre><code># Add to systemd service\nMemoryLimit=2G\n</code></pre><p></p> </li> </ol>"},{"location":"management/linux/background-process/#cant-find-running-process","title":"Can't Find Running Process","text":"<pre><code># Check all Java processes\njps -l\n\n# Check by port (if agent uses specific port)\nnetstat -tlnp | grep [port]\n\n# Check system logs\njournalctl -xe | grep epmware\n</code></pre>"},{"location":"management/linux/background-process/#best-practices","title":"Best Practices","text":"<ol> <li>Always use a service manager (systemd, init.d, or Supervisor) for production</li> <li>Configure automatic restart on failure</li> <li>Set appropriate resource limits to prevent system impact</li> <li>Monitor process health with external tools</li> <li>Maintain separate log files for service and application</li> <li>Document your configuration for team reference</li> <li>Test failover scenarios regularly</li> </ol>"},{"location":"management/linux/background-process/#related-topics","title":"Related Topics","text":"<ul> <li>Start and Stop Procedures</li> <li>Agent Installation</li> <li>Monitoring</li> <li>Troubleshooting</li> </ul>"},{"location":"management/linux/start-stop/","title":"Start and Stop","text":""},{"location":"management/linux/start-stop/#start-and-stop-procedures","title":"Start and Stop Procedures","text":"<p>This guide provides comprehensive procedures for starting and stopping the EPMware Agent on both Linux and Windows servers.</p>"},{"location":"management/linux/start-stop/#linux-server-procedures","title":"Linux Server Procedures","text":""},{"location":"management/linux/start-stop/#starting-the-agent-on-linux","title":"Starting the Agent on Linux","text":""},{"location":"management/linux/start-stop/#method-1-direct-execution","title":"Method 1: Direct Execution","text":"<p>Log in as the user under which the agent is installed:</p> <pre><code>cd /home/[username]\n./ew_target_service.sh &amp;\n</code></pre> <p>The <code>&amp;</code> symbol runs the process in the background.</p>"},{"location":"management/linux/start-stop/#method-2-using-nohup","title":"Method 2: Using nohup","text":"<p>For persistent execution after logout:</p> <pre><code>cd /home/[username]\nnohup ./ew_target_service.sh &gt; agent-startup.log 2&gt;&amp;1 &amp;\necho $! &gt; agent.pid\n</code></pre>"},{"location":"management/linux/start-stop/#method-3-using-systemd-recommended","title":"Method 3: Using systemd (Recommended)","text":"<p>If configured as a systemd service:</p> <pre><code>sudo systemctl start epmware-agent\n\n# Verify startup\nsudo systemctl status epmware-agent\n</code></pre>"},{"location":"management/linux/start-stop/#method-4-using-initd","title":"Method 4: Using init.d","text":"<p>For systems with init.d configuration:</p> <pre><code>sudo service epmware-agent start\n\n# Or directly\nsudo /etc/init.d/epmware-agent start\n</code></pre>"},{"location":"management/linux/start-stop/#stopping-the-agent-on-linux","title":"Stopping the Agent on Linux","text":""},{"location":"management/linux/start-stop/#method-1-using-process-id","title":"Method 1: Using Process ID","text":"<p>Find and terminate the agent process:</p> <pre><code># Find the process\nps -ef | grep -i epmware-agent | grep $(whoami) | grep -v grep\n\n# Note the process ID (second column), then kill it\nkill -9 [process_id]\n\n# Or in one command\nkill -9 $(ps -ef | grep -i epmware-agent | grep $(whoami) | grep -v grep | awk '{print $2}')\n</code></pre>"},{"location":"management/linux/start-stop/#method-2-using-saved-pid-file","title":"Method 2: Using Saved PID File","text":"<p>If you saved the PID during startup:</p> <pre><code># Kill using saved PID\nkill -9 $(cat agent.pid)\n\n# Remove PID file\nrm agent.pid\n</code></pre>"},{"location":"management/linux/start-stop/#method-3-using-systemd","title":"Method 3: Using systemd","text":"<pre><code>sudo systemctl stop epmware-agent\n\n# Verify shutdown\nsudo systemctl status epmware-agent\n</code></pre>"},{"location":"management/linux/start-stop/#method-4-using-initd_1","title":"Method 4: Using init.d","text":"<pre><code>sudo service epmware-agent stop\n\n# Or directly\nsudo /etc/init.d/epmware-agent stop\n</code></pre>"},{"location":"management/linux/start-stop/#restarting-the-agent-on-linux","title":"Restarting the Agent on Linux","text":""},{"location":"management/linux/start-stop/#quick-restart","title":"Quick Restart","text":"<pre><code># Find and kill existing process\nkill -9 $(pgrep -f epmware-agent)\n\n# Wait for process to terminate\nsleep 5\n\n# Start new instance\ncd /home/[username]\nnohup ./ew_target_service.sh &gt; agent.log 2&gt;&amp;1 &amp;\n</code></pre>"},{"location":"management/linux/start-stop/#using-service-manager","title":"Using Service Manager","text":"<pre><code># systemd\nsudo systemctl restart epmware-agent\n\n# init.d\nsudo service epmware-agent restart\n</code></pre>"},{"location":"management/linux/start-stop/#windows-server-procedures","title":"Windows Server Procedures","text":""},{"location":"management/linux/start-stop/#starting-the-agent-on-windows","title":"Starting the Agent on Windows","text":""},{"location":"management/linux/start-stop/#method-1-using-task-scheduler-recommended","title":"Method 1: Using Task Scheduler (Recommended)","text":"<ol> <li>Open Windows Task Scheduler</li> <li>Locate the task \"EPMWARE TARGET AGENT SERVICE\"</li> <li>Check the Status column:</li> <li>If \"Ready\", right-click and select Run</li> <li>If \"Running\", the agent is already active</li> </ol>"},{"location":"management/linux/start-stop/#method-2-using-command-line","title":"Method 2: Using Command Line","text":"<p>Open Command Prompt as Administrator:</p> <pre><code># Start the scheduled task\nschtasks /Run /TN \"EPMWARE TARGET AGENT SERVICE\"\n</code></pre>"},{"location":"management/linux/start-stop/#method-3-using-cygwin-terminal","title":"Method 3: Using Cygwin Terminal","text":"<pre><code># Navigate to agent directory\ncd /home/Administrator\n\n# Start the service\n./ew_target_service.sh\n</code></pre>"},{"location":"management/linux/start-stop/#stopping-the-agent-on-windows","title":"Stopping the Agent on Windows","text":""},{"location":"management/linux/start-stop/#method-1-using-task-manager","title":"Method 1: Using Task Manager","text":"<ol> <li>Open Windows Task Manager (Ctrl+Shift+Esc)</li> <li>Go to the Details tab</li> <li>Find java.exe process</li> <li>Check the Command Line column for \"epmware-agent.jar\"</li> <li>Right-click the process and select End Task</li> </ol>"},{"location":"management/linux/start-stop/#method-2-using-powershell","title":"Method 2: Using PowerShell","text":"<p>Run PowerShell as Administrator:</p> <pre><code># Find and stop the agent process\nGet-Process java | Where-Object {$_.CommandLine -like \"*epmware-agent.jar*\"} | Stop-Process -Force\n</code></pre>"},{"location":"management/linux/start-stop/#method-3-using-command-prompt","title":"Method 3: Using Command Prompt","text":"<pre><code># Find the process\nwmic process where \"commandline like '%epmware-agent.jar%'\" get processid\n\n# Kill the process (replace PID with actual process ID)\ntaskkill /F /PID [PID]\n</code></pre>"},{"location":"management/linux/start-stop/#method-4-stop-scheduled-task","title":"Method 4: Stop Scheduled Task","text":"<pre><code># Stop the scheduled task (doesn't kill the Java process)\nschtasks /End /TN \"EPMWARE TARGET AGENT SERVICE\"\n</code></pre> <p>Important</p> <p>Stopping the scheduled task does NOT automatically terminate the Java process. You must manually kill the Java process before restarting the agent.</p>"},{"location":"management/linux/start-stop/#restarting-the-agent-on-windows","title":"Restarting the Agent on Windows","text":"<p>Complete restart procedure:</p> <pre><code># 1. Kill existing Java process\nGet-Process java | Where-Object {$_.CommandLine -like \"*epmware-agent.jar*\"} | Stop-Process -Force\n\n# 2. Wait for process to terminate\nStart-Sleep -Seconds 5\n\n# 3. Optional: Clean up old log files\nRemove-Item \"C:\\cygwin64\\home\\Administrator\\logs\\agent*.log\" -Force\n\n# 4. Start the scheduled task\nschtasks /Run /TN \"EPMWARE TARGET AGENT SERVICE\"\n</code></pre>"},{"location":"management/linux/start-stop/#verification-procedures","title":"Verification Procedures","text":""},{"location":"management/linux/start-stop/#verify-agent-is-running","title":"Verify Agent is Running","text":""},{"location":"management/linux/start-stop/#linux","title":"Linux","text":"<pre><code># Check process\nps -ef | grep -i epmware-agent | grep -v grep\n\n# Check latest log entries\ntail -f ~/logs/agent-poll.log\n\n# Check service status (if using systemd)\nsystemctl status epmware-agent\n</code></pre>"},{"location":"management/linux/start-stop/#windows","title":"Windows","text":"<pre><code># Check process\nGet-Process java | Where-Object {$_.CommandLine -like \"*epmware-agent.jar*\"}\n\n# Check scheduled task status\nschtasks /Query /TN \"EPMWARE TARGET AGENT SERVICE\" /V\n\n# Check latest log entries\nGet-Content \"C:\\cygwin64\\home\\Administrator\\logs\\agent-poll.log\" -Tail 10 -Wait\n</code></pre>"},{"location":"management/linux/start-stop/#verify-agent-connectivity","title":"Verify Agent Connectivity","text":"<p>After starting the agent, verify it's communicating with EPMware:</p> <ol> <li> <p>Check poll log for recent entries: </p><pre><code>tail -10 logs/agent-poll.log\n</code></pre>    Should show entries every 30 seconds (or configured interval)<p></p> </li> <li> <p>Check main log for errors: </p><pre><code>grep ERROR logs/agent.log | tail -10\n</code></pre><p></p> </li> <li> <p>Test from EPMware UI:</p> </li> <li>Navigate to Infrastructure \u2192 Servers</li> <li>Right-click the server</li> <li>Select \"Test Connection\"</li> </ol>"},{"location":"management/linux/start-stop/#automated-startstop-scripts","title":"Automated Start/Stop Scripts","text":""},{"location":"management/linux/start-stop/#linux-automation-script","title":"Linux Automation Script","text":"<p>Create <code>agent-control.sh</code>:</p> <pre><code>#!/bin/bash\n\nAGENT_HOME=\"/home/[username]\"\nPIDFILE=\"$AGENT_HOME/agent.pid\"\nLOGFILE=\"$AGENT_HOME/logs/agent.log\"\n\nstart() {\n    if [ -f $PIDFILE ] &amp;&amp; ps -p $(cat $PIDFILE) &gt; /dev/null 2&gt;&amp;1; then\n        echo \"Agent already running (PID: $(cat $PIDFILE))\"\n        return 1\n    fi\n\n    echo \"Starting EPMware Agent...\"\n    cd $AGENT_HOME\n    nohup ./ew_target_service.sh &gt; $LOGFILE 2&gt;&amp;1 &amp;\n    echo $! &gt; $PIDFILE\n    echo \"Agent started (PID: $(cat $PIDFILE))\"\n}\n\nstop() {\n    if [ ! -f $PIDFILE ]; then\n        echo \"Agent is not running (no PID file)\"\n        return 1\n    fi\n\n    PID=$(cat $PIDFILE)\n    echo \"Stopping EPMware Agent (PID: $PID)...\"\n    kill -9 $PID\n    rm -f $PIDFILE\n    echo \"Agent stopped\"\n}\n\nrestart() {\n    stop\n    sleep 5\n    start\n}\n\nstatus() {\n    if [ -f $PIDFILE ] &amp;&amp; ps -p $(cat $PIDFILE) &gt; /dev/null 2&gt;&amp;1; then\n        echo \"Agent is running (PID: $(cat $PIDFILE))\"\n    else\n        echo \"Agent is not running\"\n    fi\n}\n\ncase \"$1\" in\n    start|stop|restart|status)\n        $1\n        ;;\n    *)\n        echo \"Usage: $0 {start|stop|restart|status}\"\n        exit 1\n        ;;\nesac\n</code></pre>"},{"location":"management/linux/start-stop/#windows-automation-script","title":"Windows Automation Script","text":"<p>Create <code>Agent-Control.ps1</code>:</p> <pre><code>param(\n    [Parameter(Mandatory=$true)]\n    [ValidateSet(\"Start\",\"Stop\",\"Restart\",\"Status\")]\n    [string]$Action\n)\n\n$AgentPath = \"C:\\cygwin64\\home\\Administrator\"\n$TaskName = \"EPMWARE TARGET AGENT SERVICE\"\n\nfunction Start-Agent {\n    $process = Get-Process java -ErrorAction SilentlyContinue | \n        Where-Object {$_.CommandLine -like \"*epmware-agent.jar*\"}\n\n    if ($process) {\n        Write-Host \"Agent already running (PID: $($process.Id))\" -ForegroundColor Yellow\n        return\n    }\n\n    Write-Host \"Starting EPMware Agent...\" -ForegroundColor Green\n    Start-ScheduledTask -TaskName $TaskName\n    Start-Sleep -Seconds 3\n\n    $process = Get-Process java -ErrorAction SilentlyContinue | \n        Where-Object {$_.CommandLine -like \"*epmware-agent.jar*\"}\n\n    if ($process) {\n        Write-Host \"Agent started successfully (PID: $($process.Id))\" -ForegroundColor Green\n    } else {\n        Write-Host \"Failed to start agent\" -ForegroundColor Red\n    }\n}\n\nfunction Stop-Agent {\n    $process = Get-Process java -ErrorAction SilentlyContinue | \n        Where-Object {$_.CommandLine -like \"*epmware-agent.jar*\"}\n\n    if (-not $process) {\n        Write-Host \"Agent is not running\" -ForegroundColor Yellow\n        return\n    }\n\n    Write-Host \"Stopping EPMware Agent (PID: $($process.Id))...\" -ForegroundColor Yellow\n    $process | Stop-Process -Force\n    Write-Host \"Agent stopped\" -ForegroundColor Green\n}\n\nfunction Restart-Agent {\n    Stop-Agent\n    Start-Sleep -Seconds 5\n    Start-Agent\n}\n\nfunction Get-AgentStatus {\n    $process = Get-Process java -ErrorAction SilentlyContinue | \n        Where-Object {$_.CommandLine -like \"*epmware-agent.jar*\"}\n\n    if ($process) {\n        Write-Host \"Agent is running\" -ForegroundColor Green\n        Write-Host \"  PID: $($process.Id)\"\n        Write-Host \"  CPU: $($process.CPU)\"\n        Write-Host \"  Memory: $([math]::Round($process.WS/1MB, 2)) MB\"\n    } else {\n        Write-Host \"Agent is not running\" -ForegroundColor Red\n    }\n\n    $task = Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue\n    if ($task) {\n        Write-Host \"Scheduled Task Status: $($task.State)\"\n    }\n}\n\n# Execute requested action\nswitch ($Action) {\n    \"Start\"   { Start-Agent }\n    \"Stop\"    { Stop-Agent }\n    \"Restart\" { Restart-Agent }\n    \"Status\"  { Get-AgentStatus }\n}\n</code></pre>"},{"location":"management/linux/start-stop/#troubleshooting-startstop-issues","title":"Troubleshooting Start/Stop Issues","text":""},{"location":"management/linux/start-stop/#agent-wont-start","title":"Agent Won't Start","text":"<ol> <li> <p>Check Java installation: </p><pre><code>java -version\n</code></pre><p></p> </li> <li> <p>Verify file permissions: </p><pre><code>ls -la ew_target_service.sh\nchmod +x ew_target_service.sh\n</code></pre><p></p> </li> <li> <p>Check configuration: </p><pre><code>cat agent.properties\n</code></pre><p></p> </li> <li> <p>Review error logs: </p><pre><code>tail -100 logs/agent.log\n</code></pre><p></p> </li> </ol>"},{"location":"management/linux/start-stop/#agent-wont-stop","title":"Agent Won't Stop","text":"<ol> <li> <p>Force kill if necessary: </p><pre><code>kill -9 $(pgrep -f epmware-agent)\n</code></pre><p></p> </li> <li> <p>Check for zombie processes: </p><pre><code>ps aux | grep defunct\n</code></pre><p></p> </li> <li> <p>Clear stale PID files: </p><pre><code>rm -f agent.pid\n</code></pre><p></p> </li> </ol>"},{"location":"management/linux/start-stop/#agent-starts-but-immediately-stops","title":"Agent Starts but Immediately Stops","text":"<ol> <li>Check for port conflicts</li> <li>Verify memory availability</li> <li>Review startup logs for errors</li> <li>Confirm network connectivity to EPMware server</li> </ol>"},{"location":"management/linux/start-stop/#best-practices","title":"Best Practices","text":"<ol> <li>Always verify the agent has stopped before starting a new instance</li> <li>Clean up log files periodically to prevent disk space issues</li> <li>Use service managers (systemd, Task Scheduler) for production environments</li> <li>Document procedures specific to your environment</li> <li>Test procedures regularly, especially after system updates</li> <li>Monitor agent status after any start/stop operation</li> </ol>"},{"location":"management/linux/start-stop/#related-topics","title":"Related Topics","text":"<ul> <li>Background Process Management</li> <li>Agent Monitoring</li> <li>Troubleshooting</li> <li>Agent Installation</li> </ul>"},{"location":"management/windows/","title":"Windows Services Management","text":""},{"location":"management/windows/#windows-services-management","title":"Windows Services Management","text":"<p>This section covers managing the EPMware Agent on Windows servers, including scheduled tasks, service management, and Windows-specific considerations.</p>"},{"location":"management/windows/#windows-management-options","title":"Windows Management Options","text":"<p>The EPMware Agent can run on Windows as:</p> <ul> <li> <p> Scheduled Task   Recommended approach using Task Scheduler</p> </li> <li> <p> Windows Service   Alternative using third-party tools</p> </li> <li> <p> Manual Process   Direct execution for testing</p> </li> </ul>"},{"location":"management/windows/#management-overview","title":"Management Overview","text":""},{"location":"management/windows/#scheduled-task-recommended","title":"Scheduled Task (Recommended)","text":"<p>Windows Task Scheduler provides: - Automatic startup on boot - Restart on failure - Run without login - Built-in Windows feature</p>"},{"location":"management/windows/#windows-service-alternative","title":"Windows Service (Alternative)","text":"<p>Using tools like NSSM or srvany: - True Windows service - Service dependencies - Recovery options - Requires additional software</p>"},{"location":"management/windows/#manual-execution","title":"Manual Execution","text":"<p>For testing and troubleshooting: - Direct control - Console output visible - Easy debugging - Not for production</p>"},{"location":"management/windows/#quick-management-commands","title":"Quick Management Commands","text":""},{"location":"management/windows/#check-agent-status","title":"Check Agent Status","text":"<pre><code># Check if running\nGet-Process | Where-Object {$_.ProcessName -like \"*java*\" -and $_.CommandLine -like \"*epmware-agent*\"}\n\n# Check scheduled task\nGet-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n# Check recent logs\nGet-Content C:\\cygwin64\\home\\Administrator\\logs\\agent.log -Tail 20\n</code></pre>"},{"location":"management/windows/#start-agent","title":"Start Agent","text":"<pre><code># Via Task Scheduler\nStart-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n# Via Cygwin\nC:\\cygwin64\\bin\\bash.exe -l -c \"cd ~ &amp;&amp; ./ew_target_service.sh &amp;\"\n</code></pre>"},{"location":"management/windows/#stop-agent","title":"Stop Agent","text":"<pre><code># Stop scheduled task\nStop-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n# Kill Java process\nGet-Process | Where-Object {$_.CommandLine -like \"*epmware-agent*\"} | Stop-Process -Force\n</code></pre>"},{"location":"management/windows/#windows-specific-configuration","title":"Windows-Specific Configuration","text":""},{"location":"management/windows/#cygwin-integration","title":"Cygwin Integration","text":"<p>The agent requires Cygwin for shell script execution:</p> <pre><code># Cygwin paths\nHome Directory: C:\\cygwin64\\home\\[username]\nBash Location: C:\\cygwin64\\bin\\bash.exe\nAgent Location: /home/[username] (Cygwin path)\n</code></pre>"},{"location":"management/windows/#path-considerations","title":"Path Considerations","text":"<p>Windows path formats in configuration:</p> <pre><code># agent.properties - Windows paths need escaping\nagent.root.dir=C:\\\\\\\\cygwin64\\\\\\\\home\\\\\\\\Administrator\n\n# Or use forward slashes\nagent.root.dir=C:/cygwin64/home/Administrator\n</code></pre>"},{"location":"management/windows/#user-account-setup","title":"User Account Setup","text":"<p>Configure the service account:</p> <pre><code># Create local user\nNew-LocalUser -Name \"svc_epmware\" -Password (ConvertTo-SecureString \"Password123!\" -AsPlainText -Force)\n\n# Add to appropriate groups\nAdd-LocalGroupMember -Group \"Administrators\" -Member \"svc_epmware\"\n\n# Grant logon as batch job\n$policy = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name\nsecedit /export /cfg c:\\temp\\export.cfg\n# Edit file to add user to SeBatchLogonRight\nsecedit /import /cfg c:\\temp\\export.cfg /db secedit.sdb\n</code></pre>"},{"location":"management/windows/#task-scheduler-configuration","title":"Task Scheduler Configuration","text":""},{"location":"management/windows/#creating-the-scheduled-task","title":"Creating the Scheduled Task","text":"<p>PowerShell script to create task:</p> <pre><code># Create scheduled task via PowerShell\n$taskName = \"EPMWARE TARGET AGENT SERVICE\"\n$description = \"EPMware Agent for metadata deployment\"\n$username = \"DOMAIN\\svc_epmware\"\n\n# Create action\n$action = New-ScheduledTaskAction `\n    -Execute \"C:\\cygwin64\\bin\\bash.exe\" `\n    -Argument '-l -c \"./ew_target_service.sh\"' `\n    -WorkingDirectory \"C:\\cygwin64\\bin\"\n\n# Create trigger (at startup)\n$trigger = New-ScheduledTaskTrigger -AtStartup\n\n# Create settings\n$settings = New-ScheduledTaskSettingsSet `\n    -AllowStartIfOnBatteries `\n    -DontStopIfGoingOnBatteries `\n    -RestartCount 3 `\n    -RestartInterval (New-TimeSpan -Minutes 1)\n\n# Register task\nRegister-ScheduledTask `\n    -TaskName $taskName `\n    -Description $description `\n    -Action $action `\n    -Trigger $trigger `\n    -Settings $settings `\n    -User $username `\n    -Password \"Password123!\" `\n    -RunLevel Highest\n</code></pre>"},{"location":"management/windows/#task-configuration-details","title":"Task Configuration Details","text":"<p>Key settings for the scheduled task:</p> Setting Recommended Value Purpose Run whether logged on Yes Ensures continuous operation Run with highest privileges Yes Required for some operations Start at startup Yes Automatic start on reboot Restart on failure 3 times Automatic recovery Restart interval 1 minute Quick recovery"},{"location":"management/windows/#service-monitoring","title":"Service Monitoring","text":""},{"location":"management/windows/#windows-event-log-integration","title":"Windows Event Log Integration","text":"<p>Monitor agent through Event Viewer:</p> <pre><code># Create custom event log source\nNew-EventLog -LogName Application -Source \"EPMware Agent\"\n\n# Write events from agent\nWrite-EventLog -LogName Application -Source \"EPMware Agent\" `\n    -EntryType Information -EventId 1000 -Message \"Agent started\"\n</code></pre>"},{"location":"management/windows/#performance-monitoring","title":"Performance Monitoring","text":"<p>Use Windows Performance Monitor:</p> <pre><code># Get Java process metrics\nGet-Counter \"\\Process(java*)\\% Processor Time\"\nGet-Counter \"\\Process(java*)\\Working Set\"\nGet-Counter \"\\Process(java*)\\Handle Count\"\n</code></pre>"},{"location":"management/windows/#resource-usage-tracking","title":"Resource Usage Tracking","text":"<p>Monitor agent resource consumption:</p> <pre><code># Resource usage script\n$process = Get-Process | Where {$_.ProcessName -eq \"java\" -and $_.CommandLine -like \"*epmware*\"}\nif ($process) {\n    Write-Host \"CPU: $($process.CPU) seconds\"\n    Write-Host \"Memory: $([math]::Round($process.WS/1MB, 2)) MB\"\n    Write-Host \"Handles: $($process.Handles)\"\n    Write-Host \"Threads: $($process.Threads.Count)\"\n}\n</code></pre>"},{"location":"management/windows/#windows-firewall-configuration","title":"Windows Firewall Configuration","text":""},{"location":"management/windows/#outbound-rules","title":"Outbound Rules","text":"<p>Configure Windows Firewall for agent:</p> <pre><code># Allow outbound HTTPS\nNew-NetFirewallRule `\n    -DisplayName \"EPMware Agent HTTPS\" `\n    -Direction Outbound `\n    -Protocol TCP `\n    -RemotePort 443 `\n    -Action Allow `\n    -Program \"C:\\Program Files\\Java\\jdk1.8.0_291\\bin\\java.exe\"\n\n# Allow outbound to specific server\nNew-NetFirewallRule `\n    -DisplayName \"EPMware Agent Server\" `\n    -Direction Outbound `\n    -Protocol TCP `\n    -RemoteAddress \"192.168.1.100\" `\n    -RemotePort 8080 `\n    -Action Allow\n</code></pre>"},{"location":"management/windows/#troubleshooting-windows-issues","title":"Troubleshooting Windows Issues","text":""},{"location":"management/windows/#common-windows-problems","title":"Common Windows Problems","text":"Issue Symptoms Solution Cygwin not found Scripts fail Verify Cygwin installation path Permission denied Cannot start service Check user rights and file permissions Path issues Java not found Fix environment variables Task not running Agent doesn't start Check task scheduler history"},{"location":"management/windows/#windows-diagnostic-commands","title":"Windows Diagnostic Commands","text":"<pre><code># Check Cygwin installation\nTest-Path \"C:\\cygwin64\\bin\\bash.exe\"\n\n# Verify Java\njava -version\n\n# Check scheduled task details\nGet-ScheduledTaskInfo -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n# Review task history\nGet-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-TaskScheduler/Operational'; ID=100,102,103}\n</code></pre>"},{"location":"management/windows/#event-viewer-analysis","title":"Event Viewer Analysis","text":"<p>Check these Windows logs: - Application Log - Java errors - System Log - Service failures - Task Scheduler Log - Task execution</p>"},{"location":"management/windows/#security-considerations","title":"Security Considerations","text":""},{"location":"management/windows/#user-rights-assignment","title":"User Rights Assignment","text":"<p>Required permissions for service account:</p> <pre><code># Required user rights\n- Log on as a batch job\n- Log on as a service (if running as service)\n- Access this computer from network\n- Allow log on locally\n\n# Check current rights\nsecedit /export /cfg c:\\temp\\rights.cfg\ntype c:\\temp\\rights.cfg | findstr \"svc_epmware\"\n</code></pre>"},{"location":"management/windows/#file-system-permissions","title":"File System Permissions","text":"<p>Set appropriate NTFS permissions:</p> <pre><code># Set permissions on agent directory\n$acl = Get-Acl \"C:\\cygwin64\\home\\Administrator\"\n$permission = \"DOMAIN\\svc_epmware\",\"FullControl\",\"ContainerInherit,ObjectInherit\",\"None\",\"Allow\"\n$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission\n$acl.SetAccessRule($accessRule)\nSet-Acl \"C:\\cygwin64\\home\\Administrator\" $acl\n</code></pre>"},{"location":"management/windows/#maintenance-scripts","title":"Maintenance Scripts","text":""},{"location":"management/windows/#daily-maintenance","title":"Daily Maintenance","text":"<p>PowerShell maintenance script:</p> <pre><code># daily_maintenance.ps1\nparam(\n    [string]$AgentPath = \"C:\\cygwin64\\home\\Administrator\"\n)\n\n# Check agent status\n$running = Get-Process | Where {$_.ProcessName -eq \"java\" -and $_.CommandLine -like \"*epmware*\"}\nif (!$running) {\n    Write-Warning \"Agent not running!\"\n    Start-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n}\n\n# Clean old logs\nGet-ChildItem \"$AgentPath\\logs\" -Filter \"*.log\" | \n    Where {$_.LastWriteTime -lt (Get-Date).AddDays(-30)} | \n    Remove-Item\n\n# Check disk space\n$disk = Get-PSDrive C\nif ($disk.Free -lt 1GB) {\n    Write-Warning \"Low disk space: $([math]::Round($disk.Free/1GB, 2)) GB free\"\n}\n</code></pre>"},{"location":"management/windows/#health-check-script","title":"Health Check Script","text":"<pre><code># health_check.ps1\n$status = @{\n    Running = $false\n    LastPoll = $null\n    Errors = 0\n    DiskSpace = 0\n}\n\n# Check process\n$process = Get-Process | Where {$_.CommandLine -like \"*epmware-agent*\"} -ErrorAction SilentlyContinue\n$status.Running = $null -ne $process\n\n# Check last poll\n$lastLog = Get-Content \"C:\\cygwin64\\home\\Administrator\\logs\\agent-poll.log\" -Tail 1\nif ($lastLog -match '(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})') {\n    $status.LastPoll = [DateTime]::Parse($matches[1])\n}\n\n# Count recent errors\n$errors = Get-Content \"C:\\cygwin64\\home\\Administrator\\logs\\agent.log\" -Tail 100 | \n    Select-String \"ERROR\" | Measure-Object\n$status.Errors = $errors.Count\n\n# Check disk space\n$disk = Get-PSDrive C\n$status.DiskSpace = [math]::Round($disk.Free/1GB, 2)\n\n# Output status\n$status | ConvertTo-Json\n</code></pre>"},{"location":"management/windows/#integration-with-windows-tools","title":"Integration with Windows Tools","text":""},{"location":"management/windows/#scom-integration","title":"SCOM Integration","text":"<p>System Center Operations Manager monitoring:</p> <pre><code>&lt;!-- SCOM Management Pack snippet --&gt;\n&lt;Rule ID=\"EPMware.Agent.ProcessMonitor\"&gt;\n  &lt;Target&gt;Windows!Microsoft.Windows.Computer&lt;/Target&gt;\n  &lt;DataSource&gt;\n    &lt;ProcessMonitor&gt;\n      &lt;ProcessName&gt;java.exe&lt;/ProcessName&gt;\n      &lt;CommandLine&gt;epmware-agent&lt;/CommandLine&gt;\n    &lt;/ProcessMonitor&gt;\n  &lt;/DataSource&gt;\n&lt;/Rule&gt;\n</code></pre>"},{"location":"management/windows/#powershell-dsc","title":"PowerShell DSC","text":"<p>Desired State Configuration for agent:</p> <pre><code>Configuration EPMwareAgent {\n    Import-DscResource -ModuleName PSDesiredStateConfiguration\n\n    Node \"localhost\" {\n        File AgentFiles {\n            DestinationPath = \"C:\\cygwin64\\home\\Administrator\"\n            SourcePath = \"\\\\fileserver\\epmware\\agent\"\n            Type = \"Directory\"\n            Recurse = $true\n        }\n\n        ScheduledTask AgentTask {\n            TaskName = \"EPMWARE TARGET AGENT SERVICE\"\n            ActionExecutable = \"C:\\cygwin64\\bin\\bash.exe\"\n            ActionArguments = '-l -c \"./ew_target_service.sh\"'\n            ScheduleType = \"AtStartup\"\n            Enable = $true\n        }\n    }\n}\n</code></pre>"},{"location":"management/windows/#best-practices","title":"Best Practices","text":""},{"location":"management/windows/#windows-specific-recommendations","title":"Windows-Specific Recommendations","text":"<ol> <li>Use Scheduled Tasks - More reliable than services</li> <li>Monitor Event Logs - Integrate with existing monitoring</li> <li>Regular Updates - Keep Windows and Java updated</li> <li>Backup Configurations - Use VSS for consistent backups</li> <li>Test Restarts - Verify automatic recovery works</li> </ol>"},{"location":"management/windows/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Antivirus Exclusions - Exclude agent directories</li> <li>Windows Updates - Schedule around agent operations</li> <li>Resource Allocation - Ensure adequate CPU and memory</li> <li>Network Optimization - Configure QoS if needed</li> </ol>"},{"location":"management/windows/#next-steps","title":"Next Steps","text":"<ul> <li>Configure Scheduled Tasks - Detailed task setup</li> <li>Start and Stop Procedures - Operation procedures</li> <li>Monitor Agent Logs - Log management</li> <li>Linux Management - For Linux servers</li> </ul>"},{"location":"management/windows/scheduled-tasks/","title":"Scheduled Tasks","text":""},{"location":"management/windows/scheduled-tasks/#configuring-agent-as-a-scheduled-task","title":"Configuring Agent as a Scheduled Task","text":""},{"location":"management/windows/scheduled-tasks/#overview","title":"Overview","text":"<p>The EPMware Agent needs to run continuously on Windows servers to poll for deployment tasks. Windows Task Scheduler provides a reliable way to ensure the agent starts automatically and remains running.</p>"},{"location":"management/windows/scheduled-tasks/#prerequisites","title":"Prerequisites","text":"<p>Before configuring the scheduled task:</p> <ul> <li>[ ] Agent files are installed in the correct directory</li> <li>[ ] <code>agent.properties</code> is configured</li> <li>[ ] Java is installed and in the system PATH</li> <li>[ ] You have administrator privileges</li> </ul>"},{"location":"management/windows/scheduled-tasks/#creating-the-scheduled-task","title":"Creating the Scheduled Task","text":""},{"location":"management/windows/scheduled-tasks/#step-1-open-task-scheduler","title":"Step 1: Open Task Scheduler","text":"<ol> <li>Log on to the Windows server with Administrator privileges</li> <li>Open Task Scheduler using one of these methods:</li> <li>Search for \"Task Scheduler\" in the Start menu</li> <li>Run <code>taskschd.msc</code> from the command prompt</li> <li>Navigate through Control Panel \u2192 Administrative Tools</li> </ol> <p> Opening Windows Task Scheduler</p>"},{"location":"management/windows/scheduled-tasks/#step-2-create-new-task","title":"Step 2: Create New Task","text":"<ol> <li>In Task Scheduler, click Create Task in the Actions panel (right side)</li> </ol> <p> Create Task option in the Actions menu</p>"},{"location":"management/windows/scheduled-tasks/#step-3-configure-general-settings","title":"Step 3: Configure General Settings","text":"<p>In the General tab, configure the following:</p> Setting Value Name <code>EPMWARE TARGET AGENT SERVICE</code> Description EPMware Agent for metadata deployment to target applications Security Options Run whether user is logged on or not Run with highest privileges \u2713 Checked Configure for Windows Server 2016/2019/2022 (as appropriate) <p> General settings for the scheduled task</p>"},{"location":"management/windows/scheduled-tasks/#step-4-configure-triggers","title":"Step 4: Configure Triggers","text":"<ol> <li>Click on the Triggers tab</li> <li>Click New to create a trigger</li> <li>Configure the trigger settings:</li> </ol> Setting Value Begin the task At startup Delay task for 30 seconds (optional, allows services to start) Enabled \u2713 Checked <p> Configuring the startup trigger</p> <p>Additional Triggers</p> <p>You can add multiple triggers, such as: - Daily at specific time for regular restarts - On workstation unlock for development environments - On an event for integration with monitoring systems</p>"},{"location":"management/windows/scheduled-tasks/#step-5-configure-actions","title":"Step 5: Configure Actions","text":"<ol> <li>Click on the Actions tab</li> <li>Click New to create an action</li> <li>Configure the action settings:</li> </ol> Field Value Notes Action Start a program Program/script <code>C:\\cygwin64\\bin\\bash.exe</code> Adjust path if Cygwin is installed elsewhere Add arguments <code>-l -c \"./ew_target_service.sh\"</code> Start in <code>C:\\cygwin64\\bin</code> Must be the Cygwin bin directory <p> Configuring the action to start the agent</p> <p>Path Accuracy</p> <p>Ensure the Cygwin path matches your installation. The default is <code>C:\\cygwin64</code>, but it may be different in your environment.</p>"},{"location":"management/windows/scheduled-tasks/#step-6-configure-conditions","title":"Step 6: Configure Conditions","text":"<ol> <li>Click on the Conditions tab</li> <li>Configure the following settings:</li> </ol> Setting Value Start only if on AC power \u2610 Unchecked (for servers) Stop if switches to battery \u2610 Unchecked Start only if network available \u2713 Checked Wake computer to run \u2610 Unchecked"},{"location":"management/windows/scheduled-tasks/#step-7-configure-settings","title":"Step 7: Configure Settings","text":"<ol> <li>Click on the Settings tab</li> <li>Configure the following:</li> </ol> Setting Value Allow task to be run on demand \u2713 Checked Run task as soon as possible after missed start \u2713 Checked If task fails, restart every 1 minute Attempt restart up to 3 times Stop task if runs longer than \u2610 Unchecked If running task does not end when requested \u2713 Force stop <p> Task settings for reliability</p>"},{"location":"management/windows/scheduled-tasks/#step-8-save-with-credentials","title":"Step 8: Save with Credentials","text":"<ol> <li>Click OK to save the task</li> <li>Enter credentials when prompted:</li> <li>Username: Use the same user under which Cygwin is installed</li> <li>Password: Enter the user's password</li> <li>These credentials will be used to run the task</li> </ol> <p> Entering credentials for the scheduled task</p>"},{"location":"management/windows/scheduled-tasks/#starting-the-scheduled-task","title":"Starting the Scheduled Task","text":""},{"location":"management/windows/scheduled-tasks/#manual-start","title":"Manual Start","text":"<ol> <li>In Task Scheduler, locate <code>EPMWARE TARGET AGENT SERVICE</code></li> <li>Right-click the task</li> <li>Select Run</li> </ol> <p> Manually starting the scheduled task</p>"},{"location":"management/windows/scheduled-tasks/#verify-task-is-running","title":"Verify Task is Running","text":"<p>Check the task status: 1. The Status column should show \"Running\" 2. Last Run Result should show \"The operation completed successfully. (0x0)\"</p> <p> Scheduled task running successfully</p>"},{"location":"management/windows/scheduled-tasks/#monitoring-the-scheduled-task","title":"Monitoring the Scheduled Task","text":""},{"location":"management/windows/scheduled-tasks/#task-history","title":"Task History","text":"<p>Enable task history to track execution: 1. In Task Scheduler, click Enable All Tasks History in the Actions panel 2. Select your task and click the History tab</p>"},{"location":"management/windows/scheduled-tasks/#check-agent-logs","title":"Check Agent Logs","text":"<p>Verify the agent is working by checking log files:</p> <pre><code># Navigate to agent directory\ncd C:\\cygwin64\\home\\Administrator\\logs\n\n# Check polling log\ntype agent-poll.log\n\n# Check main agent log\ntype agent.log\n</code></pre> <p>The logs should show: - agent-poll.log: Regular polling entries every 30 seconds - agent.log: Deployment activities and any errors</p> <p> Sample agent log entries showing normal operation</p>"},{"location":"management/windows/scheduled-tasks/#troubleshooting-scheduled-tasks","title":"Troubleshooting Scheduled Tasks","text":""},{"location":"management/windows/scheduled-tasks/#common-issues","title":"Common Issues","text":"Issue Solution Task won't start Verify Cygwin path and user permissions Task starts but stops immediately Check agent.properties configuration \"Access Denied\" error Ensure user has \"Log on as batch job\" permission Task runs but agent doesn't poll Verify Java is in PATH for the task user"},{"location":"management/windows/scheduled-tasks/#permission-requirements","title":"Permission Requirements","text":"<p>The task user account needs: - Log on as a batch job right - Read/write access to agent directory - Execute permission for Java and Cygwin</p> <p>To grant \"Log on as batch job\": 1. Run <code>secpol.msc</code> 2. Navigate to Local Policies \u2192 User Rights Assignment 3. Add user to \"Log on as a batch job\"</p>"},{"location":"management/windows/scheduled-tasks/#debugging-steps","title":"Debugging Steps","text":"<ol> <li> <p>Check Task History </p><pre><code>Event ID 100 - Task Started\nEvent ID 102 - Task Completed\nEvent ID 103 - Task Failed\n</code></pre><p></p> </li> <li> <p>Run Manually in Cygwin </p><pre><code># Open Cygwin terminal as the service user\ncd /home/Administrator\n./ew_target_service.sh\n</code></pre><p></p> </li> <li> <p>Enable Detailed Logging    Add to agent.properties:    </p><pre><code>agent.log.level=DEBUG\n</code></pre><p></p> </li> </ol>"},{"location":"management/windows/scheduled-tasks/#best-practices","title":"Best Practices","text":""},{"location":"management/windows/scheduled-tasks/#security-recommendations","title":"Security Recommendations","text":"<ul> <li>Use a dedicated service account for the agent</li> <li>Implement least privilege principle</li> <li>Store credentials securely</li> <li>Regular password rotation for service account</li> </ul>"},{"location":"management/windows/scheduled-tasks/#monitoring-setup","title":"Monitoring Setup","text":"<ol> <li>Configure email notifications for task failures</li> <li>Set up monitoring alerts for log file errors</li> <li>Implement health check scripts</li> <li>Monitor disk space for log files</li> </ol>"},{"location":"management/windows/scheduled-tasks/#maintenance-tasks","title":"Maintenance Tasks","text":"<ul> <li>Weekly: Review agent logs for errors</li> <li>Monthly: Clean up old log files</li> <li>Quarterly: Update agent software if needed</li> <li>Annually: Review and update service account permissions</li> </ul> <p>High Availability</p> <p>For production environments, consider setting up a secondary server with an identical scheduled task configuration for failover capabilities.</p> <p>Java Process Cleanup</p> <p>When stopping the scheduled task, the Java process may not terminate automatically. Always verify and manually terminate if necessary before restarting.</p>"},{"location":"management/windows/scheduled-tasks/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"management/windows/scheduled-tasks/#multiple-agent-instances","title":"Multiple Agent Instances","text":"<p>To run multiple agents for different applications:</p> <ol> <li>Create separate directories for each agent</li> <li>Configure unique <code>agent.properties</code> for each</li> <li>Create separate scheduled tasks with distinct names</li> <li>Use different polling intervals to prevent conflicts</li> </ol>"},{"location":"management/windows/scheduled-tasks/#powershell-alternative","title":"PowerShell Alternative","text":"<p>For environments preferring PowerShell:</p> <pre><code># Create scheduled task via PowerShell\n$action = New-ScheduledTaskAction -Execute \"C:\\cygwin64\\bin\\bash.exe\" `\n    -Argument '-l -c \"./ew_target_service.sh\"' `\n    -WorkingDirectory \"C:\\cygwin64\\bin\"\n\n$trigger = New-ScheduledTaskTrigger -AtStartup\n\n$settings = New-ScheduledTaskSettingsSet -RestartCount 3 `\n    -RestartInterval (New-TimeSpan -Minutes 1)\n\nRegister-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\" `\n    -Action $action -Trigger $trigger -Settings $settings `\n    -User \"DOMAIN\\ServiceAccount\" -Password \"SecurePassword\"\n</code></pre>"},{"location":"management/windows/scheduled-tasks/#next-steps","title":"Next Steps","text":"<p>After configuring the scheduled task:</p> <ol> <li>Monitor Agent Logs</li> <li>Configure Application Integration</li> <li>Set up Monitoring Alerts</li> <li>Test Deployment Process</li> </ol>"},{"location":"management/windows/windows-start-stop/","title":"Start and Stop Procedures - Windows","text":""},{"location":"management/windows/windows-start-stop/#start-and-stop-procedures-windows","title":"Start and Stop Procedures - Windows","text":"<p>This guide provides detailed procedures for starting and stopping the EPMware Agent on Windows servers, including scheduled tasks, manual processes, and troubleshooting.</p>"},{"location":"management/windows/windows-start-stop/#starting-the-agent","title":"Starting the Agent","text":""},{"location":"management/windows/windows-start-stop/#method-1-using-task-scheduler-gui","title":"Method 1: Using Task Scheduler GUI","text":"<ol> <li>Open Task Scheduler</li> <li>Press <code>Win + R</code>, type <code>taskschd.msc</code></li> <li> <p>Or search \"Task Scheduler\" in Start menu</p> </li> <li> <p>Locate the Agent Task</p> </li> <li>Navigate to Task Scheduler Library</li> <li> <p>Find \"EPMWARE TARGET AGENT SERVICE\"</p> </li> <li> <p>Start the Task</p> </li> <li>Right-click the task</li> <li>Select Run</li> <li>Status should change to \"Running\"</li> </ol> <p> Starting agent from Task Scheduler</p>"},{"location":"management/windows/windows-start-stop/#method-2-using-powershell","title":"Method 2: Using PowerShell","text":"<pre><code># Start the scheduled task\nStart-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n# Verify it started\nGet-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\" | \n    Select-Object TaskName, State\n</code></pre>"},{"location":"management/windows/windows-start-stop/#method-3-using-command-prompt","title":"Method 3: Using Command Prompt","text":"<pre><code>REM Start the scheduled task\nschtasks /run /tn \"EPMWARE TARGET AGENT SERVICE\"\n\nREM Check status\nschtasks /query /tn \"EPMWARE TARGET AGENT SERVICE\"\n</code></pre>"},{"location":"management/windows/windows-start-stop/#method-4-manual-cygwin-start","title":"Method 4: Manual Cygwin Start","text":"<pre><code># Open Cygwin Terminal\n# Navigate to agent directory\ncd /home/Administrator\n\n# Start agent in foreground (for testing)\n./ew_target_service.sh\n\n# Start agent in background\n./ew_target_service.sh &amp;\n\n# Or with nohup to persist after terminal closes\nnohup ./ew_target_service.sh &gt; agent.out 2&gt;&amp;1 &amp;\n</code></pre>"},{"location":"management/windows/windows-start-stop/#verifying-agent-started","title":"Verifying Agent Started","text":"<p>After starting, verify the agent is running:</p> <pre><code># Check process is running\nGet-Process | Where-Object {$_.ProcessName -eq \"java\"} | \n    Where-Object {$_.CommandLine -like \"*epmware-agent*\"}\n\n# Check logs for startup\nGet-Content C:\\cygwin64\\home\\Administrator\\logs\\agent.log -Tail 20\n\n# Check polling activity\nGet-Content C:\\cygwin64\\home\\Administrator\\logs\\agent-poll.log -Tail 5\n</code></pre> <p>Expected log output: </p><pre><code>2023-11-15 10:00:00 INFO  Starting EPMware Agent v1.7.0\n2023-11-15 10:00:01 INFO  Loading configuration from agent.properties\n2023-11-15 10:00:02 INFO  Connecting to https://epmware.com\n2023-11-15 10:00:03 INFO  Authentication successful\n2023-11-15 10:00:04 INFO  Starting polling cycle\n</code></pre><p></p>"},{"location":"management/windows/windows-start-stop/#stopping-the-agent","title":"Stopping the Agent","text":""},{"location":"management/windows/windows-start-stop/#method-1-stop-via-task-scheduler","title":"Method 1: Stop via Task Scheduler","text":"<ol> <li>Open Task Scheduler</li> <li>Locate \"EPMWARE TARGET AGENT SERVICE\"</li> <li>Right-click and select \"End\"</li> </ol> <p>Process Cleanup</p> <p>Stopping the scheduled task doesn't always kill the Java process. Always verify and manually terminate if needed.</p>"},{"location":"management/windows/windows-start-stop/#method-2-using-powershell_1","title":"Method 2: Using PowerShell","text":"<pre><code># Stop the scheduled task\nStop-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n# Find and stop Java process\n$process = Get-Process | Where-Object {\n    $_.ProcessName -eq \"java\" -and \n    $_.CommandLine -like \"*epmware-agent*\"\n}\n\nif ($process) {\n    Stop-Process -Id $process.Id -Force\n    Write-Host \"Agent process stopped (PID: $($process.Id))\"\n} else {\n    Write-Host \"Agent process not found\"\n}\n</code></pre>"},{"location":"management/windows/windows-start-stop/#method-3-using-command-prompt_1","title":"Method 3: Using Command Prompt","text":"<pre><code>REM Stop scheduled task\nschtasks /end /tn \"EPMWARE TARGET AGENT SERVICE\"\n\nREM Find Java process\nwmic process where \"CommandLine like '%epmware-agent%'\" get ProcessId\n\nREM Kill process (replace PID with actual process ID)\ntaskkill /PID [PID] /F\n</code></pre>"},{"location":"management/windows/windows-start-stop/#method-4-using-task-manager","title":"Method 4: Using Task Manager","text":"<ol> <li>Open Task Manager (<code>Ctrl + Shift + Esc</code>)</li> <li>Go to Details tab</li> <li>Find java.exe process</li> <li>Check Command Line column for \"epmware-agent\"</li> <li>Right-click and select \"End Task\"</li> </ol> <p> Stopping agent via Task Manager</p>"},{"location":"management/windows/windows-start-stop/#clean-stop-script","title":"Clean Stop Script","text":"<p>PowerShell script for clean shutdown:</p> <pre><code># clean_stop.ps1\nparam(\n    [int]$Timeout = 30\n)\n\nWrite-Host \"Stopping EPMware Agent...\"\n\n# Stop scheduled task\nStop-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\" -ErrorAction SilentlyContinue\n\n# Find agent process\n$process = Get-Process | Where-Object {\n    $_.ProcessName -eq \"java\" -and \n    $_.CommandLine -like \"*epmware-agent*\"\n}\n\nif ($process) {\n    # Try graceful shutdown first\n    $process.CloseMainWindow()\n\n    # Wait for process to exit\n    $waited = 0\n    while (!$process.HasExited -and $waited -lt $Timeout) {\n        Start-Sleep -Seconds 1\n        $waited++\n    }\n\n    # Force kill if still running\n    if (!$process.HasExited) {\n        Write-Warning \"Graceful shutdown failed, forcing termination...\"\n        Stop-Process -Id $process.Id -Force\n    }\n\n    Write-Host \"Agent stopped successfully\"\n} else {\n    Write-Host \"Agent process not found\"\n}\n\n# Clean up PID file if exists\n$pidFile = \"C:\\cygwin64\\home\\Administrator\\agent.pid\"\nif (Test-Path $pidFile) {\n    Remove-Item $pidFile\n}\n</code></pre>"},{"location":"management/windows/windows-start-stop/#restarting-the-agent","title":"Restarting the Agent","text":""},{"location":"management/windows/windows-start-stop/#automated-restart","title":"Automated Restart","text":"<p>PowerShell script for restart:</p> <pre><code># restart_agent.ps1\nWrite-Host \"Restarting EPMware Agent...\"\n\n# Stop agent\n&amp; .\\clean_stop.ps1\n\n# Wait for complete shutdown\nStart-Sleep -Seconds 5\n\n# Start agent\nStart-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n# Verify startup\nStart-Sleep -Seconds 10\n$running = Get-Process | Where-Object {\n    $_.ProcessName -eq \"java\" -and \n    $_.CommandLine -like \"*epmware-agent*\"\n}\n\nif ($running) {\n    Write-Host \"Agent restarted successfully (PID: $($running.Id))\"\n} else {\n    Write-Error \"Agent failed to start\"\n}\n</code></pre>"},{"location":"management/windows/windows-start-stop/#restart-with-configuration-reload","title":"Restart with Configuration Reload","text":"<p>When configuration changes require restart:</p> <pre><code># Stop agent\n&amp; .\\clean_stop.ps1\n\n# Backup current logs\n$timestamp = Get-Date -Format \"yyyyMMdd_HHmmss\"\nCopy-Item \"C:\\cygwin64\\home\\Administrator\\logs\\agent.log\" `\n    \"C:\\cygwin64\\home\\Administrator\\logs\\agent_$timestamp.log\"\n\n# Clear cache if needed\nRemove-Item \"C:\\cygwin64\\home\\Administrator\\temp\\*\" -Recurse -Force\n\n# Start with new configuration\nStart-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n</code></pre>"},{"location":"management/windows/windows-start-stop/#emergency-procedures","title":"Emergency Procedures","text":""},{"location":"management/windows/windows-start-stop/#force-stop-all-java-processes","title":"Force Stop All Java Processes","text":"<p>Use with Caution</p> <p>This will stop ALL Java processes, not just the agent.</p> <pre><code># Emergency stop all Java\nGet-Process java | Stop-Process -Force\n\n# Or more targeted\nGet-Process | Where {$_.ProcessName -eq \"java\"} | \n    Where {$_.CommandLine -like \"*epmware*\"} | \n    Stop-Process -Force\n</code></pre>"},{"location":"management/windows/windows-start-stop/#recovery-from-hung-process","title":"Recovery from Hung Process","text":"<pre><code># Check for hung process\n$process = Get-Process java -ErrorAction SilentlyContinue | \n    Where {$_.CommandLine -like \"*epmware*\"}\n\nif ($process) {\n    # Check if responding\n    if ($process.Responding) {\n        Write-Host \"Process is responding\"\n    } else {\n        Write-Warning \"Process not responding, forcing termination\"\n        Stop-Process -Id $process.Id -Force\n\n        # Clean up locks\n        Remove-Item \"C:\\cygwin64\\home\\Administrator\\*.lock\" -Force\n        Remove-Item \"C:\\cygwin64\\home\\Administrator\\agent.pid\" -Force\n\n        # Restart\n        Start-Sleep -Seconds 5\n        Start-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n    }\n}\n</code></pre>"},{"location":"management/windows/windows-start-stop/#startup-issues","title":"Startup Issues","text":""},{"location":"management/windows/windows-start-stop/#agent-wont-start","title":"Agent Won't Start","text":"<p>Troubleshooting checklist:</p> <ol> <li> <p>Check Java </p><pre><code>java -version\n$env:JAVA_HOME\n</code></pre><p></p> </li> <li> <p>Check Cygwin </p><pre><code>Test-Path \"C:\\cygwin64\\bin\\bash.exe\"\n</code></pre><p></p> </li> <li> <p>Check Permissions </p><pre><code>Get-Acl \"C:\\cygwin64\\home\\Administrator\"\n</code></pre><p></p> </li> <li> <p>Check Configuration </p><pre><code>Test-Path \"C:\\cygwin64\\home\\Administrator\\agent.properties\"\nGet-Content \"C:\\cygwin64\\home\\Administrator\\agent.properties\"\n</code></pre><p></p> </li> </ol>"},{"location":"management/windows/windows-start-stop/#agent-starts-then-stops","title":"Agent Starts Then Stops","text":"<p>Common causes and solutions:</p> Issue Check Fix Bad configuration agent.properties syntax Fix syntax errors Network issues Test connectivity Check firewall/proxy Invalid token REST token validity Generate new token Memory issues Available RAM Increase heap size"},{"location":"management/windows/windows-start-stop/#multiple-instance-prevention","title":"Multiple Instance Prevention","text":"<p>Prevent multiple agent instances:</p> <pre><code># Check for existing process before starting\n$existing = Get-Process | Where {$_.CommandLine -like \"*epmware-agent*\"}\nif ($existing) {\n    Write-Warning \"Agent already running (PID: $($existing.Id))\"\n    exit 1\n} else {\n    Start-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n}\n</code></pre>"},{"location":"management/windows/windows-start-stop/#monitoring-startstop-events","title":"Monitoring Start/Stop Events","text":""},{"location":"management/windows/windows-start-stop/#windows-event-log-integration","title":"Windows Event Log Integration","text":"<p>Log agent events to Windows Event Log:</p> <pre><code># Create event source (run once as admin)\nNew-EventLog -LogName Application -Source \"EPMware Agent\"\n\n# Log start event\nWrite-EventLog -LogName Application -Source \"EPMware Agent\" `\n    -EntryType Information -EventId 1000 `\n    -Message \"EPMware Agent started successfully\"\n\n# Log stop event\nWrite-EventLog -LogName Application -Source \"EPMware Agent\" `\n    -EntryType Information -EventId 1001 `\n    -Message \"EPMware Agent stopped\"\n</code></pre>"},{"location":"management/windows/windows-start-stop/#email-notifications","title":"Email Notifications","text":"<p>Send notifications on start/stop:</p> <pre><code># Email notification function\nfunction Send-AgentNotification {\n    param(\n        [string]$Event,\n        [string]$Status\n    )\n\n    $smtp = \"smtp.company.com\"\n    $from = \"epmware-agent@company.com\"\n    $to = \"admin@company.com\"\n    $subject = \"EPMware Agent $Event\"\n    $body = @\"\nEPMware Agent $Event\nServer: $env:COMPUTERNAME\nTime: $(Get-Date)\nStatus: $Status\n\"@\n\n    Send-MailMessage -SmtpServer $smtp -From $from -To $to `\n        -Subject $subject -Body $body\n}\n\n# Use in scripts\nSend-AgentNotification -Event \"Started\" -Status \"Success\"\n</code></pre>"},{"location":"management/windows/windows-start-stop/#scheduled-maintenance","title":"Scheduled Maintenance","text":""},{"location":"management/windows/windows-start-stop/#scheduled-restart","title":"Scheduled Restart","text":"<p>Configure automatic restart in Task Scheduler:</p> <pre><code>&lt;!-- Additional trigger for weekly restart --&gt;\n&lt;Trigger&gt;\n    &lt;Weekly&gt;\n        &lt;StartTime&gt;2023-11-15T02:00:00&lt;/StartTime&gt;\n        &lt;DaysOfWeek&gt;Sunday&lt;/DaysOfWeek&gt;\n    &lt;/Weekly&gt;\n&lt;/Trigger&gt;\n</code></pre>"},{"location":"management/windows/windows-start-stop/#maintenance-mode","title":"Maintenance Mode","text":"<p>Script to enable maintenance mode:</p> <pre><code># maintenance_mode.ps1\nparam(\n    [switch]$Enable,\n    [switch]$Disable\n)\n\nif ($Enable) {\n    # Stop agent\n    Stop-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n    # Disable scheduled task\n    Disable-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n    # Create maintenance flag\n    New-Item -Path \"C:\\cygwin64\\home\\Administrator\\MAINTENANCE\" -ItemType File\n\n    Write-Host \"Maintenance mode enabled\"\n}\n\nif ($Disable) {\n    # Remove maintenance flag\n    Remove-Item -Path \"C:\\cygwin64\\home\\Administrator\\MAINTENANCE\" -Force\n\n    # Enable scheduled task\n    Enable-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n    # Start agent\n    Start-ScheduledTask -TaskName \"EPMWARE TARGET AGENT SERVICE\"\n\n    Write-Host \"Maintenance mode disabled\"\n}\n</code></pre>"},{"location":"management/windows/windows-start-stop/#best-practices","title":"Best Practices","text":""},{"location":"management/windows/windows-start-stop/#startstop-guidelines","title":"Start/Stop Guidelines","text":"<ol> <li>Always Verify - Check process actually started/stopped</li> <li>Clean Shutdown - Allow graceful shutdown when possible</li> <li>Log Activities - Record all start/stop events</li> <li>Monitor Health - Check logs after restart</li> <li>Document Issues - Record any problems encountered</li> </ol>"},{"location":"management/windows/windows-start-stop/#automation-tips","title":"Automation Tips","text":"<ol> <li>Use Scripts - Automate common procedures</li> <li>Add Logging - Include detailed logging in scripts</li> <li>Error Handling - Include try-catch blocks</li> <li>Notifications - Alert on failures</li> <li>Testing - Test procedures in non-production</li> </ol>"},{"location":"management/windows/windows-start-stop/#next-steps","title":"Next Steps","text":"<ul> <li>Scheduled Tasks Configuration - Detailed task setup</li> <li>Windows Management Overview - Windows management guide</li> <li>Agent Logs - Understanding log files</li> <li>Troubleshooting - Service issues</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":""},{"location":"troubleshooting/#troubleshooting-guide","title":"Troubleshooting Guide","text":"<p>This comprehensive troubleshooting guide helps you diagnose and resolve common issues with the EPMware Agent installation, configuration, and operation.</p>"},{"location":"troubleshooting/#troubleshooting-categories","title":"Troubleshooting Categories","text":"<ul> <li> <p> Common Issues   Frequently encountered problems and solutions</p> </li> <li> <p> Connection Problems   Network and connectivity troubleshooting</p> </li> <li> <p> Password Issues   Authentication and credential problems</p> </li> <li> <p> Service Errors   Service startup and runtime errors</p> </li> <li> <p> Debug Mode   Enabling detailed logging and debugging</p> </li> </ul>"},{"location":"troubleshooting/#quick-troubleshooting-flowchart","title":"Quick Troubleshooting Flowchart","text":"<pre><code>graph TD\n    A[Agent Issue] --&gt; B{Agent Starting?}\n    B --&gt;|No| C[Check Prerequisites]\n    B --&gt;|Yes| D{Connecting?}\n    C --&gt; E[Java/Cygwin/Permissions]\n    D --&gt;|No| F[Check Network/Token]\n    D --&gt;|Yes| G{Deploying?}\n    F --&gt; H[Firewall/Proxy/URL]\n    G --&gt;|No| I[Check Target Apps]\n    G --&gt;|Yes| J{Errors in Logs?}\n    I --&gt; K[Credentials/Access]\n    J --&gt;|Yes| L[Analyze Error]\n    J --&gt;|No| M[Working Correctly]\n</code></pre>"},{"location":"troubleshooting/#common-symptoms-and-solutions","title":"Common Symptoms and Solutions","text":""},{"location":"troubleshooting/#agent-wont-start","title":"Agent Won't Start","text":"<p>Symptoms: - No process running - Scheduled task fails - Service won't start</p> <p>Quick Checks: </p><pre><code># Check Java\njava -version\n\n# Check configuration file\nls -la agent.properties\n\n# Check script permissions\nls -la ew_target_service.sh\n\n# Check logs for errors\ntail -50 logs/agent.log\n</code></pre><p></p> <p>Common Solutions: 1. Verify Java installation and PATH 2. Check file permissions 3. Validate configuration syntax 4. Review error messages in logs</p>"},{"location":"troubleshooting/#agent-starts-but-stops","title":"Agent Starts But Stops","text":"<p>Symptoms: - Process starts then exits - Scheduled task shows \"Last run failed\" - No polling in logs</p> <p>Quick Checks: </p><pre><code># Check last error\ngrep ERROR logs/agent.log | tail -10\n\n# Check configuration\ngrep -E \"^[^#]\" agent.properties\n\n# Test connectivity\ncurl -I https://your-epmware-server.com\n</code></pre><p></p> <p>Common Solutions: 1. Fix configuration errors 2. Regenerate REST token 3. Verify network connectivity 4. Check disk space</p>"},{"location":"troubleshooting/#connection-failures","title":"Connection Failures","text":"<p>Symptoms: - \"Connection refused\" errors - \"Timeout\" messages - \"401 Unauthorized\" responses</p> <p>Quick Checks: </p><pre><code># Test network connectivity\nping epmware-server.com\ntelnet epmware-server.com 443\n\n# Check token\ngrep ew.portal.token agent.properties\n\n# Test with curl\ncurl -H \"Authorization: Bearer YOUR-TOKEN\" https://server/api/health\n</code></pre><p></p> <p>Common Solutions: 1. Check firewall rules 2. Verify proxy settings 3. Generate new token 4. Confirm server URL</p>"},{"location":"troubleshooting/#diagnostic-commands","title":"Diagnostic Commands","text":""},{"location":"troubleshooting/#system-information","title":"System Information","text":"<pre><code># Operating System\nuname -a  # Linux/Unix\nsysteminfo  # Windows\n\n# Java Version\njava -version\necho $JAVA_HOME\n\n# Memory Available\nfree -h  # Linux\nwmic OS get TotalVisibleMemorySize  # Windows\n\n# Disk Space\ndf -h  # Linux\nwmic logicaldisk get size,freespace  # Windows\n</code></pre>"},{"location":"troubleshooting/#process-information","title":"Process Information","text":"<pre><code># Check if agent is running\nps aux | grep epmware  # Linux\ntasklist | findstr java  # Windows\n\n# Process details\nps -ef | grep java | grep epmware\nGet-Process java | Where {$_.CommandLine -like \"*epmware*\"}  # PowerShell\n\n# Resource usage\ntop -p $(pgrep -f epmware)  # Linux\n</code></pre>"},{"location":"troubleshooting/#network-diagnostics","title":"Network Diagnostics","text":"<pre><code># DNS resolution\nnslookup epmware-server.com\n\n# Route to server\ntraceroute epmware-server.com  # Linux\ntracert epmware-server.com  # Windows\n\n# Port connectivity\nnc -zv epmware-server.com 443  # Linux\nTest-NetConnection server.com -Port 443  # PowerShell\n\n# Active connections\nnetstat -an | grep ESTABLISHED\n</code></pre>"},{"location":"troubleshooting/#log-analysis","title":"Log Analysis","text":""},{"location":"troubleshooting/#key-log-files","title":"Key Log Files","text":"Log File Purpose What to Look For <code>agent.log</code> Main activity log Errors, deployments, connections <code>agent-poll.log</code> Polling activity Frequency, gaps, timeouts <code>agent-debug.log</code> Debug information Detailed traces (if enabled)"},{"location":"troubleshooting/#log-search-commands","title":"Log Search Commands","text":"<pre><code># Find errors\ngrep -i error logs/agent.log\n\n# Find warnings\ngrep -i warn logs/agent.log\n\n# Find specific date\ngrep \"2023-11-15\" logs/agent.log\n\n# Find deployment activities\ngrep -i deploy logs/agent.log\n\n# Count error occurrences\ngrep -c ERROR logs/agent.log\n\n# Show errors with context\ngrep -B5 -A5 ERROR logs/agent.log\n</code></pre>"},{"location":"troubleshooting/#common-error-patterns","title":"Common Error Patterns","text":"Error Pattern Meaning Solution <code>Connection refused</code> Server not reachable Check network/firewall <code>401 Unauthorized</code> Invalid token Regenerate token <code>OutOfMemoryError</code> Insufficient heap Increase JVM memory <code>FileNotFoundException</code> Missing file Check paths and permissions <code>SocketTimeoutException</code> Network timeout Check connectivity/increase timeout"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-polling","title":"Slow Polling","text":"<p>Symptoms: - Polling intervals longer than configured - High CPU usage - Memory consumption growing</p> <p>Diagnostics: </p><pre><code># Check polling frequency\ntail -f logs/agent-poll.log\n\n# Monitor resource usage\ntop -p $(pgrep -f epmware)\n\n# Check JVM memory\njmap -heap $(pgrep -f epmware)\n</code></pre><p></p> <p>Solutions: 1. Increase JVM heap size 2. Check network latency 3. Review deployment queue size 4. Optimize polling interval</p>"},{"location":"troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Symptoms: - OutOfMemoryError in logs - Agent crashes - System becoming unresponsive</p> <p>Solutions: </p><pre><code># Increase heap size in ew_target_service.sh\nJAVA_OPTS=\"-Xms1024m -Xmx2048m\"\n\n# Enable heap dump on OOM\nJAVA_OPTS=\"$JAVA_OPTS -XX:+HeapDumpOnOutOfMemoryError\"\nJAVA_OPTS=\"$JAVA_OPTS -XX:HeapDumpPath=/var/log/epmware\"\n</code></pre><p></p>"},{"location":"troubleshooting/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"troubleshooting/#emergency-restart","title":"Emergency Restart","text":"<pre><code>#!/bin/bash\n# emergency_restart.sh\n\n# Force stop all agent processes\npkill -9 -f epmware-agent\n\n# Clean up locks and temp files\nrm -f /home/epmadmin/*.lock\nrm -f /home/epmadmin/agent.pid\nrm -rf /home/epmadmin/temp/*\n\n# Wait for cleanup\nsleep 5\n\n# Start fresh\ncd /home/epmadmin\n./ew_target_service.sh &amp;\n\necho \"Emergency restart completed\"\n</code></pre>"},{"location":"troubleshooting/#configuration-recovery","title":"Configuration Recovery","text":"<pre><code># Restore from backup\ncp agent.properties.backup agent.properties\n\n# Validate configuration\njava -jar epmware-agent.jar --validate-config\n\n# Test connection\njava -jar epmware-agent.jar --test\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/#information-to-collect","title":"Information to Collect","text":"<p>When requesting support, gather:</p> <ol> <li> <p>System Information </p><pre><code>uname -a &gt; system_info.txt\njava -version &gt;&gt; system_info.txt\ndf -h &gt;&gt; system_info.txt\nfree -h &gt;&gt; system_info.txt\n</code></pre><p></p> </li> <li> <p>Configuration (sanitized)    </p><pre><code>grep -v token agent.properties &gt; config_sanitized.txt\n</code></pre><p></p> </li> <li> <p>Recent Logs </p><pre><code>tail -1000 logs/agent.log &gt; recent_logs.txt\ngrep ERROR logs/agent.log &gt; errors.txt\n</code></pre><p></p> </li> <li> <p>Process Information </p><pre><code>ps aux | grep epmware &gt; process_info.txt\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/#support-channels","title":"Support Channels","text":"<ul> <li>Email: support@epmware.com</li> <li>Phone: 408-614-0442</li> <li>Portal: support.epmware.com</li> </ul>"},{"location":"troubleshooting/#support-ticket-template","title":"Support Ticket Template","text":"<pre><code>## Issue Description\n[Describe the problem]\n\n## Environment\n- Agent Version: 1.7.0\n- OS: [Windows/Linux version]\n- Java Version: [output of java -version]\n- EPMware URL: [your instance]\n\n## Error Messages\n[Paste relevant error messages]\n\n## Steps to Reproduce\n1. [Step 1]\n2. [Step 2]\n3. [Step 3]\n\n## What I've Tried\n- [Solution attempt 1]\n- [Solution attempt 2]\n\n## Attachments\n- system_info.txt\n- config_sanitized.txt\n- recent_logs.txt\n</code></pre>"},{"location":"troubleshooting/#prevention-strategies","title":"Prevention Strategies","text":""},{"location":"troubleshooting/#proactive-monitoring","title":"Proactive Monitoring","text":"<ol> <li>Set Up Alerts</li> <li>Process monitoring</li> <li>Log error detection</li> <li>Disk space warnings</li> <li> <p>Memory usage alerts</p> </li> <li> <p>Regular Health Checks</p> </li> <li>Daily log review</li> <li>Weekly performance check</li> <li> <p>Monthly configuration audit</p> </li> <li> <p>Maintenance Schedule</p> </li> <li>Log rotation</li> <li>Temp file cleanup</li> <li>Configuration backups</li> <li>Software updates</li> </ol>"},{"location":"troubleshooting/#best-practices","title":"Best Practices","text":"<ol> <li>Documentation</li> <li>Keep configuration documented</li> <li>Record changes</li> <li> <p>Maintain runbooks</p> </li> <li> <p>Testing</p> </li> <li>Test changes in non-production</li> <li>Verify backups work</li> <li> <p>Practice recovery procedures</p> </li> <li> <p>Updates</p> </li> <li>Stay current with patches</li> <li>Review release notes</li> <li>Plan upgrade windows</li> </ol>"},{"location":"troubleshooting/#quick-reference","title":"Quick Reference","text":""},{"location":"troubleshooting/#critical-files-and-paths","title":"Critical Files and Paths","text":"<pre><code># Configuration\nagent.properties\new_target_service.sh\n\n# Logs\nlogs/agent.log\nlogs/agent-poll.log\n\n# Temporary files\ntemp/\n*.pid\n*.lock\n\n# Backups\n*.backup\n*.old\n</code></pre>"},{"location":"troubleshooting/#important-commands","title":"Important Commands","text":"<pre><code># Start agent\n./ew_target_service.sh\n\n# Check status\nps aux | grep epmware\n\n# View logs\ntail -f logs/agent.log\n\n# Test connection\njava -jar epmware-agent.jar --test\n\n# Kill agent\npkill -f epmware-agent\n</code></pre> <p>Log Verbosity</p> <p>Increase log verbosity when troubleshooting, but remember to restore normal levels after resolving issues to avoid excessive disk usage.</p> <p>Production Changes</p> <p>Always test fixes in a non-production environment first. Have a rollback plan before making production changes.</p>"},{"location":"troubleshooting/#next-steps","title":"Next Steps","text":"<p>Based on your issue type, proceed to:</p> <ul> <li>Common Issues - Frequently seen problems</li> <li>Connection Problems - Network issues</li> <li>Password Issues - Authentication problems</li> <li>Service Errors - Service failures</li> <li>Debug Mode - Detailed debugging</li> </ul>"},{"location":"troubleshooting/common-issues/","title":"Common Issues","text":""},{"location":"troubleshooting/common-issues/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<p>This page covers the most frequently encountered issues with EPMware Agent installation, configuration, and operation, along with their solutions.</p>"},{"location":"troubleshooting/common-issues/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/common-issues/#issue-java-not-found","title":"Issue: Java Not Found","text":"<p>Error Message: </p><pre><code>'java' is not recognized as an internal or external command\nbash: java: command not found\n</code></pre><p></p> <p>Cause: Java is not installed or not in the system PATH.</p> <p>Solution:</p> <ol> <li> <p>Verify Java installation: </p><pre><code># Check if Java is installed\nls /usr/bin/java*  # Linux\ndir \"C:\\Program Files\\Java\"  # Windows\n</code></pre><p></p> </li> <li> <p>Install Java if missing: </p><pre><code># Linux\nsudo yum install java-1.8.0-openjdk  # RHEL/CentOS\nsudo apt install openjdk-8-jdk  # Ubuntu\n\n# Windows - Download from Oracle or OpenJDK\n</code></pre><p></p> </li> <li> <p>Fix PATH: </p><pre><code># Linux - Add to ~/.bashrc\nexport JAVA_HOME=/usr/java/latest\nexport PATH=$JAVA_HOME/bin:$PATH\n\n# Windows - Add to System Environment Variables\nJAVA_HOME=C:\\Program Files\\Java\\jdk1.8.0_291\nPATH=%JAVA_HOME%\\bin;%PATH%\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#issue-cygwin-not-working-windows","title":"Issue: Cygwin Not Working (Windows)","text":"<p>Error Message: </p><pre><code>The system cannot find the path specified: C:\\cygwin64\\bin\\bash.exe\n</code></pre><p></p> <p>Cause: Cygwin not installed or installed in different location.</p> <p>Solution:</p> <ol> <li> <p>Verify Cygwin installation: </p><pre><code>Test-Path \"C:\\cygwin64\\bin\\bash.exe\"\n</code></pre><p></p> </li> <li> <p>Reinstall if missing:</p> </li> <li>Download from www.cygwin.com</li> <li>Install to default location C:\\cygwin64</li> <li> <p>Select default packages</p> </li> <li> <p>Update agent configuration if different path: </p><pre><code># Update ew_target_service.sh\nHOME=/cygdrive/d/cygwin64/home/Administrator  # If on D: drive\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#issue-permission-denied-during-installation","title":"Issue: Permission Denied During Installation","text":"<p>Error Message: </p><pre><code>mkdir: cannot create directory: Permission denied\nunzip: cannot create extraction directory: Permission denied\n</code></pre><p></p> <p>Cause: Insufficient user permissions.</p> <p>Solution:</p> <p>Linux: </p><pre><code># Switch to correct user\nsudo su - epmadmin\n\n# Or fix ownership\nsudo chown -R epmadmin:epmadmin /home/epmadmin\n\n# Fix permissions\nchmod 755 /home/epmadmin\n</code></pre><p></p> <p>Windows: - Run Cygwin Terminal as Administrator - Check Windows file permissions on Cygwin directory</p>"},{"location":"troubleshooting/common-issues/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/common-issues/#issue-invalid-token-format","title":"Issue: Invalid Token Format","text":"<p>Error Message: </p><pre><code>ERROR: Authentication failed - Invalid token format\nERROR: Token must be 36 characters\n</code></pre><p></p> <p>Cause: Token is malformed, has extra spaces, or wrong length.</p> <p>Solution:</p> <ol> <li> <p>Verify token format: </p><pre><code># Check token in config\ngrep ew.portal.token agent.properties\n\n# Token should be: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n# Example: 2e6d4103-5145-4c30-9837-ac6d14797523\n</code></pre><p></p> </li> <li> <p>Remove extra characters: </p><pre><code># Remove spaces, quotes, or line breaks\nsed -i 's/ew.portal.token=.*/ew.portal.token=YOUR-TOKEN-HERE/' agent.properties\n</code></pre><p></p> </li> <li> <p>Regenerate if needed:</p> </li> <li>Log into EPMware</li> <li>Navigate to Users</li> <li>Right-click \u2192 Generate Token</li> <li>Copy exactly 36 characters</li> </ol>"},{"location":"troubleshooting/common-issues/#issue-wrong-server-url","title":"Issue: Wrong Server URL","text":"<p>Error Message: </p><pre><code>ERROR: Connection refused - Unable to connect to server\nERROR: UnknownHostException: epmware-server.com\n</code></pre><p></p> <p>Cause: Incorrect server URL or hostname.</p> <p>Solution:</p> <ol> <li> <p>Verify URL format: </p><pre><code># Cloud\new.portal.url=https://client.epmwarecloud.com\n\n# On-premise (note the port)\new.portal.url=http://internal-server.com:8080/epmware\n</code></pre><p></p> </li> <li> <p>Test connectivity: </p><pre><code># Test DNS\nnslookup your-server.com\n\n# Test HTTPS\ncurl -I https://your-server.com\n\n# Test with browser\n# Navigate to the URL in a web browser\n</code></pre><p></p> </li> <li> <p>Check for typos:</p> </li> <li>No spaces in URL</li> <li>Correct protocol (http:// or https://)</li> <li>Correct port number if required</li> </ol>"},{"location":"troubleshooting/common-issues/#issue-path-format-problems","title":"Issue: Path Format Problems","text":"<p>Error Message: </p><pre><code>ERROR: Invalid path: C:cygwin64homeAdministrator\nERROR: Cannot find directory: /home/Administrator\n</code></pre><p></p> <p>Cause: Incorrect path format in configuration.</p> <p>Solution:</p> <p>Windows paths in agent.properties: </p><pre><code># Use four backslashes\nagent.root.dir=C:\\\\\\\\cygwin64\\\\\\\\home\\\\\\\\Administrator\n\n# Or use forward slashes\nagent.root.dir=C:/cygwin64/home/Administrator\n</code></pre><p></p> <p>Linux paths: </p><pre><code>agent.root.dir=/home/epmadmin\n</code></pre><p></p>"},{"location":"troubleshooting/common-issues/#runtime-issues","title":"Runtime Issues","text":""},{"location":"troubleshooting/common-issues/#issue-agent-starts-then-immediately-stops","title":"Issue: Agent Starts Then Immediately Stops","text":"<p>Error Messages: </p><pre><code>Agent started with PID: 12345\nProcess terminated unexpectedly\n</code></pre><p></p> <p>Cause: Configuration error, missing files, or resource issues.</p> <p>Solution:</p> <ol> <li> <p>Check configuration syntax: </p><pre><code># Validate properties file\ngrep -E \"^[^#].*=\" agent.properties | while read line; do\n    echo \"Checking: $line\"\ndone\n</code></pre><p></p> </li> <li> <p>Verify all files present: </p><pre><code>ls -la epmware-agent.jar agent.properties ew_target_service.sh\n</code></pre><p></p> </li> <li> <p>Check Java heap: </p><pre><code># Increase memory if needed\njava -Xmx2048m -jar epmware-agent.jar --spring.config.name=agent\n</code></pre><p></p> </li> <li> <p>Review logs immediately: </p><pre><code>tail -50 logs/agent.log\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#issue-high-memory-usage","title":"Issue: High Memory Usage","text":"<p>Symptoms: - Agent consuming excessive RAM - System becoming slow - OutOfMemoryError in logs</p> <p>Solution:</p> <ol> <li> <p>Adjust JVM settings: </p><pre><code># In ew_target_service.sh\nJAVA_OPTS=\"-Xms512m -Xmx1024m\"  # Reduce from defaults\nJAVA_OPTS=\"$JAVA_OPTS -XX:+UseG1GC\"\nJAVA_OPTS=\"$JAVA_OPTS -XX:MaxGCPauseMillis=200\"\n</code></pre><p></p> </li> <li> <p>Monitor memory usage: </p><pre><code># Check current usage\nps aux | grep epmware | awk '{print $4, $6}'\n\n# Monitor over time\ntop -p $(pgrep -f epmware)\n</code></pre><p></p> </li> <li> <p>Implement memory limits: </p><pre><code># Linux systemd\nMemoryLimit=1G\nMemoryMax=1G\n\n# Or use ulimit\nulimit -v 1048576  # 1GB in KB\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#issue-agent-not-polling","title":"Issue: Agent Not Polling","text":"<p>Symptoms: - No entries in agent-poll.log - Deployments not processing - Agent running but inactive</p> <p>Solution:</p> <ol> <li> <p>Check polling configuration: </p><pre><code># Verify interval is set (milliseconds)\nagent.interval.millisecond=30000  # 30 seconds\n</code></pre><p></p> </li> <li> <p>Check network connectivity: </p><pre><code># Test connection to EPMware\ncurl -H \"Authorization: Bearer YOUR-TOKEN\" \\\n     https://your-server/api/v1/agent/tasks\n</code></pre><p></p> </li> <li> <p>Review agent logs: </p><pre><code>grep -i poll logs/agent.log | tail -20\n</code></pre><p></p> </li> <li> <p>Restart agent: </p><pre><code># Stop\npkill -f epmware-agent\n\n# Start\n./ew_target_service.sh &amp;\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#network-issues","title":"Network Issues","text":""},{"location":"troubleshooting/common-issues/#issue-connection-timeout","title":"Issue: Connection Timeout","text":"<p>Error Message: </p><pre><code>java.net.SocketTimeoutException: Read timed out\nERROR: Connection timeout after 30000ms\n</code></pre><p></p> <p>Cause: Network latency, firewall blocking, or server not responding.</p> <p>Solution:</p> <ol> <li> <p>Increase timeout: </p><pre><code># In agent.properties\nagent.connection.timeout=60000  # 60 seconds\nagent.read.timeout=60000\n</code></pre><p></p> </li> <li> <p>Check firewall: </p><pre><code># Linux\nsudo iptables -L -n | grep 443\n\n# Windows\nnetsh advfirewall firewall show rule name=all | find \"443\"\n</code></pre><p></p> </li> <li> <p>Test with longer timeout: </p><pre><code>curl --max-time 60 -I https://your-server.com\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#issue-proxy-configuration-problems","title":"Issue: Proxy Configuration Problems","text":"<p>Error Message: </p><pre><code>ERROR: Unable to tunnel through proxy\nERROR: Proxy authentication failed\n</code></pre><p></p> <p>Solution:</p> <ol> <li> <p>Configure proxy in agent.properties: </p><pre><code>http.proxyHost=proxy.company.com\nhttp.proxyPort=8080\nhttps.proxyHost=proxy.company.com\nhttps.proxyPort=8080\n\n# With authentication\nhttp.proxyUser=username\nhttp.proxyPassword=password\n</code></pre><p></p> </li> <li> <p>Set environment variables: </p><pre><code>export HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport NO_PROXY=localhost,127.0.0.1\n</code></pre><p></p> </li> <li> <p>Test proxy connectivity: </p><pre><code>curl -x proxy.company.com:8080 https://your-server.com\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#application-specific-issues","title":"Application-Specific Issues","text":""},{"location":"troubleshooting/common-issues/#issue-hfm-registry-file-not-found","title":"Issue: HFM Registry File Not Found","text":"<p>Error Message: </p><pre><code>ERROR: Cannot find reg.properties file\nERROR: HFM initialization failed\n</code></pre><p></p> <p>Solution:</p> <ol> <li> <p>Copy registry file: </p><pre><code># Windows\ncopy D:\\Oracle\\Middleware\\user_projects\\config\\foundation\\11.1.2.0\\reg.properties ^\n     D:\\Oracle\\Middleware\\user_projects\\epmsystem1\\config\\foundation\\11.1.2.0\\\n\n# Linux\ncp /opt/Oracle/Middleware/user_projects/config/foundation/11.1.2.0/reg.properties \\\n   /opt/Oracle/Middleware/user_projects/epmsystem1/config/foundation/11.1.2.0/\n</code></pre><p></p> </li> <li> <p>Verify permissions: </p><pre><code>ls -la /path/to/reg.properties\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#issue-planning-password-file-problems","title":"Issue: Planning Password File Problems","text":"<p>Error Message: </p><pre><code>ERROR: Cannot read password file\nERROR: Invalid encrypted password\n</code></pre><p></p> <p>Solution:</p> <ol> <li> <p>Generate password file: </p><pre><code>cd /opt/Oracle/Middleware/user_projects/epmsystem1/Planning/planning1\n./PasswordEncryption.sh password_file.txt\n</code></pre><p></p> </li> <li> <p>Update configuration: </p><pre><code># In EPMware application properties\nPASSWORD_FILE=/opt/Oracle/password_file.txt\n</code></pre><p></p> </li> <li> <p>Check file permissions: </p><pre><code>chmod 600 password_file.txt\nchown planning_user password_file.txt\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#issue-epm-automate-not-found-cloud","title":"Issue: EPM Automate Not Found (Cloud)","text":"<p>Error Message: </p><pre><code>ERROR: epmautomate: command not found\nERROR: Cannot execute EPM Automate utility\n</code></pre><p></p> <p>Solution:</p> <ol> <li> <p>Install EPM Automate: </p><pre><code># Download from Oracle Cloud\nwget https://cloud-url/epmautomate.tar\n\n# Extract\ntar xf epmautomate.tar -C /home/epmadmin/\n\n# Add to PATH\nexport PATH=$PATH:/home/epmadmin/epmautomate/bin\n</code></pre><p></p> </li> <li> <p>Test EPM Automate: </p><pre><code>epmautomate login username password url\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#quick-resolution-checklist","title":"Quick Resolution Checklist","text":"<p>When encountering any issue, check these items in order:</p> <ol> <li> <p>\u2713 Java installed and in PATH </p><pre><code>java -version\n</code></pre><p></p> </li> <li> <p>\u2713 Agent files in correct location </p><pre><code>ls -la ~/epmware-agent.jar\n</code></pre><p></p> </li> <li> <p>\u2713 Configuration file valid </p><pre><code>grep -v \"^#\" agent.properties\n</code></pre><p></p> </li> <li> <p>\u2713 Token is valid </p><pre><code># 36 characters, UUID format\n</code></pre><p></p> </li> <li> <p>\u2713 Network connectivity </p><pre><code>ping your-server.com\n</code></pre><p></p> </li> <li> <p>\u2713 Correct permissions </p><pre><code>ls -la agent.properties ew_target_service.sh\n</code></pre><p></p> </li> <li> <p>\u2713 Recent errors in logs </p><pre><code>tail -50 logs/agent.log | grep ERROR\n</code></pre><p></p> </li> <li> <p>\u2713 Process is running </p><pre><code>ps aux | grep epmware\n</code></pre><p></p> </li> <li> <p>\u2713 Sufficient resources </p><pre><code>free -h  # Memory\ndf -h    # Disk\n</code></pre><p></p> </li> <li> <p>\u2713 Service/task configured correctly </p><pre><code># Windows: Task Scheduler\n# Linux: systemctl status epmware-agent\n</code></pre><p></p> </li> </ol> <p>Prevention</p> <p>Most issues can be prevented by carefully following installation instructions and regularly reviewing agent logs for warnings before they become errors.</p> <p>Still Having Issues?</p> <p>If problems persist after trying these solutions, collect diagnostic information and contact EPMware Support at support@epmware.com.</p>"},{"location":"troubleshooting/common-issues/#next-steps","title":"Next Steps","text":"<ul> <li>Connection Problems - Network-specific issues</li> <li>Password Issues - Authentication problems</li> <li>Service Errors - Service configuration issues</li> <li>Debug Mode - Enable detailed logging</li> </ul>"},{"location":"troubleshooting/connection/","title":"Connection Problems","text":""},{"location":"troubleshooting/connection/#connection-problems","title":"Connection Problems","text":"<p>This guide helps diagnose and resolve network connectivity issues between the EPMware Agent and EPMware server or target applications.</p>"},{"location":"troubleshooting/connection/#connection-diagnostic-flow","title":"Connection Diagnostic Flow","text":"<pre><code>graph TD\n    A[Connection Issue] --&gt; B{Can ping server?}\n    B --&gt;|No| C[DNS/Network Issue]\n    B --&gt;|Yes| D{Can reach port?}\n    C --&gt; E[Check DNS/Routing]\n    D --&gt;|No| F[Firewall Issue]\n    D --&gt;|Yes| G{HTTPS works?}\n    F --&gt; H[Check Firewall Rules]\n    G --&gt;|No| I[SSL/Certificate Issue]\n    G --&gt;|Yes| J{Authentication OK?}\n    I --&gt; K[Certificate Configuration]\n    J --&gt;|No| L[Token/Credentials Issue]\n    J --&gt;|Yes| M[Application-specific Issue]\n</code></pre>"},{"location":"troubleshooting/connection/#network-connectivity-issues","title":"Network Connectivity Issues","text":""},{"location":"troubleshooting/connection/#issue-cannot-reach-epmware-server","title":"Issue: Cannot Reach EPMware Server","text":"<p>Error Messages: </p><pre><code>java.net.UnknownHostException: epmware-server.com\njava.net.NoRouteToHostException: No route to host\nConnection refused: connect\n</code></pre><p></p> <p>Diagnosis:</p> <ol> <li> <p>Test basic connectivity: </p><pre><code># Ping test\nping epmware-server.com\n\n# If ping is blocked, try DNS lookup\nnslookup epmware-server.com\nhost epmware-server.com\n\n# Check routing\ntraceroute epmware-server.com  # Linux\ntracert epmware-server.com      # Windows\n</code></pre><p></p> </li> <li> <p>Check DNS resolution: </p><pre><code># Test DNS servers\ndig epmware-server.com\ndig @8.8.8.8 epmware-server.com  # Test with Google DNS\n\n# Check /etc/hosts (Linux) or C:\\Windows\\System32\\drivers\\etc\\hosts\ncat /etc/hosts | grep epmware\n</code></pre><p></p> </li> <li> <p>Verify network interface: </p><pre><code># Linux\nip addr show\nifconfig\n\n# Windows\nipconfig /all\n</code></pre><p></p> </li> </ol> <p>Solutions:</p> <ol> <li> <p>DNS Issues: </p><pre><code># Add to /etc/hosts as temporary fix\necho \"192.168.1.100 epmware-server.com\" &gt;&gt; /etc/hosts\n\n# Or fix DNS configuration\n# Linux\necho \"nameserver 8.8.8.8\" &gt;&gt; /etc/resolv.conf\n\n# Windows\nnetsh interface ip set dns \"Local Area Connection\" static 8.8.8.8\n</code></pre><p></p> </li> <li> <p>Routing Issues: </p><pre><code># Add route if needed (Linux)\nsudo ip route add 192.168.1.0/24 via 192.168.0.1\n\n# Windows\nroute add 192.168.1.0 mask 255.255.255.0 192.168.0.1\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/connection/#issue-port-connection-failures","title":"Issue: Port Connection Failures","text":"<p>Error Messages: </p><pre><code>java.net.ConnectException: Connection timed out\njava.net.SocketTimeoutException: connect timed out\nUnable to connect to port 443\n</code></pre><p></p> <p>Diagnosis:</p> <ol> <li> <p>Test port connectivity: </p><pre><code># Using telnet\ntelnet epmware-server.com 443\n\n# Using nc (netcat)\nnc -zv epmware-server.com 443\n\n# Using curl\ncurl -v telnet://epmware-server.com:443\n\n# PowerShell (Windows)\nTest-NetConnection -ComputerName epmware-server.com -Port 443\n</code></pre><p></p> </li> <li> <p>Check local firewall: </p><pre><code># Linux iptables\nsudo iptables -L -n | grep 443\nsudo iptables -L OUTPUT -n -v\n\n# Linux firewalld\nsudo firewall-cmd --list-all\n\n# Windows\nnetsh advfirewall firewall show rule name=all | find \"443\"\n</code></pre><p></p> </li> <li> <p>Check for port conflicts: </p><pre><code># See what's using the port\nnetstat -an | grep 443\nlsof -i :443  # Linux\n</code></pre><p></p> </li> </ol> <p>Solutions:</p> <ol> <li>Open firewall ports:</li> </ol> <p>Linux (iptables): </p><pre><code># Allow outbound HTTPS\nsudo iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables -A INPUT -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEPT\n\n# Save rules\nsudo iptables-save &gt; /etc/iptables/rules.v4\n</code></pre><p></p> <p>Linux (firewalld): </p><pre><code>sudo firewall-cmd --zone=public --add-port=443/tcp --permanent\nsudo firewall-cmd --reload\n</code></pre><p></p> <p>Windows: </p><pre><code># Create outbound rule\nNew-NetFirewallRule -DisplayName \"EPMware HTTPS Out\" `\n    -Direction Outbound -Protocol TCP -RemotePort 443 `\n    -Action Allow\n\n# Create inbound rule for responses\nNew-NetFirewallRule -DisplayName \"EPMware HTTPS In\" `\n    -Direction Inbound -Protocol TCP -LocalPort 443 `\n    -Action Allow\n</code></pre><p></p> <ol> <li>Configure for non-standard ports: <pre><code># If EPMware uses non-standard port\new.portal.url=https://epmware-server.com:8443\n</code></pre></li> </ol>"},{"location":"troubleshooting/connection/#proxy-configuration-issues","title":"Proxy Configuration Issues","text":""},{"location":"troubleshooting/connection/#issue-cannot-connect-through-proxy","title":"Issue: Cannot Connect Through Proxy","text":"<p>Error Messages: </p><pre><code>java.net.SocketException: Connection reset\nProxyAuthenticationRequired\nUnable to tunnel through proxy\nHTTP/1.1 407 Proxy Authentication Required\n</code></pre><p></p> <p>Diagnosis:</p> <ol> <li> <p>Test proxy connectivity: </p><pre><code># Test with curl\ncurl -x proxy.company.com:8080 https://epmware-server.com\n\n# With authentication\ncurl -x proxy.company.com:8080 -U username:password https://epmware-server.com\n\n# Environment variables\necho $HTTP_PROXY\necho $HTTPS_PROXY\n</code></pre><p></p> </li> <li> <p>Check proxy settings: </p><pre><code># Java system properties\njava -Dhttp.proxyHost=proxy.company.com \\\n     -Dhttp.proxyPort=8080 \\\n     -Dhttps.proxyHost=proxy.company.com \\\n     -Dhttps.proxyPort=8080 \\\n     -jar epmware-agent.jar --test\n</code></pre><p></p> </li> </ol> <p>Solutions:</p> <ol> <li> <p>Configure proxy in agent.properties: </p><pre><code># Basic proxy configuration\nhttp.proxyHost=proxy.company.com\nhttp.proxyPort=8080\nhttps.proxyHost=proxy.company.com\nhttps.proxyPort=8080\n\n# With authentication\nhttp.proxyUser=your_username\nhttp.proxyPassword=your_password\n\n# Non-proxy hosts\nhttp.nonProxyHosts=localhost|127.0.0.1|*.internal.com\n</code></pre><p></p> </li> <li> <p>Set environment variables: </p><pre><code># Linux/Unix\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport NO_PROXY=localhost,127.0.0.1,internal.com\n\n# Windows\nset HTTP_PROXY=http://proxy.company.com:8080\nset HTTPS_PROXY=http://proxy.company.com:8080\nset NO_PROXY=localhost,127.0.0.1,internal.com\n</code></pre><p></p> </li> <li> <p>Configure Java system properties: </p><pre><code># In ew_target_service.sh\nJAVA_OPTS=\"-Dhttp.proxyHost=proxy.company.com\"\nJAVA_OPTS=\"$JAVA_OPTS -Dhttp.proxyPort=8080\"\nJAVA_OPTS=\"$JAVA_OPTS -Dhttps.proxyHost=proxy.company.com\"\nJAVA_OPTS=\"$JAVA_OPTS -Dhttps.proxyPort=8080\"\nJAVA_OPTS=\"$JAVA_OPTS -Dhttp.proxyUser=username\"\nJAVA_OPTS=\"$JAVA_OPTS -Dhttp.proxyPassword=password\"\n\njava $JAVA_OPTS -jar epmware-agent.jar --spring.config.name=agent\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/connection/#ssltls-certificate-issues","title":"SSL/TLS Certificate Issues","text":""},{"location":"troubleshooting/connection/#issue-certificate-validation-failures","title":"Issue: Certificate Validation Failures","text":"<p>Error Messages: </p><pre><code>javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException\nPKIX path building failed\nunable to find valid certification path to requested target\nCertificate verify failed\n</code></pre><p></p> <p>Diagnosis:</p> <ol> <li> <p>Check certificate: </p><pre><code># View server certificate\nopenssl s_client -connect epmware-server.com:443 -showcerts\n\n# Save certificate\necho | openssl s_client -connect epmware-server.com:443 2&gt;/dev/null | \\\n    openssl x509 -out epmware.crt\n\n# Verify certificate\nopenssl x509 -in epmware.crt -text -noout\n</code></pre><p></p> </li> <li> <p>Check Java truststore: </p><pre><code># List certificates in Java truststore\nkeytool -list -keystore $JAVA_HOME/lib/security/cacerts -storepass changeit\n\n# Check for specific certificate\nkeytool -list -keystore $JAVA_HOME/lib/security/cacerts -storepass changeit | \\\n    grep epmware\n</code></pre><p></p> </li> </ol> <p>Solutions:</p> <ol> <li> <p>Import certificate to Java truststore: </p><pre><code># Download certificate\nopenssl s_client -connect epmware-server.com:443 &lt;/dev/null | \\\n    openssl x509 -outform PEM &gt; epmware.crt\n\n# Import to Java truststore\nkeytool -import -trustcacerts -keystore $JAVA_HOME/lib/security/cacerts \\\n    -storepass changeit -alias epmware -file epmware.crt\n\n# Verify import\nkeytool -list -keystore $JAVA_HOME/lib/security/cacerts -storepass changeit \\\n    -alias epmware\n</code></pre><p></p> </li> <li> <p>Use custom truststore: </p><pre><code># Create custom truststore\nkeytool -import -file epmware.crt -alias epmware \\\n    -keystore custom-truststore.jks -storepass mypassword\n\n# Use custom truststore\nJAVA_OPTS=\"-Djavax.net.ssl.trustStore=/path/to/custom-truststore.jks\"\nJAVA_OPTS=\"$JAVA_OPTS -Djavax.net.ssl.trustStorePassword=mypassword\"\n\njava $JAVA_OPTS -jar epmware-agent.jar --spring.config.name=agent\n</code></pre><p></p> </li> <li> <p>Disable certificate validation (NOT for production): </p><pre><code># Temporary for testing only\njava -Dcom.sun.net.ssl.checkRevocation=false \\\n     -Dtrust.all.certificates=true \\\n     -jar epmware-agent.jar --test\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/connection/#timeout-issues","title":"Timeout Issues","text":""},{"location":"troubleshooting/connection/#issue-connection-timeouts","title":"Issue: Connection Timeouts","text":"<p>Error Messages: </p><pre><code>java.net.SocketTimeoutException: Read timed out\nConnection timeout after 30000ms\nRequest timeout after waiting for 30000ms\n</code></pre><p></p> <p>Diagnosis:</p> <ol> <li> <p>Test response time: </p><pre><code># Measure connection time\ntime curl -I https://epmware-server.com\n\n# Test with different timeouts\ncurl --connect-timeout 60 --max-time 120 https://epmware-server.com\n\n# Ping latency\nping -c 10 epmware-server.com | tail -1\n</code></pre><p></p> </li> <li> <p>Check network latency: </p><pre><code># Traceroute with timing\ntraceroute -n epmware-server.com\n\n# MTR for continuous monitoring (Linux)\nmtr epmware-server.com\n</code></pre><p></p> </li> </ol> <p>Solutions:</p> <ol> <li> <p>Increase timeout values: </p><pre><code># In agent.properties\nagent.connection.timeout=60000  # 60 seconds\nagent.read.timeout=60000\nagent.write.timeout=60000\nagent.socket.timeout=60000\n</code></pre><p></p> </li> <li> <p>Configure Java timeouts: </p><pre><code># System properties\nJAVA_OPTS=\"-Dsun.net.client.defaultConnectTimeout=60000\"\nJAVA_OPTS=\"$JAVA_OPTS -Dsun.net.client.defaultReadTimeout=60000\"\n</code></pre><p></p> </li> <li> <p>Optimize network path: </p><pre><code># Increase TCP buffer sizes (Linux)\nsudo sysctl -w net.core.rmem_max=134217728\nsudo sysctl -w net.core.wmem_max=134217728\nsudo sysctl -w net.ipv4.tcp_rmem=\"4096 87380 134217728\"\nsudo sysctl -w net.ipv4.tcp_wmem=\"4096 65536 134217728\"\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/connection/#authentication-issues","title":"Authentication Issues","text":""},{"location":"troubleshooting/connection/#issue-401-unauthorized","title":"Issue: 401 Unauthorized","text":"<p>Error Messages: </p><pre><code>HTTP 401 Unauthorized\nAuthentication failed: Invalid token\nAccess denied: Invalid credentials\n</code></pre><p></p> <p>Diagnosis:</p> <ol> <li> <p>Test token/credentials: </p><pre><code># Test with curl\ncurl -H \"Authorization: Bearer YOUR-TOKEN-HERE\" \\\n     https://epmware-server.com/api/v1/health\n\n# Verbose output\ncurl -v -H \"Authorization: Bearer YOUR-TOKEN-HERE\" \\\n     https://epmware-server.com/api/v1/health\n</code></pre><p></p> </li> <li> <p>Verify token format: </p><pre><code># Check token in config\ngrep ew.portal.token agent.properties\n\n# Token should be 36 characters, UUID format\necho \"YOUR-TOKEN\" | wc -c  # Should be 37 (36 + newline)\n</code></pre><p></p> </li> </ol> <p>Solutions:</p> <ol> <li>Regenerate token:</li> <li>Log into EPMware</li> <li>Navigate to Users</li> <li>Generate new token</li> <li> <p>Update agent.properties</p> </li> <li> <p>Fix token formatting: </p><pre><code># Remove any extra spaces or characters\nsed -i 's/ew.portal.token=.*/ew.portal.token=YOUR-NEW-TOKEN/' agent.properties\n\n# Ensure no trailing spaces\nsed -i 's/[[:space:]]*$//' agent.properties\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/connection/#load-balancer-issues","title":"Load Balancer Issues","text":""},{"location":"troubleshooting/connection/#issue-intermittent-connection-failures","title":"Issue: Intermittent Connection Failures","text":"<p>Symptoms: - Connections work sometimes - Different responses from same requests - Session/authentication issues</p> <p>Diagnosis:</p> <pre><code># Check for multiple IPs\nnslookup epmware-server.com\n\n# Test each IP directly\nfor ip in 192.168.1.10 192.168.1.11; do\n    curl -I http://$ip\ndone\n\n# Check for sticky sessions\ncurl -c cookies.txt -b cookies.txt https://epmware-server.com/api/test\n</code></pre> <p>Solutions:</p> <ol> <li> <p>Configure for load balancer: </p><pre><code># Use sticky sessions\nagent.http.cookie.enabled=true\nagent.http.cookie.store=true\n\n# Longer keep-alive\nagent.http.keepalive=true\nagent.http.keepalive.timeout=300000\n</code></pre><p></p> </li> <li> <p>Use specific server: </p><pre><code># Bypass load balancer if possible\new.portal.url=https://epmware-node1.com:8080\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/connection/#connection-pool-issues","title":"Connection Pool Issues","text":""},{"location":"troubleshooting/connection/#issue-connection-pool-exhausted","title":"Issue: Connection Pool Exhausted","text":"<p>Error Messages: </p><pre><code>Connection pool exhausted\nUnable to acquire connection from pool\nTimeout waiting for connection from pool\n</code></pre><p></p> <p>Solutions:</p> <ol> <li> <p>Increase pool size: </p><pre><code># Connection pool settings\nconnection.pool.max.total=50\nconnection.pool.max.per.route=10\nconnection.pool.timeout=30000\n</code></pre><p></p> </li> <li> <p>Configure pool management: </p><pre><code># Pool maintenance\nconnection.pool.validate.after.inactivity=5000\nconnection.pool.evict.idle.timeout=60000\nconnection.pool.time.to.live=300000\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/connection/#network-diagnostic-scripts","title":"Network Diagnostic Scripts","text":""},{"location":"troubleshooting/connection/#comprehensive-network-test","title":"Comprehensive Network Test","text":"<pre><code>#!/bin/bash\n# network_diagnostic.sh\n\nSERVER=\"epmware-server.com\"\nPORT=\"443\"\n\necho \"=== Network Diagnostics for $SERVER:$PORT ===\"\n\n# DNS Resolution\necho -e \"\\n--- DNS Resolution ---\"\nnslookup $SERVER\ndig +short $SERVER\n\n# Ping Test\necho -e \"\\n--- Ping Test ---\"\nping -c 4 $SERVER\n\n# Port Connectivity\necho -e \"\\n--- Port Connectivity ---\"\nnc -zv $SERVER $PORT 2&gt;&amp;1\ntimeout 5 bash -c \"cat &lt; /dev/null &gt; /dev/tcp/$SERVER/$PORT\" &amp;&amp; \\\n    echo \"Port $PORT is open\" || echo \"Port $PORT is closed\"\n\n# Traceroute\necho -e \"\\n--- Traceroute ---\"\ntraceroute -n -m 15 $SERVER\n\n# SSL Certificate\necho -e \"\\n--- SSL Certificate ---\"\necho | openssl s_client -connect $SERVER:$PORT 2&gt;/dev/null | \\\n    openssl x509 -noout -dates\n\n# HTTP Test\necho -e \"\\n--- HTTP Test ---\"\ncurl -I https://$SERVER\n\necho -e \"\\n=== Diagnostics Complete ===\"\n</code></pre>"},{"location":"troubleshooting/connection/#connection-monitor","title":"Connection Monitor","text":"<pre><code>#!/bin/bash\n# monitor_connection.sh\n\nwhile true; do\n    timestamp=$(date '+%Y-%m-%d %H:%M:%S')\n\n    # Test connection\n    if curl -s -o /dev/null -w \"%{http_code}\" https://epmware-server.com | \\\n       grep -q \"200\"; then\n        echo \"$timestamp: Connection OK\"\n    else\n        echo \"$timestamp: Connection FAILED\"\n\n        # Additional diagnostics on failure\n        ping -c 1 epmware-server.com &gt; /dev/null 2&gt;&amp;1 || \\\n            echo \"$timestamp: Ping failed\"\n\n        nc -zv epmware-server.com 443 &gt; /dev/null 2&gt;&amp;1 || \\\n            echo \"$timestamp: Port 443 unreachable\"\n    fi\n\n    sleep 30\ndone\n</code></pre>"},{"location":"troubleshooting/connection/#best-practices-for-connection-stability","title":"Best Practices for Connection Stability","text":""},{"location":"troubleshooting/connection/#network-configuration","title":"Network Configuration","text":"<ol> <li>Use static IPs when possible - Avoid DNS issues</li> <li>Configure redundant DNS servers - Prevent DNS failures</li> <li>Set appropriate timeouts - Balance between reliability and performance</li> <li>Monitor network metrics - Track latency and packet loss</li> </ol>"},{"location":"troubleshooting/connection/#security-configuration","title":"Security Configuration","text":"<ol> <li>Keep certificates updated - Prevent expiration issues</li> <li>Use strong cipher suites - Ensure compatibility</li> <li>Rotate tokens regularly - Maintain security</li> <li>Document firewall rules - Track what's allowed</li> </ol>"},{"location":"troubleshooting/connection/#troubleshooting-approach","title":"Troubleshooting Approach","text":"<ol> <li>Start with basics - Ping, DNS, port checks</li> <li>Work up the stack - Network \u2192 Transport \u2192 Application</li> <li>Use verbose logging - Enable debug for details</li> <li>Test incrementally - Isolate each component</li> <li>Document findings - Record what works</li> </ol> <p>Connection Testing Order</p> <p>Always test connectivity in this order: DNS resolution \u2192 Network routing \u2192 Port accessibility \u2192 SSL/TLS \u2192 Authentication \u2192 Application</p> <p>Security Considerations</p> <p>Never disable certificate validation or use weak ciphers in production. These should only be used temporarily for troubleshooting.</p>"},{"location":"troubleshooting/connection/#next-steps","title":"Next Steps","text":"<ul> <li>Common Issues - General troubleshooting</li> <li>Password Issues - Authentication problems</li> <li>Service Errors - Service-related issues</li> <li>Debug Mode - Enable detailed logging for connection issues</li> </ul>"},{"location":"troubleshooting/debug-mode/","title":"Debug Mode","text":""},{"location":"troubleshooting/debug-mode/#debug-mode","title":"Debug Mode","text":"<p>Debug mode provides detailed logging and diagnostic information for troubleshooting complex issues with the EPMware Agent. This guide covers enabling debug mode, interpreting debug output, and using debug information effectively.</p>"},{"location":"troubleshooting/debug-mode/#enabling-debug-mode","title":"Enabling Debug Mode","text":""},{"location":"troubleshooting/debug-mode/#method-1-configuration-file","title":"Method 1: Configuration File","text":"<p>Add debug settings to <code>agent.properties</code>:</p> <pre><code># Enable debug logging\nagent.log.level=DEBUG\nagent.debug.enabled=true\n\n# Optional: Enable specific debug categories\nagent.debug.connection=true\nagent.debug.commands=true\nagent.debug.deployment=true\nagent.debug.authentication=true\n</code></pre>"},{"location":"troubleshooting/debug-mode/#method-2-environment-variable","title":"Method 2: Environment Variable","text":"<p>Set environment variable before starting agent:</p> <p>Linux: </p><pre><code>export AGENT_DEBUG=true\nexport AGENT_LOG_LEVEL=DEBUG\n./ew_target_service.sh\n</code></pre><p></p> <p>Windows (PowerShell): </p><pre><code>$env:AGENT_DEBUG = \"true\"\n$env:AGENT_LOG_LEVEL = \"DEBUG\"\n.\\ew_target_service.bat\n</code></pre><p></p>"},{"location":"troubleshooting/debug-mode/#method-3-jvm-arguments","title":"Method 3: JVM Arguments","text":"<p>Modify the startup script to include debug flags:</p> <pre><code># In ew_target_service.sh\njava -Dagent.debug=true \\\n     -Dlog.level=DEBUG \\\n     -Xdebug \\\n     -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005 \\\n     -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"troubleshooting/debug-mode/#debug-output-levels","title":"Debug Output Levels","text":""},{"location":"troubleshooting/debug-mode/#log-levels-explained","title":"Log Levels Explained","text":"Level Description Use Case ERROR Critical failures only Production normal operation WARN Warnings and errors Production monitoring INFO Standard operational logs Default level DEBUG Detailed diagnostic info Troubleshooting TRACE Maximum verbosity Deep debugging"},{"location":"troubleshooting/debug-mode/#sample-debug-output","title":"Sample Debug Output","text":"<pre><code>2023-11-15 10:30:45.123 DEBUG [main] c.e.agent.AgentMain - Starting EPMware Agent v2.5.0\n2023-11-15 10:30:45.234 DEBUG [main] c.e.agent.config.Config - Loading configuration from: agent.properties\n2023-11-15 10:30:45.345 DEBUG [main] c.e.agent.config.Config - Configuration loaded:\n  - Portal URL: https://epmware.company.com\n  - Server Name: HFM-PROD-01\n  - Poll Interval: 30000ms\n  - Debug Mode: ENABLED\n2023-11-15 10:30:45.456 DEBUG [pool-1] c.e.agent.connection.Client - Initializing HTTP client\n2023-11-15 10:30:45.567 DEBUG [pool-1] c.e.agent.connection.Client - Setting connection timeout: 30000ms\n2023-11-15 10:30:45.678 DEBUG [pool-1] c.e.agent.auth.TokenAuth - Using token authentication\n2023-11-15 10:30:45.789 TRACE [pool-1] c.e.agent.auth.TokenAuth - Token: 2e6d4103-5145-4c30-9837-ac6d14797523\n2023-11-15 10:30:46.890 DEBUG [pool-1] c.e.agent.connection.Client - Connecting to: https://epmware.company.com/api/agent/poll\n2023-11-15 10:30:47.123 DEBUG [pool-1] c.e.agent.connection.Client - Response: 200 OK\n2023-11-15 10:30:47.234 DEBUG [pool-2] c.e.agent.commands.CommandProcessor - Received command: DEPLOY\n2023-11-15 10:30:47.345 DEBUG [pool-2] c.e.agent.commands.Deploy - Deployment parameters:\n  - Application: HFM_PROD\n  - Request ID: 12345\n  - Action: METADATA_DEPLOY\n</code></pre>"},{"location":"troubleshooting/debug-mode/#debug-categories","title":"Debug Categories","text":""},{"location":"troubleshooting/debug-mode/#connection-debugging","title":"Connection Debugging","text":"<p>Enable to troubleshoot network and connectivity issues:</p> <pre><code>agent.debug.connection=true\nagent.debug.connection.verbose=true\n</code></pre> <p>Debug output includes: - Connection attempts and retries - URL construction - Request/response headers - SSL handshake details - Proxy configuration - Timeout occurrences</p> <p>Sample connection debug: </p><pre><code>DEBUG [connection] Attempting connection to: epmware.company.com:443\nDEBUG [connection] Proxy configured: proxy.company.com:8080\nDEBUG [connection] SSL Protocol: TLSv1.2\nDEBUG [connection] Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\nDEBUG [connection] Certificate chain validated successfully\nDEBUG [connection] Connection established in 245ms\n</code></pre><p></p>"},{"location":"troubleshooting/debug-mode/#command-debugging","title":"Command Debugging","text":"<p>Enable to see detailed command processing:</p> <pre><code>agent.debug.commands=true\nagent.debug.commands.show.output=true\n</code></pre> <p>Debug output includes: - Command construction - Parameter substitution - Shell execution details - Output capture - Exit codes</p> <p>Sample command debug: </p><pre><code>DEBUG [command] Executing command: importmetadata.bat\nDEBUG [command] Working directory: D:\\Oracle\\EPM\\bin\nDEBUG [command] Environment variables:\n  - ORACLE_HOME=D:\\Oracle\\Middleware\n  - EPM_ORACLE_INSTANCE=D:\\Oracle\\Middleware\\user_projects\\epmsystem1\nDEBUG [command] Command arguments:\n  - -application \"HFM_PROD\"\n  - -metadatafile \"D:\\temp\\metadata_20231115.xml\"\nDEBUG [command] Process started: PID=5678\nDEBUG [command] Command output:\n  Loading metadata...\n  Processing dimensions...\n  Validation complete\n  Import successful\nDEBUG [command] Exit code: 0\nDEBUG [command] Execution time: 45.2 seconds\n</code></pre><p></p>"},{"location":"troubleshooting/debug-mode/#deployment-debugging","title":"Deployment Debugging","text":"<p>Enable for detailed deployment troubleshooting:</p> <pre><code>agent.debug.deployment=true\nagent.debug.deployment.show.files=true\n</code></pre> <p>Debug output includes: - File transfers - Deployment staging - Validation steps - Rollback procedures</p>"},{"location":"troubleshooting/debug-mode/#authentication-debugging","title":"Authentication Debugging","text":"<p>Enable to troubleshoot authentication issues:</p> <pre><code>agent.debug.authentication=true\n# WARNING: This may log sensitive information\nagent.debug.authentication.show.tokens=false\n</code></pre>"},{"location":"troubleshooting/debug-mode/#interactive-debug-mode","title":"Interactive Debug Mode","text":""},{"location":"troubleshooting/debug-mode/#starting-interactive-debug","title":"Starting Interactive Debug","text":"<p>Start agent with interactive console:</p> <pre><code># Linux\n./ew_target_service.sh --interactive --debug\n\n# Windows\new_target_service.bat /interactive /debug\n</code></pre>"},{"location":"troubleshooting/debug-mode/#interactive-commands","title":"Interactive Commands","text":"<p>Once in interactive mode, use these commands:</p> Command Description <code>status</code> Show current agent status <code>config</code> Display configuration <code>test-connection</code> Test EPMware server connection <code>test-deploy [app]</code> Simulate deployment to application <code>show-logs [n]</code> Display last n log entries <code>set-level [level]</code> Change log level dynamically <code>threads</code> Show active threads <code>memory</code> Display memory usage <code>help</code> Show all available commands <code>quit</code> Exit interactive mode"},{"location":"troubleshooting/debug-mode/#remote-debugging","title":"Remote Debugging","text":""},{"location":"troubleshooting/debug-mode/#enable-jvm-remote-debugging","title":"Enable JVM Remote Debugging","text":"<p>Configure agent for remote debugging with IDE:</p> <pre><code># In ew_target_service.sh\njava -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 \\\n     -jar epmware-agent.jar --spring.config.name=agent\n</code></pre>"},{"location":"troubleshooting/debug-mode/#connect-with-ide","title":"Connect with IDE","text":"<p>IntelliJ IDEA: 1. Run \u2192 Edit Configurations 2. Add \u2192 Remote JVM Debug 3. Host: agent-server.company.com 4. Port: 5005 5. Click Debug</p> <p>Eclipse: 1. Run \u2192 Debug Configurations 2. Remote Java Application \u2192 New 3. Host: agent-server.company.com 4. Port: 5005 5. Click Debug</p> <p>Visual Studio Code: </p><pre><code>// .vscode/launch.json\n{\n  \"type\": \"java\",\n  \"name\": \"Debug EPMware Agent\",\n  \"request\": \"attach\",\n  \"hostName\": \"agent-server.company.com\",\n  \"port\": 5005\n}\n</code></pre><p></p>"},{"location":"troubleshooting/debug-mode/#debug-output-analysis","title":"Debug Output Analysis","text":""},{"location":"troubleshooting/debug-mode/#using-grep-for-debug-analysis","title":"Using grep for Debug Analysis","text":"<p>Common debug analysis commands:</p> <pre><code># Find all DEBUG entries\ngrep DEBUG agent.log\n\n# Find connection issues\ngrep -E \"DEBUG.*connection|timeout|refused\" agent.log\n\n# Find command executions\ngrep \"DEBUG.*command.*Executing\" agent.log\n\n# Find errors with context\ngrep -B5 -A5 ERROR agent.log\n\n# Track specific request\ngrep \"Request ID: 12345\" agent.log\n</code></pre>"},{"location":"troubleshooting/debug-mode/#debug-log-rotation","title":"Debug Log Rotation","text":"<p>Debug mode generates large log files. Configure rotation:</p> <pre><code># In agent.properties\nagent.log.max.size=100MB\nagent.log.max.files=10\nagent.log.compress=true\n</code></pre>"},{"location":"troubleshooting/debug-mode/#performance-impact","title":"Performance Impact","text":"<p>Debug mode impacts performance. Monitor:</p> <pre><code># Check CPU usage\ntop -p $(pgrep -f epmware-agent)\n\n# Check memory\nps aux | grep epmware-agent | awk '{print $4}'\n\n# Check disk I/O\niotop -p $(pgrep -f epmware-agent)\n</code></pre>"},{"location":"troubleshooting/debug-mode/#debug-scripts-and-tools","title":"Debug Scripts and Tools","text":""},{"location":"troubleshooting/debug-mode/#debug-information-collector","title":"Debug Information Collector","text":"<p>Create a script to collect debug information:</p> <p>collect-debug.sh: </p><pre><code>#!/bin/bash\n\nDEBUG_DIR=\"debug-$(date +%Y%m%d-%H%M%S)\"\nmkdir -p $DEBUG_DIR\n\necho \"Collecting debug information...\"\n\n# Agent configuration\ncp agent.properties $DEBUG_DIR/\n\n# Recent logs\ncp logs/agent*.log $DEBUG_DIR/\n\n# System information\necho \"=== System Information ===\" &gt; $DEBUG_DIR/system-info.txt\nuname -a &gt;&gt; $DEBUG_DIR/system-info.txt\necho \"\" &gt;&gt; $DEBUG_DIR/system-info.txt\necho \"=== Java Version ===\" &gt;&gt; $DEBUG_DIR/system-info.txt\njava -version 2&gt;&gt; $DEBUG_DIR/system-info.txt\necho \"\" &gt;&gt; $DEBUG_DIR/system-info.txt\necho \"=== Memory ===\" &gt;&gt; $DEBUG_DIR/system-info.txt\nfree -h &gt;&gt; $DEBUG_DIR/system-info.txt\necho \"\" &gt;&gt; $DEBUG_DIR/system-info.txt\necho \"=== Disk Space ===\" &gt;&gt; $DEBUG_DIR/system-info.txt\ndf -h &gt;&gt; $DEBUG_DIR/system-info.txt\necho \"\" &gt;&gt; $DEBUG_DIR/system-info.txt\necho \"=== Network ===\" &gt;&gt; $DEBUG_DIR/system-info.txt\nnetstat -an | grep ESTABLISHED &gt;&gt; $DEBUG_DIR/system-info.txt\n\n# Process information\nif pgrep -f epmware-agent &gt; /dev/null; then\n    echo \"=== Agent Process ===\" &gt; $DEBUG_DIR/process-info.txt\n    ps aux | grep epmware-agent | grep -v grep &gt;&gt; $DEBUG_DIR/process-info.txt\n    echo \"\" &gt;&gt; $DEBUG_DIR/process-info.txt\n    echo \"=== Thread Dump ===\" &gt;&gt; $DEBUG_DIR/process-info.txt\n    jstack $(pgrep -f epmware-agent) &gt;&gt; $DEBUG_DIR/process-info.txt 2&gt;&amp;1\n    echo \"\" &gt;&gt; $DEBUG_DIR/process-info.txt\n    echo \"=== Heap Info ===\" &gt;&gt; $DEBUG_DIR/process-info.txt\n    jmap -heap $(pgrep -f epmware-agent) &gt;&gt; $DEBUG_DIR/process-info.txt 2&gt;&amp;1\nfi\n\n# Recent errors\necho \"=== Recent Errors ===\" &gt; $DEBUG_DIR/recent-errors.txt\ngrep ERROR logs/agent.log | tail -100 &gt;&gt; $DEBUG_DIR/recent-errors.txt\n\n# Create archive\ntar -czf $DEBUG_DIR.tar.gz $DEBUG_DIR/\nrm -rf $DEBUG_DIR/\n\necho \"Debug information collected: $DEBUG_DIR.tar.gz\"\necho \"Send this file to EPMware support for analysis\"\n</code></pre><p></p>"},{"location":"troubleshooting/debug-mode/#real-time-debug-monitor","title":"Real-time Debug Monitor","text":"<p>Create a script for real-time debug monitoring:</p> <p>monitor-debug.sh: </p><pre><code>#!/bin/bash\n\n# Colors for output\nRED='\\033[0;31m'\nYELLOW='\\033[1;33m'\nGREEN='\\033[0;32m'\nNC='\\033[0m' # No Color\n\nclear\necho \"EPMware Agent Debug Monitor\"\necho \"===========================\"\necho \"Press Ctrl+C to exit\"\necho\n\ntail -f logs/agent.log | while read line; do\n    if echo \"$line\" | grep -q ERROR; then\n        echo -e \"${RED}$line${NC}\"\n    elif echo \"$line\" | grep -q WARN; then\n        echo -e \"${YELLOW}$line${NC}\"\n    elif echo \"$line\" | grep -q DEBUG; then\n        echo -e \"${GREEN}$line${NC}\"\n    else\n        echo \"$line\"\n    fi\ndone\n</code></pre><p></p>"},{"location":"troubleshooting/debug-mode/#debug-best-practices","title":"Debug Best Practices","text":""},{"location":"troubleshooting/debug-mode/#when-to-use-debug-mode","title":"When to Use Debug Mode","text":"<p>\u2705 Use debug mode for: - Initial agent setup and configuration - Troubleshooting connection issues - Investigating deployment failures - Performance analysis - Integration testing - Reproducing reported issues</p> <p>\u274c Avoid debug mode in: - Production environments (unless necessary) - High-load scenarios - Limited disk space situations - Security-sensitive environments</p>"},{"location":"troubleshooting/debug-mode/#debug-mode-checklist","title":"Debug Mode Checklist","text":"<p>Before enabling debug mode:</p> <ul> <li>[ ] Ensure sufficient disk space (at least 5GB free)</li> <li>[ ] Notify team about debug activation</li> <li>[ ] Document the issue being investigated</li> <li>[ ] Set up log rotation/cleanup</li> <li>[ ] Plan debug duration (don't leave on indefinitely)</li> <li>[ ] Have rollback plan ready</li> </ul> <p>After debug session:</p> <ul> <li>[ ] Disable debug mode</li> <li>[ ] Archive debug logs</li> <li>[ ] Document findings</li> <li>[ ] Clean up large log files</li> <li>[ ] Restore normal configuration</li> <li>[ ] Verify normal operation</li> </ul>"},{"location":"troubleshooting/debug-mode/#security-considerations","title":"Security Considerations","text":"<p>\u26a0\ufe0f Debug mode may log sensitive information:</p> <ul> <li>Authentication tokens</li> <li>Passwords in command lines</li> <li>User data</li> <li>System paths</li> <li>Network topology</li> </ul> <p>Secure debug practices:</p> <ol> <li> <p>Limit access to debug logs: </p><pre><code>chmod 600 logs/agent-debug.log\n</code></pre><p></p> </li> <li> <p>Sanitize logs before sharing: </p><pre><code>sed -i 's/token=.*/token=REDACTED/g' debug.log\nsed -i 's/password=.*/password=REDACTED/g' debug.log\n</code></pre><p></p> </li> <li> <p>Use secure transfer for debug files: </p><pre><code># Encrypt before sending\ngpg -c debug-info.tar.gz\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/debug-mode/#troubleshooting-debug-mode","title":"Troubleshooting Debug Mode","text":""},{"location":"troubleshooting/debug-mode/#debug-mode-not-working","title":"Debug Mode Not Working","text":"<p>If debug output isn't appearing:</p> <ol> <li> <p>Verify configuration: </p><pre><code>grep -i debug agent.properties\n</code></pre><p></p> </li> <li> <p>Check log file permissions: </p><pre><code>ls -la logs/\n</code></pre><p></p> </li> <li> <p>Confirm Java system properties: </p><pre><code>jinfo $(pgrep -f epmware-agent) | grep debug\n</code></pre><p></p> </li> <li> <p>Test with explicit debug: </p><pre><code>java -Dagent.debug=true -Dlog.level=DEBUG -jar epmware-agent.jar --spring.config.name=agent\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/debug-mode/#excessive-debug-output","title":"Excessive Debug Output","text":"<p>If debug logs are too verbose:</p> <ol> <li> <p>Adjust specific categories: </p><pre><code>agent.debug.connection=false\nagent.debug.polling=false\n</code></pre><p></p> </li> <li> <p>Use grep to filter: </p><pre><code>tail -f agent.log | grep -v \"poll\"\n</code></pre><p></p> </li> <li> <p>Increase log level: </p><pre><code>agent.log.level=INFO\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/debug-mode/#related-topics","title":"Related Topics","text":"<ul> <li>Service Errors</li> <li>Agent Logs</li> <li>Password Issues</li> <li>Monitoring</li> </ul>"},{"location":"troubleshooting/passwords/","title":"Password Issues","text":""},{"location":"troubleshooting/passwords/#password-issues","title":"Password Issues","text":"<p>This guide covers common password-related issues with EPMware Agent and target applications, including troubleshooting steps and solutions.</p>"},{"location":"troubleshooting/passwords/#common-password-issues","title":"Common Password Issues","text":""},{"location":"troubleshooting/passwords/#special-characters-in-passwords","title":"Special Characters in Passwords","text":""},{"location":"troubleshooting/passwords/#problem-ampersand-in-password","title":"Problem: Ampersand (&amp;) in Password","text":"<p>Passwords containing ampersand characters cause deployment and import failures.</p> <p>Symptoms: - Application import fails with authentication error - Deployment fails despite correct credentials - Agent logs show command parsing errors</p> <p>Solution: </p><pre><code># Change password to exclude ampersand\n# Avoid these characters: &amp; | &lt; &gt; ; ` $ ! \\ \" '\n</code></pre><p></p> <p>Best Practice Password Characters: - Letters (uppercase and lowercase) - Numbers (0-9) - Safe special characters: @ # % ^ * ( ) - _ = + [ ] { } : , . ? /</p>"},{"location":"troubleshooting/passwords/#problem-quote-characters-in-password","title":"Problem: Quote Characters in Password","text":"<p>Single or double quotes in passwords cause parsing issues.</p> <p>Solution for Different Shells:</p> <p>Linux/Bash: </p><pre><code># Escape quotes in configuration\npassword=\"mypass\\\"word\"  # For double quote\npassword='mypass'\\''word'  # For single quote\n</code></pre><p></p> <p>Windows/PowerShell: </p><pre><code># Use backtick to escape\n$password = \"mypass`\"word\"\n</code></pre><p></p>"},{"location":"troubleshooting/passwords/#password-encryption-issues","title":"Password Encryption Issues","text":""},{"location":"troubleshooting/passwords/#hyperion-planning-password-encryption","title":"Hyperion Planning Password Encryption","text":"<p>Problem: Planning deployment fails with encrypted password error.</p> <p>Solution:</p> <ol> <li> <p>Generate encrypted password file: </p><pre><code>cd D:\\Oracle\\Middleware\\user_projects\\epmsystem1\\Planning\\planning1\nPasswordEncryption.cmd d:\\ew\\app\\ew_hp_cl_pwd.txt\n</code></pre><p></p> </li> <li> <p>Verify file creation: </p><pre><code>dir d:\\ew\\app\\ew_hp_cl_pwd.txt\ntype d:\\ew\\app\\ew_hp_cl_pwd.txt\n</code></pre>    The file should contain encrypted text, not plaintext.<p></p> </li> <li> <p>Update EPMware configuration:</p> </li> <li>Navigate to Configuration \u2192 Applications</li> <li>Select the Planning application</li> <li>Edit PASSWORD_FILE property</li> <li>Enter full path: <code>d:\\ew\\app\\ew_hp_cl_pwd.txt</code></li> </ol> <p>Common Errors: - \"Invalid password file\" - File path is incorrect - \"Cannot decrypt password\" - File was corrupted or manually edited - \"Access denied\" - Agent user lacks read permissions</p>"},{"location":"troubleshooting/passwords/#pcmcsepm-cloud-password-issues","title":"PCMCS/EPM Cloud Password Issues","text":"<p>Problem: EPM Automate login fails with password error.</p> <p>Troubleshooting Steps:</p> <ol> <li> <p>Test password directly: </p><pre><code>cd ~/epmautomate/bin\n./epmautomate login username \"password\" https://instance.oraclecloud.com\n</code></pre><p></p> </li> <li> <p>Check for special characters: </p><pre><code># If password has spaces or special chars, use quotes\n./epmautomate login user \"p@ss word!\" https://instance.oraclecloud.com\n</code></pre><p></p> </li> <li> <p>Verify identity domain: </p><pre><code># Some instances require identity domain\n./epmautomate login user.domain password https://instance.oraclecloud.com\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/passwords/#authentication-token-issues","title":"Authentication Token Issues","text":""},{"location":"troubleshooting/passwords/#problem-rest-api-token-invalid","title":"Problem: REST API Token Invalid","text":"<p>Symptoms: - Agent shows \"Authentication failed\" - Token rejected by EPMware server - Agent unable to establish connection</p> <p>Solution:</p> <ol> <li>Regenerate token in EPMware:</li> <li>Navigate to Security \u2192 Users</li> <li>Select the agent user</li> <li>Right-click and select \"Generate Token\"</li> <li> <p>Copy the new 36-character token</p> </li> <li> <p>Update agent.properties: </p><pre><code>ew.portal.token=new-token-value-here\n</code></pre><p></p> </li> <li> <p>Restart agent: </p><pre><code># Linux\nkill -9 $(pgrep -f epmware-agent)\n./ew_target_service.sh &amp;\n\n# Windows\nStop-Process -Name java -Force\nschtasks /Run /TN \"EPMWARE TARGET AGENT SERVICE\"\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/passwords/#problem-token-expiration","title":"Problem: Token Expiration","text":"<p>Identifying expired tokens: </p><pre><code>grep \"401\\|Unauthorized\" logs/agent.log\n</code></pre><p></p> <p>Solution: - Tokens don't expire by default - If organization has token expiry policy:   1. Set up token rotation schedule   2. Generate new token before expiry   3. Update all affected agents   4. Document token generation date</p>"},{"location":"troubleshooting/passwords/#windows-credential-storage","title":"Windows Credential Storage","text":""},{"location":"troubleshooting/passwords/#problem-cached-credentials-conflict","title":"Problem: Cached Credentials Conflict","text":"<p>Windows may cache old credentials causing authentication failures.</p> <p>Solution:</p> <ol> <li> <p>Clear credential manager: </p><pre><code>cmdkey /list\ncmdkey /delete:targetname\n</code></pre><p></p> </li> <li> <p>Reset service account password: </p><pre><code>net user serviceaccount newpassword\n</code></pre><p></p> </li> <li> <p>Update scheduled task credentials:</p> </li> <li>Open Task Scheduler</li> <li>Edit EPMWARE TARGET AGENT SERVICE</li> <li>Update credentials</li> <li>Save and restart task</li> </ol>"},{"location":"troubleshooting/passwords/#linux-password-storage","title":"Linux Password Storage","text":""},{"location":"troubleshooting/passwords/#problem-password-visible-in-process-list","title":"Problem: Password Visible in Process List","text":"<p>Passwords may be visible when viewing process details.</p> <p>Solution:</p> <ol> <li> <p>Use environment variables: </p><pre><code># Set in agent user's .bashrc\nexport EW_APP_PASSWORD='secretpass'\n\n# Reference in scripts\npassword=$EW_APP_PASSWORD\n</code></pre><p></p> </li> <li> <p>Use password file with restricted permissions: </p><pre><code># Create password file\necho \"password\" &gt; ~/.ew_pass\nchmod 600 ~/.ew_pass\n\n# Read in script\npassword=$(cat ~/.ew_pass)\n</code></pre><p></p> </li> <li> <p>Use keyring/secret management: </p><pre><code># Store using secret-tool\necho -n \"password\" | secret-tool store --label=\"EPMware\" account epmware\n\n# Retrieve in script\npassword=$(secret-tool lookup account epmware)\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/passwords/#password-validation-scripts","title":"Password Validation Scripts","text":""},{"location":"troubleshooting/passwords/#test-authentication-script","title":"Test Authentication Script","text":"<p>Create a script to validate credentials:</p> <p>test-auth.sh (Linux): </p><pre><code>#!/bin/bash\n\necho \"=== EPMware Authentication Test ===\"\necho\n\n# Test 1: Agent Token\necho \"Testing Agent Token...\"\nTOKEN=$(grep \"ew.portal.token\" agent.properties | cut -d'=' -f2)\nPORTAL=$(grep \"ew.portal.url\" agent.properties | cut -d'=' -f2)\n\nresponse=$(curl -s -o /dev/null -w \"%{http_code}\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  \"$PORTAL/api/health\")\n\nif [ \"$response\" = \"200\" ]; then\n    echo \"\u2713 Token authentication successful\"\nelse\n    echo \"\u2717 Token authentication failed (HTTP $response)\"\nfi\n\n# Test 2: Application Credentials\necho\necho \"Testing Application Credentials...\"\n# Add application-specific tests here\n\necho\necho \"=== Test Complete ===\"\n</code></pre><p></p> <p>Test-Auth.ps1 (Windows): </p><pre><code>Write-Host \"=== EPMware Authentication Test ===\" -ForegroundColor Cyan\nWrite-Host\n\n# Test Agent Token\nWrite-Host \"Testing Agent Token...\" -ForegroundColor Yellow\n$config = Get-Content \"agent.properties\"\n$token = ($config | Select-String \"ew.portal.token=\").Line.Split('=')[1]\n$portal = ($config | Select-String \"ew.portal.url=\").Line.Split('=')[1]\n\ntry {\n    $response = Invoke-WebRequest -Uri \"$portal/api/health\" `\n        -Headers @{\"Authorization\"=\"Bearer $token\"} `\n        -Method GET -UseBasicParsing\n\n    if ($response.StatusCode -eq 200) {\n        Write-Host \"\u2713 Token authentication successful\" -ForegroundColor Green\n    }\n} catch {\n    Write-Host \"\u2717 Token authentication failed\" -ForegroundColor Red\n    Write-Host $_.Exception.Message\n}\n\nWrite-Host\nWrite-Host \"=== Test Complete ===\" -ForegroundColor Cyan\n</code></pre><p></p>"},{"location":"troubleshooting/passwords/#password-security-best-practices","title":"Password Security Best Practices","text":""},{"location":"troubleshooting/passwords/#1-password-complexity-requirements","title":"1. Password Complexity Requirements","text":"<p>Implement strong password policy: - Minimum 12 characters - Mix of upper/lowercase letters - Include numbers - Include special characters (avoiding problematic ones) - No dictionary words - No personal information</p>"},{"location":"troubleshooting/passwords/#2-password-rotation","title":"2. Password Rotation","text":"<p>Schedule regular password updates: </p><pre><code># Password rotation reminder script\n#!/bin/bash\n\nPASSWORD_AGE_DAYS=90\nLAST_CHANGE_FILE=\".password_change_date\"\n\nif [ -f $LAST_CHANGE_FILE ]; then\n    LAST_CHANGE=$(cat $LAST_CHANGE_FILE)\n    DAYS_SINCE=$((( $(date +%s) - $LAST_CHANGE ) / 86400))\n\n    if [ $DAYS_SINCE -gt $PASSWORD_AGE_DAYS ]; then\n        echo \"WARNING: Password is $DAYS_SINCE days old. Please rotate.\"\n        # Send alert email\n    fi\nelse\n    date +%s &gt; $LAST_CHANGE_FILE\nfi\n</code></pre><p></p>"},{"location":"troubleshooting/passwords/#3-secure-storage","title":"3. Secure Storage","text":"<p>Never store passwords in: - Plain text files - Source code - Version control systems - Unencrypted databases - Email or chat logs</p>"},{"location":"troubleshooting/passwords/#4-access-control","title":"4. Access Control","text":"<p>Restrict password file permissions: </p><pre><code># Linux\nchmod 600 password_file\nchown agent_user:agent_group password_file\n\n# Windows\nicacls password_file /grant:r \"agent_user:(R)\" /inheritance:r\n</code></pre><p></p>"},{"location":"troubleshooting/passwords/#troubleshooting-checklist","title":"Troubleshooting Checklist","text":"<p>When experiencing password issues:</p> <ul> <li>[ ] Verify no special characters causing issues (especially &amp;, quotes)</li> <li>[ ] Check password hasn't expired</li> <li>[ ] Confirm correct username/password combination</li> <li>[ ] Verify proper encryption for Planning applications</li> <li>[ ] Check token validity for REST API</li> <li>[ ] Review agent logs for specific error messages</li> <li>[ ] Test authentication outside of EPMware</li> <li>[ ] Verify network connectivity to target systems</li> <li>[ ] Check firewall rules aren't blocking authentication</li> <li>[ ] Confirm service account isn't locked</li> <li>[ ] Validate password file permissions</li> <li>[ ] Ensure no cached/stale credentials</li> </ul>"},{"location":"troubleshooting/passwords/#error-messages-and-solutions","title":"Error Messages and Solutions","text":"Error Message Likely Cause Solution \"Invalid credentials\" Wrong username/password Verify credentials with application admin \"Token authentication failed\" Invalid or expired token Regenerate token in EPMware \"Cannot decrypt password\" Corrupted password file Regenerate encrypted password file \"Access denied\" Account locked or disabled Unlock account in directory service \"Authentication timeout\" Network issues Check firewall and network connectivity \"Password expired\" Password needs rotation Update password per organization policy \"Special character error\" Unsupported character in password Change password to exclude problematic characters"},{"location":"troubleshooting/passwords/#related-topics","title":"Related Topics","text":"<ul> <li>Service Errors</li> <li>Debug Mode</li> <li>Agent Configuration</li> <li>Security Configuration</li> </ul>"},{"location":"troubleshooting/service-errors/","title":"Service Errors","text":""},{"location":"troubleshooting/service-errors/#service-errors","title":"Service Errors","text":"<p>This guide covers common service errors encountered with EPMware Agent, including diagnostic procedures and resolution steps.</p>"},{"location":"troubleshooting/service-errors/#common-service-errors","title":"Common Service Errors","text":""},{"location":"troubleshooting/service-errors/#connection-errors","title":"Connection Errors","text":""},{"location":"troubleshooting/service-errors/#error-connection-refused","title":"Error: Connection Refused","text":"<p>Symptoms: </p><pre><code>ERROR: Connection refused to epmware-server.com:443\njava.net.ConnectException: Connection refused\n</code></pre><p></p> <p>Causes: - EPMware server is down - Firewall blocking connection - Incorrect server URL or port - Network connectivity issues</p> <p>Resolution:</p> <ol> <li> <p>Verify server is accessible: </p><pre><code># Test connectivity\nping epmware-server.com\n\n# Test port\ntelnet epmware-server.com 443\n\n# Test with curl\ncurl -I https://epmware-server.com\n</code></pre><p></p> </li> <li> <p>Check firewall rules: </p><pre><code># Linux\nsudo iptables -L | grep 443\n\n# Windows\nnetsh advfirewall firewall show rule name=all | findstr 443\n</code></pre><p></p> </li> <li> <p>Verify agent configuration: </p><pre><code>grep \"ew.portal.url\" agent.properties\n</code></pre><p></p> </li> <li> <p>Test from different network location: </p><pre><code># Use traceroute to identify network issues\ntraceroute epmware-server.com\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/service-errors/#error-connection-timeout","title":"Error: Connection Timeout","text":"<p>Symptoms: </p><pre><code>ERROR: Connection timeout after 30000ms\njava.net.SocketTimeoutException: Read timed out\n</code></pre><p></p> <p>Resolution:</p> <ol> <li> <p>Increase timeout in agent.properties: </p><pre><code>agent.connection.timeout=60000\nagent.read.timeout=60000\n</code></pre><p></p> </li> <li> <p>Check for proxy requirements: </p><pre><code># Set proxy if needed\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\n</code></pre><p></p> </li> <li> <p>Optimize network route: </p><pre><code># Check network latency\nping -c 100 epmware-server.com | grep avg\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/service-errors/#authentication-errors","title":"Authentication Errors","text":""},{"location":"troubleshooting/service-errors/#error-401-unauthorized","title":"Error: 401 Unauthorized","text":"<p>Symptoms: </p><pre><code>ERROR: HTTP 401 Unauthorized\nAuthentication failed: Invalid token\n</code></pre><p></p> <p>Resolution:</p> <ol> <li> <p>Verify token is correct: </p><pre><code># Check token in config\ngrep \"ew.portal.token\" agent.properties\n\n# Ensure no extra spaces or characters\ncat agent.properties | od -c | grep token\n</code></pre><p></p> </li> <li> <p>Regenerate token:</p> </li> <li>Log into EPMware</li> <li>Navigate to Security \u2192 Users</li> <li>Generate new token for agent user</li> <li> <p>Update agent.properties</p> </li> <li> <p>Check user permissions:</p> </li> <li>Verify agent user is active</li> <li>Confirm user has required roles</li> <li>Check no IP restrictions</li> </ol>"},{"location":"troubleshooting/service-errors/#error-403-forbidden","title":"Error: 403 Forbidden","text":"<p>Symptoms: </p><pre><code>ERROR: HTTP 403 Forbidden\nAccess denied to resource\n</code></pre><p></p> <p>Resolution:</p> <ol> <li>Verify user permissions in EPMware:</li> <li>Agent user needs appropriate security class</li> <li>Check application access rights</li> <li> <p>Verify server configuration access</p> </li> <li> <p>Check SSL certificate issues: </p><pre><code># Test SSL connection\nopenssl s_client -connect epmware-server.com:443\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/service-errors/#javajvm-errors","title":"Java/JVM Errors","text":""},{"location":"troubleshooting/service-errors/#error-outofmemoryerror","title":"Error: OutOfMemoryError","text":"<p>Symptoms: </p><pre><code>Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n</code></pre><p></p> <p>Resolution:</p> <ol> <li> <p>Increase heap size in ew_target_service.sh: </p><pre><code># Original\njava -jar epmware-agent.jar --spring.config.name=agent\n\n# Modified with increased memory\njava -Xms512m -Xmx2g -jar epmware-agent.jar --spring.config.name=agent\n</code></pre><p></p> </li> <li> <p>Monitor memory usage: </p><pre><code># Check current usage\njstat -gc $(pgrep -f epmware-agent)\n\n# Generate heap dump for analysis\njmap -dump:format=b,file=heap.bin $(pgrep -f epmware-agent)\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/service-errors/#error-classnotfoundexception","title":"Error: ClassNotFoundException","text":"<p>Symptoms: </p><pre><code>java.lang.ClassNotFoundException: com.epmware.agent.Main\n</code></pre><p></p> <p>Resolution:</p> <ol> <li> <p>Verify JAR file integrity: </p><pre><code># Check JAR is not corrupted\njar tf epmware-agent.jar | grep Main\n\n# Verify checksum if provided\nsha256sum epmware-agent.jar\n</code></pre><p></p> </li> <li> <p>Check Java classpath: </p><pre><code># Ensure all required JARs are present\nls -la *.jar\n\n# Verify Java version compatibility\njava -version\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/service-errors/#file-system-errors","title":"File System Errors","text":""},{"location":"troubleshooting/service-errors/#error-permission-denied","title":"Error: Permission Denied","text":"<p>Symptoms: </p><pre><code>ERROR: Permission denied: /home/user/logs/agent.log\njava.io.FileNotFoundException: Permission denied\n</code></pre><p></p> <p>Resolution:</p> <ol> <li> <p>Fix file permissions: </p><pre><code># Check current permissions\nls -la logs/\n\n# Fix permissions\nchmod 755 logs\nchmod 644 logs/*.log\n\n# Fix ownership\nchown -R agent_user:agent_group ~/\n</code></pre><p></p> </li> <li> <p>Check SELinux (Linux): </p><pre><code># Check if SELinux is blocking\ngetenforce\n\n# Temporarily disable to test\nsudo setenforce 0\n\n# Add permanent exception if needed\nsudo semanage fcontext -a -t user_home_t \"/home/agent(/.*)?\"\nsudo restorecon -Rv /home/agent\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/service-errors/#error-no-space-left-on-device","title":"Error: No Space Left on Device","text":"<p>Symptoms: </p><pre><code>ERROR: No space left on device\njava.io.IOException: No space left on device\n</code></pre><p></p> <p>Resolution:</p> <ol> <li> <p>Check disk space: </p><pre><code># Check overall disk usage\ndf -h\n\n# Find large files\ndu -sh /* | sort -hr | head -20\n\n# Check agent logs size\ndu -sh logs/\n</code></pre><p></p> </li> <li> <p>Clean up logs: </p><pre><code># Archive old logs\ntar -czf logs-$(date +%Y%m%d).tar.gz logs/*.log\n\n# Remove old logs\nfind logs/ -name \"*.log\" -mtime +30 -delete\n</code></pre><p></p> </li> <li> <p>Implement log rotation: </p><pre><code># Add to crontab\n0 0 * * * find /home/agent/logs -name \"*.log\" -mtime +7 -delete\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/service-errors/#service-management-errors","title":"Service Management Errors","text":""},{"location":"troubleshooting/service-errors/#error-service-fails-to-start","title":"Error: Service Fails to Start","text":"<p>Symptoms: - Scheduled task shows \"Failed\" - systemd service won't start - No process created</p> <p>Resolution:</p> <ol> <li> <p>Check for existing process: </p><pre><code># Linux\nps -ef | grep epmware-agent\n\n# Windows\nGet-Process java | Where {$_.CommandLine -like \"*epmware*\"}\n</code></pre><p></p> </li> <li> <p>Review system logs: </p><pre><code># Linux systemd\njournalctl -xe | grep epmware\n\n# Windows Event Log\nGet-EventLog -LogName Application -Source \"EPMware*\"\n</code></pre><p></p> </li> <li> <p>Verify prerequisites: </p><pre><code># Check Java\njava -version\n\n# Check required files\nls -la ew_target_service.sh epmware-agent.jar agent.properties\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/service-errors/#error-service-keeps-restarting","title":"Error: Service Keeps Restarting","text":"<p>Symptoms: - Service restarts every few minutes - Multiple PIDs in short time - Logs show repeated startup attempts</p> <p>Resolution:</p> <ol> <li> <p>Check restart configuration: </p><pre><code># systemd - Increase restart delay\nRestartSec=60\nStartLimitBurst=3\nStartLimitIntervalSec=300\n</code></pre><p></p> </li> <li> <p>Investigate crash cause: </p><pre><code># Check for core dumps\nfind / -name \"core.*\" 2&gt;/dev/null\n\n# Review error logs\ngrep -E \"ERROR|FATAL|Exception\" logs/agent.log\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/service-errors/#application-specific-errors","title":"Application-Specific Errors","text":""},{"location":"troubleshooting/service-errors/#error-epmlcm-13000-planning","title":"Error: EPMLCM-13000 (Planning)","text":"<p>Symptoms: </p><pre><code>EPMLCM-13000: Service currently not available\n</code></pre><p></p> <p>Resolution:</p> <ol> <li>Verify Planning application provisioning:</li> <li>Check user is provisioned to Planning application</li> <li>Verify application is running</li> <li> <p>Test with EPM Automate or Workspace</p> </li> <li> <p>Check Planning services: </p><pre><code># On Planning server\n./startPlanning.sh status\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/service-errors/#error-hfm-registry-not-found","title":"Error: HFM Registry Not Found","text":"<p>Symptoms: </p><pre><code>ERROR: Cannot find reg.properties file\nHFM import/deployment fails\n</code></pre><p></p> <p>Resolution:</p> <ol> <li> <p>Copy reg.properties to correct location: </p><pre><code>copy D:\\Oracle\\Middleware\\user_projects\\config\\foundation\\11.1.2.0\\reg.properties ^\n     D:\\Oracle\\Middleware\\user_projects\\epmsystem1\\config\\foundation\\11.1.2.0\\\n</code></pre><p></p> </li> <li> <p>Verify file permissions: </p><pre><code>icacls D:\\Oracle\\Middleware\\user_projects\\epmsystem1\\config\\foundation\\11.1.2.0\\reg.properties\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/service-errors/#error-diagnosis-tools","title":"Error Diagnosis Tools","text":""},{"location":"troubleshooting/service-errors/#log-analysis-script","title":"Log Analysis Script","text":"<p>Create a script to analyze agent logs for errors:</p> <p>analyze-errors.sh: </p><pre><code>#!/bin/bash\n\nLOG_DIR=\"logs\"\nREPORT_FILE=\"error-report-$(date +%Y%m%d).txt\"\n\necho \"EPMware Agent Error Analysis Report\" &gt; $REPORT_FILE\necho \"Generated: $(date)\" &gt;&gt; $REPORT_FILE\necho \"==========================================\" &gt;&gt; $REPORT_FILE\necho &gt;&gt; $REPORT_FILE\n\n# Count errors by type\necho \"Error Summary:\" &gt;&gt; $REPORT_FILE\necho \"--------------\" &gt;&gt; $REPORT_FILE\ngrep -h ERROR $LOG_DIR/*.log | cut -d' ' -f5- | sort | uniq -c | sort -rn | head -20 &gt;&gt; $REPORT_FILE\n\necho &gt;&gt; $REPORT_FILE\necho \"Recent Errors (Last 24 hours):\" &gt;&gt; $REPORT_FILE\necho \"-------------------------------\" &gt;&gt; $REPORT_FILE\nfind $LOG_DIR -name \"*.log\" -mtime -1 -exec grep ERROR {} \\; | tail -20 &gt;&gt; $REPORT_FILE\n\necho &gt;&gt; $REPORT_FILE\necho \"Connection Issues:\" &gt;&gt; $REPORT_FILE\necho \"------------------\" &gt;&gt; $REPORT_FILE\ngrep -h \"Connection\\|Timeout\\|refused\" $LOG_DIR/*.log | tail -10 &gt;&gt; $REPORT_FILE\n\necho &gt;&gt; $REPORT_FILE\necho \"Memory Issues:\" &gt;&gt; $REPORT_FILE\necho \"--------------\" &gt;&gt; $REPORT_FILE\ngrep -h \"OutOfMemory\\|heap\" $LOG_DIR/*.log | tail -10 &gt;&gt; $REPORT_FILE\n\necho \"Report saved to: $REPORT_FILE\"\ncat $REPORT_FILE\n</code></pre><p></p>"},{"location":"troubleshooting/service-errors/#health-check-script","title":"Health Check Script","text":"<p>health-check.sh: </p><pre><code>#!/bin/bash\n\necho \"=== EPMware Agent Health Check ===\"\necho\n\n# Check 1: Process Running\necho -n \"Agent Process: \"\nif pgrep -f epmware-agent &gt; /dev/null; then\n    echo \"\u2713 Running (PID: $(pgrep -f epmware-agent))\"\nelse\n    echo \"\u2717 Not Running\"\nfi\n\n# Check 2: Recent Polls\necho -n \"Recent Polls: \"\nLAST_POLL=$(tail -1 logs/agent-poll.log 2&gt;/dev/null | awk '{print $1, $2}')\nif [ -n \"$LAST_POLL\" ]; then\n    echo \"\u2713 Last poll: $LAST_POLL\"\nelse\n    echo \"\u2717 No recent polls\"\nfi\n\n# Check 3: Error Count\necho -n \"Recent Errors: \"\nERROR_COUNT=$(find logs -name \"*.log\" -mmin -60 -exec grep ERROR {} \\; 2&gt;/dev/null | wc -l)\nif [ $ERROR_COUNT -eq 0 ]; then\n    echo \"\u2713 No errors in last hour\"\nelse\n    echo \"\u26a0 $ERROR_COUNT errors in last hour\"\nfi\n\n# Check 4: Disk Space\necho -n \"Disk Space: \"\nDISK_USE=$(df -h . | tail -1 | awk '{print $5}' | sed 's/%//')\nif [ $DISK_USE -lt 80 ]; then\n    echo \"\u2713 ${DISK_USE}% used\"\nelse\n    echo \"\u26a0 ${DISK_USE}% used (cleanup recommended)\"\nfi\n\n# Check 5: Memory Usage\necho -n \"Memory Usage: \"\nif pgrep -f epmware-agent &gt; /dev/null; then\n    MEM=$(ps aux | grep epmware-agent | grep -v grep | awk '{print $4}')\n    echo \"\u2713 ${MEM}% of system memory\"\nfi\n\necho\necho \"=== Health Check Complete ===\"\n</code></pre><p></p>"},{"location":"troubleshooting/service-errors/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"troubleshooting/service-errors/#emergency-restart-procedure","title":"Emergency Restart Procedure","text":"<ol> <li> <p>Kill all agent processes: </p><pre><code>pkill -9 -f epmware-agent\n</code></pre><p></p> </li> <li> <p>Clean up temporary files: </p><pre><code>rm -f /tmp/epmware-*\nrm -f ~/agent.pid\n</code></pre><p></p> </li> <li> <p>Archive problematic logs: </p><pre><code>mkdir -p logs/archive\nmv logs/*.log logs/archive/\n</code></pre><p></p> </li> <li> <p>Start with debug mode: </p><pre><code>export AGENT_DEBUG=true\n./ew_target_service.sh\n</code></pre><p></p> </li> </ol>"},{"location":"troubleshooting/service-errors/#rollback-procedure","title":"Rollback Procedure","text":"<p>If new agent version causes issues:</p> <ol> <li>Stop current agent</li> <li>Backup current configuration: <pre><code>cp agent.properties agent.properties.backup\n</code></pre></li> <li>Restore previous version: <pre><code>cp epmware-agent-old.jar epmware-agent.jar\n</code></pre></li> <li>Restart agent</li> <li>Monitor for stability</li> </ol>"},{"location":"troubleshooting/service-errors/#monitoring-for-errors","title":"Monitoring for Errors","text":""},{"location":"troubleshooting/service-errors/#automated-error-detection","title":"Automated Error Detection","text":"<p>Set up automated monitoring for critical errors:</p> <pre><code>#!/bin/bash\n# monitor-errors.sh - Run via cron every 5 minutes\n\nCRITICAL_PATTERNS=\"OutOfMemory|Connection refused|Authentication failed|FATAL\"\nALERT_EMAIL=\"admin@company.com\"\n\n# Check for critical errors\nERRORS=$(grep -E \"$CRITICAL_PATTERNS\" logs/agent.log | tail -5)\n\nif [ -n \"$ERRORS\" ]; then\n    echo \"$ERRORS\" | mail -s \"EPMware Agent Critical Error on $(hostname)\" $ALERT_EMAIL\nfi\n</code></pre>"},{"location":"troubleshooting/service-errors/#best-practices","title":"Best Practices","text":"<ol> <li>Implement comprehensive logging at appropriate levels</li> <li>Set up proactive monitoring for common errors</li> <li>Document error patterns specific to your environment</li> <li>Create runbooks for common error scenarios</li> <li>Test recovery procedures regularly</li> <li>Maintain error knowledge base for your team</li> <li>Review logs regularly even when no issues are reported</li> </ol>"},{"location":"troubleshooting/service-errors/#related-topics","title":"Related Topics","text":"<ul> <li>Debug Mode</li> <li>Password Issues</li> <li>Agent Logs</li> <li>Monitoring</li> </ul>"}]}